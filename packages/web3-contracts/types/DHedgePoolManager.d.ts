/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AssetAdded = ContractEventLog<{
    fundAddress: string
    manager: string
    asset: string
    isDeposit: boolean
    0: string
    1: string
    2: string
    3: boolean
}>
export type AssetRemoved = ContractEventLog<{
    fundAddress: string
    manager: string
    asset: string
    0: string
    1: string
    2: string
}>
export type ManagerFeeIncreaseAnnounced = ContractEventLog<{
    newNumerator: string
    announcedFeeActivationTime: string
    0: string
    1: string
}>
export type ManagerFeeIncreaseRenounced = ContractEventLog<{}>
export type ManagerFeeSet = ContractEventLog<{
    fundAddress: string
    manager: string
    numerator: string
    denominator: string
    0: string
    1: string
    2: string
    3: string
}>
export type ManagerUpdated = ContractEventLog<{
    newManager: string
    newManagerName: string
    0: string
    1: string
}>
export type PoolLogicSet = ContractEventLog<{
    poolLogic: string
    from: string
    0: string
    1: string
}>

export interface DHedgePoolManager extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): DHedgePoolManager
    clone(): DHedgePoolManager
    methods: {
        addMember(member: string): NonPayableTransactionObject<void>

        addMembers(members: string[]): NonPayableTransactionObject<void>

        announceManagerFeeIncrease(numerator: number | string | BN): NonPayableTransactionObject<void>

        announcedFeeIncreaseNumerator(): NonPayableTransactionObject<string>

        announcedFeeIncreaseTimestamp(): NonPayableTransactionObject<string>

        assetBalance(asset: string): NonPayableTransactionObject<string>

        assetPosition(arg0: string): NonPayableTransactionObject<string>

        'assetValue(address,uint256)'(asset: string, amount: number | string | BN): NonPayableTransactionObject<string>

        'assetValue(address)'(asset: string): NonPayableTransactionObject<string>

        changeAssets(_addAssets: [string, boolean][], _removeAssets: string[]): NonPayableTransactionObject<void>

        changeManager(newManager: string, newManagerName: string): NonPayableTransactionObject<void>

        commitManagerFeeIncrease(): NonPayableTransactionObject<void>

        factory(): NonPayableTransactionObject<string>

        getDepositAssets(): NonPayableTransactionObject<string[]>

        getFundComposition(): NonPayableTransactionObject<{
            assets: [string, boolean][]
            balances: string[]
            rates: string[]
            0: [string, boolean][]
            1: string[]
            2: string[]
        }>

        getManagerFee(): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        getManagerFeeIncreaseInfo(): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        getMembers(): NonPayableTransactionObject<string[]>

        getSupportedAssets(): NonPayableTransactionObject<[string, boolean][]>

        initialize(
            _factory: string,
            _manager: string,
            _managerName: string,
            _poolLogic: string,
            _supportedAssets: [string, boolean][],
        ): NonPayableTransactionObject<void>

        isDepositAsset(asset: string): NonPayableTransactionObject<boolean>

        isMemberAllowed(member: string): NonPayableTransactionObject<boolean>

        isSupportedAsset(asset: string): NonPayableTransactionObject<boolean>

        manager(): NonPayableTransactionObject<string>

        managerName(): NonPayableTransactionObject<string>

        numberOfMembers(): NonPayableTransactionObject<string>

        poolLogic(): NonPayableTransactionObject<string>

        removeMember(member: string): NonPayableTransactionObject<void>

        removeMembers(members: string[]): NonPayableTransactionObject<void>

        removeTrader(): NonPayableTransactionObject<void>

        renounceManagerFeeIncrease(): NonPayableTransactionObject<void>

        setManagerFeeNumerator(numerator: number | string | BN): NonPayableTransactionObject<void>

        setPoolLogic(_poolLogic: string): NonPayableTransactionObject<boolean>

        setTrader(newTrader: string): NonPayableTransactionObject<void>

        supportedAssets(arg0: number | string | BN): NonPayableTransactionObject<{
            asset: string
            isDeposit: boolean
            0: string
            1: boolean
        }>

        totalFundValue(): NonPayableTransactionObject<string>

        trader(): NonPayableTransactionObject<string>

        validateAsset(asset: string): NonPayableTransactionObject<boolean>
    }
    events: {
        AssetAdded(cb?: Callback<AssetAdded>): EventEmitter
        AssetAdded(options?: EventOptions, cb?: Callback<AssetAdded>): EventEmitter

        AssetRemoved(cb?: Callback<AssetRemoved>): EventEmitter
        AssetRemoved(options?: EventOptions, cb?: Callback<AssetRemoved>): EventEmitter

        ManagerFeeIncreaseAnnounced(cb?: Callback<ManagerFeeIncreaseAnnounced>): EventEmitter
        ManagerFeeIncreaseAnnounced(options?: EventOptions, cb?: Callback<ManagerFeeIncreaseAnnounced>): EventEmitter

        ManagerFeeIncreaseRenounced(cb?: Callback<ManagerFeeIncreaseRenounced>): EventEmitter
        ManagerFeeIncreaseRenounced(options?: EventOptions, cb?: Callback<ManagerFeeIncreaseRenounced>): EventEmitter

        ManagerFeeSet(cb?: Callback<ManagerFeeSet>): EventEmitter
        ManagerFeeSet(options?: EventOptions, cb?: Callback<ManagerFeeSet>): EventEmitter

        ManagerUpdated(cb?: Callback<ManagerUpdated>): EventEmitter
        ManagerUpdated(options?: EventOptions, cb?: Callback<ManagerUpdated>): EventEmitter

        PoolLogicSet(cb?: Callback<PoolLogicSet>): EventEmitter
        PoolLogicSet(options?: EventOptions, cb?: Callback<PoolLogicSet>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AssetAdded', cb: Callback<AssetAdded>): void
    once(event: 'AssetAdded', options: EventOptions, cb: Callback<AssetAdded>): void

    once(event: 'AssetRemoved', cb: Callback<AssetRemoved>): void
    once(event: 'AssetRemoved', options: EventOptions, cb: Callback<AssetRemoved>): void

    once(event: 'ManagerFeeIncreaseAnnounced', cb: Callback<ManagerFeeIncreaseAnnounced>): void
    once(event: 'ManagerFeeIncreaseAnnounced', options: EventOptions, cb: Callback<ManagerFeeIncreaseAnnounced>): void

    once(event: 'ManagerFeeIncreaseRenounced', cb: Callback<ManagerFeeIncreaseRenounced>): void
    once(event: 'ManagerFeeIncreaseRenounced', options: EventOptions, cb: Callback<ManagerFeeIncreaseRenounced>): void

    once(event: 'ManagerFeeSet', cb: Callback<ManagerFeeSet>): void
    once(event: 'ManagerFeeSet', options: EventOptions, cb: Callback<ManagerFeeSet>): void

    once(event: 'ManagerUpdated', cb: Callback<ManagerUpdated>): void
    once(event: 'ManagerUpdated', options: EventOptions, cb: Callback<ManagerUpdated>): void

    once(event: 'PoolLogicSet', cb: Callback<PoolLogicSet>): void
    once(event: 'PoolLogicSet', options: EventOptions, cb: Callback<PoolLogicSet>): void
}
