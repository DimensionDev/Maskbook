/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-types'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Burn = ContractEventLog<{
    user: string
    amount: string
    currentBalance: string
    balanceIncrease: string
    avgStableRate: string
    newTotalSupply: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type Mint = ContractEventLog<{
    user: string
    onBehalfOf: string
    amount: string
    currentBalance: string
    balanceIncrease: string
    newRate: string
    avgStableRate: string
    newTotalSupply: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
}>

export interface AaveStableDebtToken extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AaveStableDebtToken
    clone(): AaveStableDebtToken
    methods: {
        approveDelegation(delegatee: string, amount: number | string | BN): NonPayableTransactionObject<void>

        borrowAllowance(fromUser: string, toUser: string): NonPayableTransactionObject<string>

        burn(user: string, amount: number | string | BN): NonPayableTransactionObject<void>

        getAverageStableRate(): NonPayableTransactionObject<string>

        getSupplyData(): NonPayableTransactionObject<{
            0: string
            1: string
            2: string
            3: string
        }>

        getTotalSupplyAndAvgRate(): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        getTotalSupplyLastUpdated(): NonPayableTransactionObject<string>

        getUserLastUpdated(user: string): NonPayableTransactionObject<string>

        getUserStableRate(user: string): NonPayableTransactionObject<string>

        mint(
            user: string,
            onBehalfOf: string,
            amount: number | string | BN,
            rate: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        principalBalanceOf(user: string): NonPayableTransactionObject<string>
    }
    events: {
        Burn(cb?: Callback<Burn>): EventEmitter
        Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter

        Mint(cb?: Callback<Mint>): EventEmitter
        Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Burn', cb: Callback<Burn>): void
    once(event: 'Burn', options: EventOptions, cb: Callback<Burn>): void

    once(event: 'Mint', cb: Callback<Mint>): void
    once(event: 'Mint', options: EventOptions, cb: Callback<Mint>): void
}
