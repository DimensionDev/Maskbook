/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-core'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type Trade = ContractEventLog<{
    trader: string
    subject: string
    isBuy: boolean
    shareAmount: string
    ethAmount: string
    protocolEthAmount: string
    subjectEthAmount: string
    supply: string
    0: string
    1: string
    2: boolean
    3: string
    4: string
    5: string
    6: string
    7: string
}>

export interface FriendTech extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): FriendTech
    clone(): FriendTech
    methods: {
        buyShares(sharesSubject: string, amount: number | string | BN): PayableTransactionObject<void>

        getBuyPrice(sharesSubject: string, amount: number | string | BN): NonPayableTransactionObject<string>

        getBuyPriceAfterFee(sharesSubject: string, amount: number | string | BN): NonPayableTransactionObject<string>

        getPrice(supply: number | string | BN, amount: number | string | BN): NonPayableTransactionObject<string>

        getSellPrice(sharesSubject: string, amount: number | string | BN): NonPayableTransactionObject<string>

        getSellPriceAfterFee(sharesSubject: string, amount: number | string | BN): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        protocolFeeDestination(): NonPayableTransactionObject<string>

        protocolFeePercent(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        sellShares(sharesSubject: string, amount: number | string | BN): PayableTransactionObject<void>

        setFeeDestination(_feeDestination: string): NonPayableTransactionObject<void>

        setProtocolFeePercent(_feePercent: number | string | BN): NonPayableTransactionObject<void>

        setSubjectFeePercent(_feePercent: number | string | BN): NonPayableTransactionObject<void>

        sharesBalance(arg0: string, arg1: string): NonPayableTransactionObject<string>

        sharesSupply(arg0: string): NonPayableTransactionObject<string>

        subjectFeePercent(): NonPayableTransactionObject<string>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>
    }
    events: {
        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        Trade(cb?: Callback<Trade>): EventEmitter
        Trade(options?: EventOptions, cb?: Callback<Trade>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'Trade', cb: Callback<Trade>): void
    once(event: 'Trade', options: EventOptions, cb: Callback<Trade>): void
}
