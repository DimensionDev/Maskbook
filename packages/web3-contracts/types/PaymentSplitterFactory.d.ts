/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type DeployPaymentSplitter = ContractEventLog<{
    owner: string
    title: string
    payees: string[]
    shares: string[]
    splitter: string
    0: string
    1: string
    2: string[]
    3: string[]
    4: string
}>

export interface PaymentSplitterFactory extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): PaymentSplitterFactory
    clone(): PaymentSplitterFactory
    methods: {
        deployPaymentSplitter(
            owner: string,
            title: string,
            payees: string[],
            shares: (number | string | BN)[],
        ): NonPayableTransactionObject<string>

        isPaymentSplitter(query: string): NonPayableTransactionObject<boolean>
    }
    events: {
        DeployPaymentSplitter(cb?: Callback<DeployPaymentSplitter>): EventEmitter
        DeployPaymentSplitter(options?: EventOptions, cb?: Callback<DeployPaymentSplitter>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'DeployPaymentSplitter', cb: Callback<DeployPaymentSplitter>): void
    once(event: 'DeployPaymentSplitter', options: EventOptions, cb: Callback<DeployPaymentSplitter>): void
}
