/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-types'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type ScriptResult = ContractEventLog<{
    executor: string
    script: string
    input: string
    returnData: string
    0: string
    1: string
    2: string
    3: string
}>
export type RecoverToVault = ContractEventLog<{
    vault: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>
export type Stopped = ContractEventLog<{}>
export type Resumed = ContractEventLog<{}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    value: string
    0: string
    1: string
    2: string
}>
export type Approval = ContractEventLog<{
    owner: string
    spender: string
    value: string
    0: string
    1: string
    2: string
}>
export type FeeSet = ContractEventLog<{
    feeBasisPoints: string
    0: string
}>
export type FeeDistributionSet = ContractEventLog<{
    treasuryFeeBasisPoints: string
    insuranceFeeBasisPoints: string
    operatorsFeeBasisPoints: string
    0: string
    1: string
    2: string
}>
export type WithdrawalCredentialsSet = ContractEventLog<{
    withdrawalCredentials: string
    0: string
}>
export type Submitted = ContractEventLog<{
    sender: string
    amount: string
    referral: string
    0: string
    1: string
    2: string
}>
export type Unbuffered = ContractEventLog<{
    amount: string
    0: string
}>
export type Withdrawal = ContractEventLog<{
    sender: string
    tokenAmount: string
    sentFromBuffer: string
    pubkeyHash: string
    etherAmount: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>

export interface Lido extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Lido
    clone(): Lido
    methods: {
        resume(): NonPayableTransactionObject<void>

        name(): NonPayableTransactionObject<string>

        stop(): NonPayableTransactionObject<void>

        hasInitialized(): NonPayableTransactionObject<boolean>

        approve(_spender: string, _amount: number | string | BN): NonPayableTransactionObject<boolean>

        initialize(
            depositContract: string,
            _oracle: string,
            _operators: string,
            _treasury: string,
            _insuranceFund: string,
        ): NonPayableTransactionObject<void>

        getInsuranceFund(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        getSharesByPooledEth(_ethAmount: number | string | BN): NonPayableTransactionObject<string>

        transferFrom(
            _sender: string,
            _recipient: string,
            _amount: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        getOperators(): NonPayableTransactionObject<string>

        getEVMScriptExecutor(_script: string | number[]): NonPayableTransactionObject<string>

        decimals(): NonPayableTransactionObject<string>

        getRecoveryVault(): NonPayableTransactionObject<string>

        DEPOSIT_SIZE(): NonPayableTransactionObject<string>

        getTotalPooledEther(): NonPayableTransactionObject<string>

        PAUSE_ROLE(): NonPayableTransactionObject<string>

        increaseAllowance(_spender: string, _addedValue: number | string | BN): NonPayableTransactionObject<boolean>

        getTreasury(): NonPayableTransactionObject<string>

        SET_ORACLE(): NonPayableTransactionObject<string>

        isStopped(): NonPayableTransactionObject<boolean>

        MANAGE_WITHDRAWAL_KEY(): NonPayableTransactionObject<string>

        getBufferedEther(): NonPayableTransactionObject<string>

        SIGNATURE_LENGTH(): NonPayableTransactionObject<string>

        getWithdrawalCredentials(): NonPayableTransactionObject<string>

        balanceOf(_account: string): NonPayableTransactionObject<string>

        getFeeDistribution(): NonPayableTransactionObject<{
            treasuryFeeBasisPoints: string
            insuranceFeeBasisPoints: string
            operatorsFeeBasisPoints: string
            0: string
            1: string
            2: string
        }>

        getPooledEthByShares(_sharesAmount: number | string | BN): NonPayableTransactionObject<string>

        setOracle(_oracle: string): NonPayableTransactionObject<void>

        allowRecoverability(token: string): NonPayableTransactionObject<boolean>

        appId(): NonPayableTransactionObject<string>

        getOracle(): NonPayableTransactionObject<string>

        getInitializationBlock(): NonPayableTransactionObject<string>

        setFeeDistribution(
            _treasuryFeeBasisPoints: number | string | BN,
            _insuranceFeeBasisPoints: number | string | BN,
            _operatorsFeeBasisPoints: number | string | BN,
        ): NonPayableTransactionObject<void>

        setFee(_feeBasisPoints: number | string | BN): NonPayableTransactionObject<void>

        'depositBufferedEther(uint256)'(_maxDeposits: number | string | BN): NonPayableTransactionObject<void>

        'depositBufferedEther()'(): NonPayableTransactionObject<void>

        symbol(): NonPayableTransactionObject<string>

        MANAGE_FEE(): NonPayableTransactionObject<string>

        transferToVault(_token: string): NonPayableTransactionObject<void>

        SET_TREASURY(): NonPayableTransactionObject<string>

        canPerform(
            _sender: string,
            _role: string | number[],
            _params: (number | string | BN)[],
        ): NonPayableTransactionObject<boolean>

        submit(_referral: string): PayableTransactionObject<string>

        WITHDRAWAL_CREDENTIALS_LENGTH(): NonPayableTransactionObject<string>

        decreaseAllowance(
            _spender: string,
            _subtractedValue: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        getEVMScriptRegistry(): NonPayableTransactionObject<string>

        PUBKEY_LENGTH(): NonPayableTransactionObject<string>

        withdraw(_amount: number | string | BN, _pubkeyHash: string | number[]): NonPayableTransactionObject<void>

        transfer(_recipient: string, _amount: number | string | BN): NonPayableTransactionObject<boolean>

        getDepositContract(): NonPayableTransactionObject<string>

        getBeaconStat(): NonPayableTransactionObject<{
            depositedValidators: string
            beaconValidators: string
            beaconBalance: string
            0: string
            1: string
            2: string
        }>

        BURN_ROLE(): NonPayableTransactionObject<string>

        setInsuranceFund(_insuranceFund: string): NonPayableTransactionObject<void>

        getFee(): NonPayableTransactionObject<string>

        SET_INSURANCE_FUND(): NonPayableTransactionObject<string>

        kernel(): NonPayableTransactionObject<string>

        getTotalShares(): NonPayableTransactionObject<string>

        allowance(_owner: string, _spender: string): NonPayableTransactionObject<string>

        isPetrified(): NonPayableTransactionObject<boolean>

        setWithdrawalCredentials(_withdrawalCredentials: string | number[]): NonPayableTransactionObject<void>

        burnShares(_account: string, _sharesAmount: number | string | BN): NonPayableTransactionObject<string>

        setTreasury(_treasury: string): NonPayableTransactionObject<void>

        pushBeacon(
            _beaconValidators: number | string | BN,
            _beaconBalance: number | string | BN,
        ): NonPayableTransactionObject<void>

        sharesOf(_account: string): NonPayableTransactionObject<string>
    }
    events: {
        ScriptResult(cb?: Callback<ScriptResult>): EventEmitter
        ScriptResult(options?: EventOptions, cb?: Callback<ScriptResult>): EventEmitter

        RecoverToVault(cb?: Callback<RecoverToVault>): EventEmitter
        RecoverToVault(options?: EventOptions, cb?: Callback<RecoverToVault>): EventEmitter

        Stopped(cb?: Callback<Stopped>): EventEmitter
        Stopped(options?: EventOptions, cb?: Callback<Stopped>): EventEmitter

        Resumed(cb?: Callback<Resumed>): EventEmitter
        Resumed(options?: EventOptions, cb?: Callback<Resumed>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        FeeSet(cb?: Callback<FeeSet>): EventEmitter
        FeeSet(options?: EventOptions, cb?: Callback<FeeSet>): EventEmitter

        FeeDistributionSet(cb?: Callback<FeeDistributionSet>): EventEmitter
        FeeDistributionSet(options?: EventOptions, cb?: Callback<FeeDistributionSet>): EventEmitter

        WithdrawalCredentialsSet(cb?: Callback<WithdrawalCredentialsSet>): EventEmitter
        WithdrawalCredentialsSet(options?: EventOptions, cb?: Callback<WithdrawalCredentialsSet>): EventEmitter

        Submitted(cb?: Callback<Submitted>): EventEmitter
        Submitted(options?: EventOptions, cb?: Callback<Submitted>): EventEmitter

        Unbuffered(cb?: Callback<Unbuffered>): EventEmitter
        Unbuffered(options?: EventOptions, cb?: Callback<Unbuffered>): EventEmitter

        Withdrawal(cb?: Callback<Withdrawal>): EventEmitter
        Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'ScriptResult', cb: Callback<ScriptResult>): void
    once(event: 'ScriptResult', options: EventOptions, cb: Callback<ScriptResult>): void

    once(event: 'RecoverToVault', cb: Callback<RecoverToVault>): void
    once(event: 'RecoverToVault', options: EventOptions, cb: Callback<RecoverToVault>): void

    once(event: 'Stopped', cb: Callback<Stopped>): void
    once(event: 'Stopped', options: EventOptions, cb: Callback<Stopped>): void

    once(event: 'Resumed', cb: Callback<Resumed>): void
    once(event: 'Resumed', options: EventOptions, cb: Callback<Resumed>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'FeeSet', cb: Callback<FeeSet>): void
    once(event: 'FeeSet', options: EventOptions, cb: Callback<FeeSet>): void

    once(event: 'FeeDistributionSet', cb: Callback<FeeDistributionSet>): void
    once(event: 'FeeDistributionSet', options: EventOptions, cb: Callback<FeeDistributionSet>): void

    once(event: 'WithdrawalCredentialsSet', cb: Callback<WithdrawalCredentialsSet>): void
    once(event: 'WithdrawalCredentialsSet', options: EventOptions, cb: Callback<WithdrawalCredentialsSet>): void

    once(event: 'Submitted', cb: Callback<Submitted>): void
    once(event: 'Submitted', options: EventOptions, cb: Callback<Submitted>): void

    once(event: 'Unbuffered', cb: Callback<Unbuffered>): void
    once(event: 'Unbuffered', options: EventOptions, cb: Callback<Unbuffered>): void

    once(event: 'Withdrawal', cb: Callback<Withdrawal>): void
    once(event: 'Withdrawal', options: EventOptions, cb: Callback<Withdrawal>): void
}
