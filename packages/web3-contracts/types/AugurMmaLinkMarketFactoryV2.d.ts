/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type LinkNodeChanged = ContractEventLog<{
    newLinkNode: string
    0: string
}>
export type MarketCreated = ContractEventLog<{
    id: string
    creator: string
    endTime: string
    marketType: string
    eventId: string
    homeFighterName: string
    homeFighterId: string
    awayFighterName: string
    awayFighterId: string
    estimatedStartTime: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
    8: string
    9: string
}>
export type MarketResolved = ContractEventLog<{
    id: string
    winner: string
    0: string
    1: string
}>
export type ProtocolChanged = ContractEventLog<{
    protocol: string
    0: string
}>
export type ProtocolFeeChanged = ContractEventLog<{
    fee: string
    0: string
}>
export type ProtocolFeeClaimed = ContractEventLog<{
    protocol: string
    amount: string
    0: string
    1: string
}>
export type SettlementFeeChanged = ContractEventLog<{
    fee: string
    0: string
}>
export type SettlementFeeClaimed = ContractEventLog<{
    settlementAddress: string
    amount: string
    receiver: string
    0: string
    1: string
    2: string
}>
export type SharesBurned = ContractEventLog<{
    id: string
    amount: string
    receiver: string
    0: string
    1: string
    2: string
}>
export type SharesMinted = ContractEventLog<{
    id: string
    amount: string
    receiver: string
    0: string
    1: string
    2: string
}>
export type StakerFeeChanged = ContractEventLog<{
    fee: string
    0: string
}>
export type WinningsClaimed = ContractEventLog<{
    id: string
    winningOutcome: string
    amount: string
    settlementFee: string
    payout: string
    receiver: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>

export interface AugurMmaLinkMarketFactoryV2 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AugurMmaLinkMarketFactoryV2
    clone(): AugurMmaLinkMarketFactoryV2
    methods: {
        accumulatedProtocolFee(): NonPayableTransactionObject<string>

        accumulatedSettlementFees(arg0: string): NonPayableTransactionObject<string>

        burnShares(
            _id: number | string | BN,
            _sharesToBurn: number | string | BN,
            _receiver: string,
        ): NonPayableTransactionObject<string>

        calcCost(_shares: number | string | BN): NonPayableTransactionObject<string>

        calcShares(_collateralIn: number | string | BN): NonPayableTransactionObject<string>

        claimManyWinnings(_ids: (number | string | BN)[], _receiver: string): NonPayableTransactionObject<string>

        claimProtocolFees(): NonPayableTransactionObject<string>

        claimSettlementFees(_receiver: string): NonPayableTransactionObject<string>

        claimWinnings(_id: number | string | BN, _receiver: string): NonPayableTransactionObject<string>

        collateral(): NonPayableTransactionObject<string>

        createMarket(
            _eventId: number | string | BN,
            _homeFighterName: string,
            _homeFighterId: number | string | BN,
            _awayFighterName: string,
            _awayFighterId: number | string | BN,
            _startTimestamp: number | string | BN,
            _moneylines: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        events(arg0: number | string | BN): NonPayableTransactionObject<{
            homeFighterId: string
            awayFighterId: string
            startTime: string
            eventStatus: string
            0: string
            1: string
            2: string
            3: string
        }>

        feePot(): NonPayableTransactionObject<string>

        getEvent(
            _eventId: number | string | BN,
        ): NonPayableTransactionObject<[string[], string, string, string, string]>

        getMarket(
            _id: number | string | BN,
        ): NonPayableTransactionObject<[string, string[], string, string, string, string, string, string, string[]]>

        getMarketDetails(
            _marketId: number | string | BN,
        ): NonPayableTransactionObject<[string, string, string, string, string, string, string, string]>

        getOwner(): NonPayableTransactionObject<string>

        isMarketResolved(_id: number | string | BN): NonPayableTransactionObject<boolean>

        linkNode(): NonPayableTransactionObject<string>

        listOfEvents(arg0: number | string | BN): NonPayableTransactionObject<string>

        listResolvableEvents(): NonPayableTransactionObject<string[]>

        listUnresolvedMarkets(): NonPayableTransactionObject<string[]>

        marketCount(): NonPayableTransactionObject<string>

        mintShares(
            _id: number | string | BN,
            _shareToMint: number | string | BN,
            _receiver: string,
        ): NonPayableTransactionObject<void>

        protocol(): NonPayableTransactionObject<string>

        protocolFee(): NonPayableTransactionObject<string>

        resolveMarket(arg0: number | string | BN): NonPayableTransactionObject<void>

        setLinkNode(_newLinkNode: string): NonPayableTransactionObject<void>

        setProtocol(_newProtocol: string, _claimFirst: boolean): NonPayableTransactionObject<void>

        setProtocolFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        setSettlementFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        setStakerFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        settlementFee(): NonPayableTransactionObject<string>

        shareFactor(): NonPayableTransactionObject<string>

        sportId(): NonPayableTransactionObject<string>

        stakerFee(): NonPayableTransactionObject<string>

        transferOwnership(_newOwner: string): NonPayableTransactionObject<boolean>

        trustedResolveMarkets(
            _eventId: number | string | BN,
            _eventStatus: number | string | BN,
            _homeFighterId: number | string | BN,
            _awayFighterId: number | string | BN,
            _whoWon: number | string | BN,
        ): NonPayableTransactionObject<void>
    }
    events: {
        LinkNodeChanged(cb?: Callback<LinkNodeChanged>): EventEmitter
        LinkNodeChanged(options?: EventOptions, cb?: Callback<LinkNodeChanged>): EventEmitter

        MarketCreated(cb?: Callback<MarketCreated>): EventEmitter
        MarketCreated(options?: EventOptions, cb?: Callback<MarketCreated>): EventEmitter

        MarketResolved(cb?: Callback<MarketResolved>): EventEmitter
        MarketResolved(options?: EventOptions, cb?: Callback<MarketResolved>): EventEmitter

        ProtocolChanged(cb?: Callback<ProtocolChanged>): EventEmitter
        ProtocolChanged(options?: EventOptions, cb?: Callback<ProtocolChanged>): EventEmitter

        ProtocolFeeChanged(cb?: Callback<ProtocolFeeChanged>): EventEmitter
        ProtocolFeeChanged(options?: EventOptions, cb?: Callback<ProtocolFeeChanged>): EventEmitter

        ProtocolFeeClaimed(cb?: Callback<ProtocolFeeClaimed>): EventEmitter
        ProtocolFeeClaimed(options?: EventOptions, cb?: Callback<ProtocolFeeClaimed>): EventEmitter

        SettlementFeeChanged(cb?: Callback<SettlementFeeChanged>): EventEmitter
        SettlementFeeChanged(options?: EventOptions, cb?: Callback<SettlementFeeChanged>): EventEmitter

        SettlementFeeClaimed(cb?: Callback<SettlementFeeClaimed>): EventEmitter
        SettlementFeeClaimed(options?: EventOptions, cb?: Callback<SettlementFeeClaimed>): EventEmitter

        SharesBurned(cb?: Callback<SharesBurned>): EventEmitter
        SharesBurned(options?: EventOptions, cb?: Callback<SharesBurned>): EventEmitter

        SharesMinted(cb?: Callback<SharesMinted>): EventEmitter
        SharesMinted(options?: EventOptions, cb?: Callback<SharesMinted>): EventEmitter

        StakerFeeChanged(cb?: Callback<StakerFeeChanged>): EventEmitter
        StakerFeeChanged(options?: EventOptions, cb?: Callback<StakerFeeChanged>): EventEmitter

        WinningsClaimed(cb?: Callback<WinningsClaimed>): EventEmitter
        WinningsClaimed(options?: EventOptions, cb?: Callback<WinningsClaimed>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'LinkNodeChanged', cb: Callback<LinkNodeChanged>): void
    once(event: 'LinkNodeChanged', options: EventOptions, cb: Callback<LinkNodeChanged>): void

    once(event: 'MarketCreated', cb: Callback<MarketCreated>): void
    once(event: 'MarketCreated', options: EventOptions, cb: Callback<MarketCreated>): void

    once(event: 'MarketResolved', cb: Callback<MarketResolved>): void
    once(event: 'MarketResolved', options: EventOptions, cb: Callback<MarketResolved>): void

    once(event: 'ProtocolChanged', cb: Callback<ProtocolChanged>): void
    once(event: 'ProtocolChanged', options: EventOptions, cb: Callback<ProtocolChanged>): void

    once(event: 'ProtocolFeeChanged', cb: Callback<ProtocolFeeChanged>): void
    once(event: 'ProtocolFeeChanged', options: EventOptions, cb: Callback<ProtocolFeeChanged>): void

    once(event: 'ProtocolFeeClaimed', cb: Callback<ProtocolFeeClaimed>): void
    once(event: 'ProtocolFeeClaimed', options: EventOptions, cb: Callback<ProtocolFeeClaimed>): void

    once(event: 'SettlementFeeChanged', cb: Callback<SettlementFeeChanged>): void
    once(event: 'SettlementFeeChanged', options: EventOptions, cb: Callback<SettlementFeeChanged>): void

    once(event: 'SettlementFeeClaimed', cb: Callback<SettlementFeeClaimed>): void
    once(event: 'SettlementFeeClaimed', options: EventOptions, cb: Callback<SettlementFeeClaimed>): void

    once(event: 'SharesBurned', cb: Callback<SharesBurned>): void
    once(event: 'SharesBurned', options: EventOptions, cb: Callback<SharesBurned>): void

    once(event: 'SharesMinted', cb: Callback<SharesMinted>): void
    once(event: 'SharesMinted', options: EventOptions, cb: Callback<SharesMinted>): void

    once(event: 'StakerFeeChanged', cb: Callback<StakerFeeChanged>): void
    once(event: 'StakerFeeChanged', options: EventOptions, cb: Callback<StakerFeeChanged>): void

    once(event: 'WinningsClaimed', cb: Callback<WinningsClaimed>): void
    once(event: 'WinningsClaimed', options: EventOptions, cb: Callback<WinningsClaimed>): void
}
