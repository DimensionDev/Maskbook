/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AccrueInterest = ContractEventLog<{
    cashPrior: string
    interestAccumulated: string
    borrowIndex: string
    totalBorrows: string
    0: string
    1: string
    2: string
    3: string
}>
export type Approval = ContractEventLog<{
    owner: string
    spender: string
    amount: string
    0: string
    1: string
    2: string
}>
export type Borrow = ContractEventLog<{
    borrower: string
    borrowAmount: string
    accountBorrows: string
    totalBorrows: string
    0: string
    1: string
    2: string
    3: string
}>
export type Failure = ContractEventLog<{
    error: string
    info: string
    detail: string
    0: string
    1: string
    2: string
}>
export type LiquidateBorrow = ContractEventLog<{
    liquidator: string
    borrower: string
    repayAmount: string
    qiTokenCollateral: string
    seizeTokens: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type Mint = ContractEventLog<{
    minter: string
    mintAmount: string
    mintTokens: string
    0: string
    1: string
    2: string
}>
export type NewAdmin = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type NewComptroller = ContractEventLog<{
    oldComptroller: string
    newComptroller: string
    0: string
    1: string
}>
export type NewImplementation = ContractEventLog<{
    oldImplementation: string
    newImplementation: string
    0: string
    1: string
}>
export type NewMarketInterestRateModel = ContractEventLog<{
    oldInterestRateModel: string
    newInterestRateModel: string
    0: string
    1: string
}>
export type NewPendingAdmin = ContractEventLog<{
    oldPendingAdmin: string
    newPendingAdmin: string
    0: string
    1: string
}>
export type NewProtocolSeizeShare = ContractEventLog<{
    oldProtocolSeizeShareMantissa: string
    newProtocolSeizeShareMantissa: string
    0: string
    1: string
}>
export type NewReserveFactor = ContractEventLog<{
    oldReserveFactorMantissa: string
    newReserveFactorMantissa: string
    0: string
    1: string
}>
export type Redeem = ContractEventLog<{
    redeemer: string
    redeemAmount: string
    redeemTokens: string
    0: string
    1: string
    2: string
}>
export type RepayBorrow = ContractEventLog<{
    payer: string
    borrower: string
    repayAmount: string
    accountBorrows: string
    totalBorrows: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type ReservesAdded = ContractEventLog<{
    benefactor: string
    addAmount: string
    newTotalReserves: string
    0: string
    1: string
    2: string
}>
export type ReservesReduced = ContractEventLog<{
    admin: string
    reduceAmount: string
    newTotalReserves: string
    0: string
    1: string
    2: string
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    amount: string
    0: string
    1: string
    2: string
}>

export interface QiERC20 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): QiERC20
    clone(): QiERC20
    methods: {
        _acceptAdmin(): NonPayableTransactionObject<string>

        _addReserves(addAmount: number | string | BN): NonPayableTransactionObject<string>

        _reduceReserves(reduceAmount: number | string | BN): NonPayableTransactionObject<string>

        _setComptroller(newComptroller: string): NonPayableTransactionObject<string>

        _setImplementation(
            implementation_: string,
            allowResign: boolean,
            becomeImplementationData: string | number[],
        ): NonPayableTransactionObject<void>

        _setInterestRateModel(newInterestRateModel: string): NonPayableTransactionObject<string>

        _setPendingAdmin(newPendingAdmin: string): NonPayableTransactionObject<string>

        _setProtocolSeizeShare(newProtocolSeizeShareMantissa: number | string | BN): NonPayableTransactionObject<string>

        _setReserveFactor(newReserveFactorMantissa: number | string | BN): NonPayableTransactionObject<string>

        accrualBlockTimestamp(): NonPayableTransactionObject<string>

        accrueInterest(): NonPayableTransactionObject<string>

        admin(): NonPayableTransactionObject<string>

        allowance(owner: string, spender: string): NonPayableTransactionObject<string>

        approve(spender: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        balanceOf(owner: string): NonPayableTransactionObject<string>

        balanceOfUnderlying(owner: string): NonPayableTransactionObject<string>

        borrow(borrowAmount: number | string | BN): NonPayableTransactionObject<string>

        borrowBalanceCurrent(account: string): NonPayableTransactionObject<string>

        borrowBalanceStored(account: string): NonPayableTransactionObject<string>

        borrowIndex(): NonPayableTransactionObject<string>

        borrowRatePerTimestamp(): NonPayableTransactionObject<string>

        comptroller(): NonPayableTransactionObject<string>

        decimals(): NonPayableTransactionObject<string>

        delegateToImplementation(data: string | number[]): NonPayableTransactionObject<string>

        delegateToViewImplementation(data: string | number[]): NonPayableTransactionObject<string>

        exchangeRateCurrent(): NonPayableTransactionObject<string>

        exchangeRateStored(): NonPayableTransactionObject<string>

        getAccountSnapshot(account: string): NonPayableTransactionObject<{
            0: string
            1: string
            2: string
            3: string
        }>

        getCash(): NonPayableTransactionObject<string>

        implementation(): NonPayableTransactionObject<string>

        interestRateModel(): NonPayableTransactionObject<string>

        isQiToken(): NonPayableTransactionObject<boolean>

        liquidateBorrow(
            borrower: string,
            repayAmount: number | string | BN,
            qiTokenCollateral: string,
        ): NonPayableTransactionObject<string>

        mint(mintAmount: number | string | BN): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        pendingAdmin(): NonPayableTransactionObject<string>

        protocolSeizeShareMantissa(): NonPayableTransactionObject<string>

        redeem(redeemTokens: number | string | BN): NonPayableTransactionObject<string>

        redeemUnderlying(redeemAmount: number | string | BN): NonPayableTransactionObject<string>

        repayBorrow(repayAmount: number | string | BN): NonPayableTransactionObject<string>

        repayBorrowBehalf(borrower: string, repayAmount: number | string | BN): NonPayableTransactionObject<string>

        reserveFactorMantissa(): NonPayableTransactionObject<string>

        seize(
            liquidator: string,
            borrower: string,
            seizeTokens: number | string | BN,
        ): NonPayableTransactionObject<string>

        supplyRatePerTimestamp(): NonPayableTransactionObject<string>

        sweepToken(token: string): NonPayableTransactionObject<void>

        symbol(): NonPayableTransactionObject<string>

        totalBorrows(): NonPayableTransactionObject<string>

        totalBorrowsCurrent(): NonPayableTransactionObject<string>

        totalReserves(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        transfer(dst: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        transferFrom(src: string, dst: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        underlying(): NonPayableTransactionObject<string>
    }
    events: {
        AccrueInterest(cb?: Callback<AccrueInterest>): EventEmitter
        AccrueInterest(options?: EventOptions, cb?: Callback<AccrueInterest>): EventEmitter

        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        Borrow(cb?: Callback<Borrow>): EventEmitter
        Borrow(options?: EventOptions, cb?: Callback<Borrow>): EventEmitter

        Failure(cb?: Callback<Failure>): EventEmitter
        Failure(options?: EventOptions, cb?: Callback<Failure>): EventEmitter

        LiquidateBorrow(cb?: Callback<LiquidateBorrow>): EventEmitter
        LiquidateBorrow(options?: EventOptions, cb?: Callback<LiquidateBorrow>): EventEmitter

        Mint(cb?: Callback<Mint>): EventEmitter
        Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter

        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        NewComptroller(cb?: Callback<NewComptroller>): EventEmitter
        NewComptroller(options?: EventOptions, cb?: Callback<NewComptroller>): EventEmitter

        NewImplementation(cb?: Callback<NewImplementation>): EventEmitter
        NewImplementation(options?: EventOptions, cb?: Callback<NewImplementation>): EventEmitter

        NewMarketInterestRateModel(cb?: Callback<NewMarketInterestRateModel>): EventEmitter
        NewMarketInterestRateModel(options?: EventOptions, cb?: Callback<NewMarketInterestRateModel>): EventEmitter

        NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter
        NewPendingAdmin(options?: EventOptions, cb?: Callback<NewPendingAdmin>): EventEmitter

        NewProtocolSeizeShare(cb?: Callback<NewProtocolSeizeShare>): EventEmitter
        NewProtocolSeizeShare(options?: EventOptions, cb?: Callback<NewProtocolSeizeShare>): EventEmitter

        NewReserveFactor(cb?: Callback<NewReserveFactor>): EventEmitter
        NewReserveFactor(options?: EventOptions, cb?: Callback<NewReserveFactor>): EventEmitter

        Redeem(cb?: Callback<Redeem>): EventEmitter
        Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter

        RepayBorrow(cb?: Callback<RepayBorrow>): EventEmitter
        RepayBorrow(options?: EventOptions, cb?: Callback<RepayBorrow>): EventEmitter

        ReservesAdded(cb?: Callback<ReservesAdded>): EventEmitter
        ReservesAdded(options?: EventOptions, cb?: Callback<ReservesAdded>): EventEmitter

        ReservesReduced(cb?: Callback<ReservesReduced>): EventEmitter
        ReservesReduced(options?: EventOptions, cb?: Callback<ReservesReduced>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AccrueInterest', cb: Callback<AccrueInterest>): void
    once(event: 'AccrueInterest', options: EventOptions, cb: Callback<AccrueInterest>): void

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'Borrow', cb: Callback<Borrow>): void
    once(event: 'Borrow', options: EventOptions, cb: Callback<Borrow>): void

    once(event: 'Failure', cb: Callback<Failure>): void
    once(event: 'Failure', options: EventOptions, cb: Callback<Failure>): void

    once(event: 'LiquidateBorrow', cb: Callback<LiquidateBorrow>): void
    once(event: 'LiquidateBorrow', options: EventOptions, cb: Callback<LiquidateBorrow>): void

    once(event: 'Mint', cb: Callback<Mint>): void
    once(event: 'Mint', options: EventOptions, cb: Callback<Mint>): void

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'NewComptroller', cb: Callback<NewComptroller>): void
    once(event: 'NewComptroller', options: EventOptions, cb: Callback<NewComptroller>): void

    once(event: 'NewImplementation', cb: Callback<NewImplementation>): void
    once(event: 'NewImplementation', options: EventOptions, cb: Callback<NewImplementation>): void

    once(event: 'NewMarketInterestRateModel', cb: Callback<NewMarketInterestRateModel>): void
    once(event: 'NewMarketInterestRateModel', options: EventOptions, cb: Callback<NewMarketInterestRateModel>): void

    once(event: 'NewPendingAdmin', cb: Callback<NewPendingAdmin>): void
    once(event: 'NewPendingAdmin', options: EventOptions, cb: Callback<NewPendingAdmin>): void

    once(event: 'NewProtocolSeizeShare', cb: Callback<NewProtocolSeizeShare>): void
    once(event: 'NewProtocolSeizeShare', options: EventOptions, cb: Callback<NewProtocolSeizeShare>): void

    once(event: 'NewReserveFactor', cb: Callback<NewReserveFactor>): void
    once(event: 'NewReserveFactor', options: EventOptions, cb: Callback<NewReserveFactor>): void

    once(event: 'Redeem', cb: Callback<Redeem>): void
    once(event: 'Redeem', options: EventOptions, cb: Callback<Redeem>): void

    once(event: 'RepayBorrow', cb: Callback<RepayBorrow>): void
    once(event: 'RepayBorrow', options: EventOptions, cb: Callback<RepayBorrow>): void

    once(event: 'ReservesAdded', cb: Callback<ReservesAdded>): void
    once(event: 'ReservesAdded', options: EventOptions, cb: Callback<ReservesAdded>): void

    once(event: 'ReservesReduced', cb: Callback<ReservesReduced>): void
    once(event: 'ReservesReduced', options: EventOptions, cb: Callback<ReservesReduced>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void
}
