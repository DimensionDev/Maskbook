/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-types'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Claimed = ContractEventLog<{
    index: string
    claimer: string
    amount: string
    0: string
    1: string
    2: string
}>
export type EventCreated = ContractEventLog<{
    index: string
    token: string
    startTime: string
    endTime: string
    merkleRoot: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>

export interface AirdropV2 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AirdropV2
    clone(): AirdropV2
    methods: {
        claim(
            _eventIndex: number | string | BN,
            _merkleProof: (string | number[])[],
            _claimer: string,
            _amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        claimEvents(arg0: number | string | BN): NonPayableTransactionObject<{
            token: string
            startTime: string
            endTime: string
            merkleRoot: string
            0: string
            1: string
            2: string
            3: string
        }>

        eventIndex(): NonPayableTransactionObject<string>

        isClaimed(_eventIndex: number | string | BN, _address: string): NonPayableTransactionObject<boolean>

        owner(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        'setupEvent(address,uint256,bytes32)'(
            _token: string,
            _endTimeFromNow: number | string | BN,
            _merkleRoot: string | number[],
        ): NonPayableTransactionObject<void>

        'setupEvent(address,uint256,uint256,bytes32)'(
            _token: string,
            _startTime: number | string | BN,
            _endTime: number | string | BN,
            _merkleRoot: string | number[],
        ): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        updateMerkleRoot(
            _eventIndex: number | string | BN,
            _merkleRoot: string | number[],
        ): NonPayableTransactionObject<void>

        withdrawToken(_token: string, _amount: number | string | BN): NonPayableTransactionObject<void>
    }
    events: {
        Claimed(cb?: Callback<Claimed>): EventEmitter
        Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter

        EventCreated(cb?: Callback<EventCreated>): EventEmitter
        EventCreated(options?: EventOptions, cb?: Callback<EventCreated>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Claimed', cb: Callback<Claimed>): void
    once(event: 'Claimed', options: EventOptions, cb: Callback<Claimed>): void

    once(event: 'EventCreated', cb: Callback<EventCreated>): void
    once(event: 'EventCreated', options: EventOptions, cb: Callback<EventCreated>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void
}
