/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type ConversionInfoSet = ContractEventLog<{
    conversionRatio: string
    conversionStartTime: string
    conversionEndTime: string
    0: string
    1: string
    2: string
}>
export type NewAdmin = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type NewPendingAdmin = ContractEventLog<{
    oldPendingAdmin: string
    newPendingAdmin: string
    0: string
    1: string
}>
export type TokenConverted = ContractEventLog<{
    reedeemer: string
    vrtAddress: string
    xvsAddress: string
    vrtAmount: string
    xvsAmount: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type TokenWithdraw = ContractEventLog<{
    token: string
    to: string
    amount: string
    0: string
    1: string
    2: string
}>

export interface VrtConverter extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): VrtConverter
    clone(): VrtConverter
    methods: {
        DEAD_ADDRESS(): NonPayableTransactionObject<string>

        ONE_DAY(): NonPayableTransactionObject<string>

        ONE_YEAR(): NonPayableTransactionObject<string>

        TOTAL_PERIODS(): NonPayableTransactionObject<string>

        _acceptAdmin(): NonPayableTransactionObject<void>

        _setPendingAdmin(newPendingAdmin: string): NonPayableTransactionObject<void>

        admin(): NonPayableTransactionObject<string>

        computeRedeemableAmountAndDailyUtilisation(): NonPayableTransactionObject<{
            redeemableAmount: string
            dailyUtilisation: string
            vrtDailyLimit: string
            numberOfDaysSinceStart: string
            0: string
            1: string
            2: string
            3: string
        }>

        computeVrtDailyLimit(): NonPayableTransactionObject<string>

        conversionEndTime(): NonPayableTransactionObject<string>

        conversionRatio(): NonPayableTransactionObject<string>

        conversionStartTime(): NonPayableTransactionObject<string>

        convert(vrtAmount: number | string | BN): NonPayableTransactionObject<void>

        lastDayUpdated(): NonPayableTransactionObject<string>

        pendingAdmin(): NonPayableTransactionObject<string>

        totalVrtConverted(): NonPayableTransactionObject<string>

        vrt(): NonPayableTransactionObject<string>

        vrtAddress(): NonPayableTransactionObject<string>

        vrtDailyUtilised(): NonPayableTransactionObject<string>

        vrtDecimalsMultiplier(): NonPayableTransactionObject<string>

        vrtTotalSupply(): NonPayableTransactionObject<string>

        withdraw(
            tokenAddress: string,
            withdrawAmount: number | string | BN,
            withdrawTo: string,
        ): NonPayableTransactionObject<void>

        withdrawAll(tokenAddress: string, withdrawTo: string): NonPayableTransactionObject<void>

        xvs(): NonPayableTransactionObject<string>

        xvsAddress(): NonPayableTransactionObject<string>

        xvsDecimalsMultiplier(): NonPayableTransactionObject<string>

        xvsVesting(): NonPayableTransactionObject<string>

        xvsVestingAddress(): NonPayableTransactionObject<string>
    }
    events: {
        ConversionInfoSet(cb?: Callback<ConversionInfoSet>): EventEmitter
        ConversionInfoSet(options?: EventOptions, cb?: Callback<ConversionInfoSet>): EventEmitter

        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter
        NewPendingAdmin(options?: EventOptions, cb?: Callback<NewPendingAdmin>): EventEmitter

        TokenConverted(cb?: Callback<TokenConverted>): EventEmitter
        TokenConverted(options?: EventOptions, cb?: Callback<TokenConverted>): EventEmitter

        TokenWithdraw(cb?: Callback<TokenWithdraw>): EventEmitter
        TokenWithdraw(options?: EventOptions, cb?: Callback<TokenWithdraw>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'ConversionInfoSet', cb: Callback<ConversionInfoSet>): void
    once(event: 'ConversionInfoSet', options: EventOptions, cb: Callback<ConversionInfoSet>): void

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'NewPendingAdmin', cb: Callback<NewPendingAdmin>): void
    once(event: 'NewPendingAdmin', options: EventOptions, cb: Callback<NewPendingAdmin>): void

    once(event: 'TokenConverted', cb: Callback<TokenConverted>): void
    once(event: 'TokenConverted', options: EventOptions, cb: Callback<TokenConverted>): void

    once(event: 'TokenWithdraw', cb: Callback<TokenWithdraw>): void
    once(event: 'TokenWithdraw', options: EventOptions, cb: Callback<TokenWithdraw>): void
}
