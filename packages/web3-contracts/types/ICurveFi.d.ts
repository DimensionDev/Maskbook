/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type TokenExchange = ContractEventLog<{
    buyer: string
    sold_id: string
    tokens_sold: string
    bought_id: string
    tokens_bought: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type AddLiquidity = ContractEventLog<{
    provider: string
    token_amounts: string[]
    fees: string[]
    invariant: string
    token_supply: string
    0: string
    1: string[]
    2: string[]
    3: string
    4: string
}>
export type RemoveLiquidity = ContractEventLog<{
    provider: string
    token_amounts: string[]
    fees: string[]
    token_supply: string
    0: string
    1: string[]
    2: string[]
    3: string
}>
export type RemoveLiquidityOne = ContractEventLog<{
    provider: string
    token_amount: string
    coin_amount: string
    0: string
    1: string
    2: string
}>
export type RemoveLiquidityImbalance = ContractEventLog<{
    provider: string
    token_amounts: string[]
    fees: string[]
    invariant: string
    token_supply: string
    0: string
    1: string[]
    2: string[]
    3: string
    4: string
}>
export type CommitNewAdmin = ContractEventLog<{
    deadline: string
    admin: string
    0: string
    1: string
}>
export type NewAdmin = ContractEventLog<{
    admin: string
    0: string
}>
export type CommitNewFee = ContractEventLog<{
    deadline: string
    fee: string
    admin_fee: string
    0: string
    1: string
    2: string
}>
export type NewFee = ContractEventLog<{
    fee: string
    admin_fee: string
    0: string
    1: string
}>
export type RampA = ContractEventLog<{
    old_A: string
    new_A: string
    initial_time: string
    future_time: string
    0: string
    1: string
    2: string
    3: string
}>
export type StopRampA = ContractEventLog<{
    A: string
    t: string
    0: string
    1: string
}>

export interface ICurveFi extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ICurveFi
    clone(): ICurveFi
    methods: {
        A(): NonPayableTransactionObject<string>

        get_virtual_price(): NonPayableTransactionObject<string>

        calc_token_amount(amounts: (number | string | BN)[], deposit: boolean): NonPayableTransactionObject<string>

        add_liquidity(
            amounts: (number | string | BN)[],
            min_mint_amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        get_dy(
            i: number | string | BN,
            j: number | string | BN,
            dx: number | string | BN,
        ): NonPayableTransactionObject<string>

        get_dy_underlying(
            i: number | string | BN,
            j: number | string | BN,
            dx: number | string | BN,
        ): NonPayableTransactionObject<string>

        exchange(
            i: number | string | BN,
            j: number | string | BN,
            dx: number | string | BN,
            min_dy: number | string | BN,
        ): NonPayableTransactionObject<void>

        remove_liquidity(
            _amount: number | string | BN,
            min_amounts: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        remove_liquidity_imbalance(
            amounts: (number | string | BN)[],
            max_burn_amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        calc_withdraw_one_coin(
            _token_amount: number | string | BN,
            i: number | string | BN,
        ): NonPayableTransactionObject<string>

        remove_liquidity_one_coin(
            _token_amount: number | string | BN,
            i: number | string | BN,
            min_amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        ramp_A(_future_A: number | string | BN, _future_time: number | string | BN): NonPayableTransactionObject<void>

        stop_ramp_A(): NonPayableTransactionObject<void>

        commit_new_fee(
            new_fee: number | string | BN,
            new_admin_fee: number | string | BN,
        ): NonPayableTransactionObject<void>

        apply_new_fee(): NonPayableTransactionObject<void>

        revert_new_parameters(): NonPayableTransactionObject<void>

        commit_transfer_ownership(_owner: string): NonPayableTransactionObject<void>

        apply_transfer_ownership(): NonPayableTransactionObject<void>

        revert_transfer_ownership(): NonPayableTransactionObject<void>

        admin_balances(i: number | string | BN): NonPayableTransactionObject<string>

        withdraw_admin_fees(): NonPayableTransactionObject<void>

        donate_admin_fees(): NonPayableTransactionObject<void>

        kill_me(): NonPayableTransactionObject<void>

        unkill_me(): NonPayableTransactionObject<void>

        coins(arg0: number | string | BN): NonPayableTransactionObject<string>

        balances(arg0: number | string | BN): NonPayableTransactionObject<string>

        fee(): NonPayableTransactionObject<string>

        admin_fee(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        initial_A(): NonPayableTransactionObject<string>

        future_A(): NonPayableTransactionObject<string>

        initial_A_time(): NonPayableTransactionObject<string>

        future_A_time(): NonPayableTransactionObject<string>

        admin_actions_deadline(): NonPayableTransactionObject<string>

        transfer_ownership_deadline(): NonPayableTransactionObject<string>

        future_fee(): NonPayableTransactionObject<string>

        future_admin_fee(): NonPayableTransactionObject<string>

        future_owner(): NonPayableTransactionObject<string>
    }
    events: {
        TokenExchange(cb?: Callback<TokenExchange>): EventEmitter
        TokenExchange(options?: EventOptions, cb?: Callback<TokenExchange>): EventEmitter

        AddLiquidity(cb?: Callback<AddLiquidity>): EventEmitter
        AddLiquidity(options?: EventOptions, cb?: Callback<AddLiquidity>): EventEmitter

        RemoveLiquidity(cb?: Callback<RemoveLiquidity>): EventEmitter
        RemoveLiquidity(options?: EventOptions, cb?: Callback<RemoveLiquidity>): EventEmitter

        RemoveLiquidityOne(cb?: Callback<RemoveLiquidityOne>): EventEmitter
        RemoveLiquidityOne(options?: EventOptions, cb?: Callback<RemoveLiquidityOne>): EventEmitter

        RemoveLiquidityImbalance(cb?: Callback<RemoveLiquidityImbalance>): EventEmitter
        RemoveLiquidityImbalance(options?: EventOptions, cb?: Callback<RemoveLiquidityImbalance>): EventEmitter

        CommitNewAdmin(cb?: Callback<CommitNewAdmin>): EventEmitter
        CommitNewAdmin(options?: EventOptions, cb?: Callback<CommitNewAdmin>): EventEmitter

        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        CommitNewFee(cb?: Callback<CommitNewFee>): EventEmitter
        CommitNewFee(options?: EventOptions, cb?: Callback<CommitNewFee>): EventEmitter

        NewFee(cb?: Callback<NewFee>): EventEmitter
        NewFee(options?: EventOptions, cb?: Callback<NewFee>): EventEmitter

        RampA(cb?: Callback<RampA>): EventEmitter
        RampA(options?: EventOptions, cb?: Callback<RampA>): EventEmitter

        StopRampA(cb?: Callback<StopRampA>): EventEmitter
        StopRampA(options?: EventOptions, cb?: Callback<StopRampA>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'TokenExchange', cb: Callback<TokenExchange>): void
    once(event: 'TokenExchange', options: EventOptions, cb: Callback<TokenExchange>): void

    once(event: 'AddLiquidity', cb: Callback<AddLiquidity>): void
    once(event: 'AddLiquidity', options: EventOptions, cb: Callback<AddLiquidity>): void

    once(event: 'RemoveLiquidity', cb: Callback<RemoveLiquidity>): void
    once(event: 'RemoveLiquidity', options: EventOptions, cb: Callback<RemoveLiquidity>): void

    once(event: 'RemoveLiquidityOne', cb: Callback<RemoveLiquidityOne>): void
    once(event: 'RemoveLiquidityOne', options: EventOptions, cb: Callback<RemoveLiquidityOne>): void

    once(event: 'RemoveLiquidityImbalance', cb: Callback<RemoveLiquidityImbalance>): void
    once(event: 'RemoveLiquidityImbalance', options: EventOptions, cb: Callback<RemoveLiquidityImbalance>): void

    once(event: 'CommitNewAdmin', cb: Callback<CommitNewAdmin>): void
    once(event: 'CommitNewAdmin', options: EventOptions, cb: Callback<CommitNewAdmin>): void

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'CommitNewFee', cb: Callback<CommitNewFee>): void
    once(event: 'CommitNewFee', options: EventOptions, cb: Callback<CommitNewFee>): void

    once(event: 'NewFee', cb: Callback<NewFee>): void
    once(event: 'NewFee', options: EventOptions, cb: Callback<NewFee>): void

    once(event: 'RampA', cb: Callback<RampA>): void
    once(event: 'RampA', options: EventOptions, cb: Callback<RampA>): void

    once(event: 'StopRampA', cb: Callback<StopRampA>): void
    once(event: 'StopRampA', options: EventOptions, cb: Callback<StopRampA>): void
}
