/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface IdeaMarketMultiActionContract extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IdeaMarketMultiActionContract
    clone(): IdeaMarketMultiActionContract
    methods: {
        HIGH_POOL_FEE(): NonPayableTransactionObject<string>

        LOW_POOL_FEE(): NonPayableTransactionObject<string>

        MEDIUM_POOL_FEE(): NonPayableTransactionObject<string>

        _dai(): NonPayableTransactionObject<string>

        _uniswapV3Factory(): NonPayableTransactionObject<string>

        _uniswapV3Quoter(): NonPayableTransactionObject<string>

        _uniswapV3SwapRouter(): NonPayableTransactionObject<string>

        _weth(): NonPayableTransactionObject<string>

        addAndBuy(
            tokenName: string,
            marketID: number | string | BN,
            amount: number | string | BN,
            lockDuration: number | string | BN,
            recipient: string,
        ): NonPayableTransactionObject<void>

        buyAndLock(
            ideaToken: string,
            amount: number | string | BN,
            fallbackAmount: number | string | BN,
            cost: number | string | BN,
            lockDuration: number | string | BN,
            recipient: string,
        ): NonPayableTransactionObject<void>

        convertAddAndBuy(
            tokenName: string,
            marketID: number | string | BN,
            inputCurrency: string,
            amount: number | string | BN,
            fallbackAmount: number | string | BN,
            cost: number | string | BN,
            lockDuration: number | string | BN,
            recipient: string,
        ): PayableTransactionObject<void>

        convertAndBuy(
            inputCurrency: string,
            ideaToken: string,
            amount: number | string | BN,
            fallbackAmount: number | string | BN,
            cost: number | string | BN,
            lockDuration: number | string | BN,
            recipient: string,
        ): PayableTransactionObject<void>

        sellAndConvert(
            outputCurrency: string,
            ideaToken: string,
            amount: number | string | BN,
            minPrice: number | string | BN,
            recipient: string,
        ): NonPayableTransactionObject<void>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
