/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AdminWithdrawal = ContractEventLog<{
    admin: string
    totalGameInterest: string
    adminFeeAmount: string
    0: string
    1: string
    2: string
}>
export type Deposit = ContractEventLog<{
    player: string
    segment: string
    amount: string
    0: string
    1: string
    2: string
}>
export type EarlyWithdrawal = ContractEventLog<{
    player: string
    amount: string
    totalGamePrincipal: string
    0: string
    1: string
    2: string
}>
export type FundsDepositedIntoExternalPool = ContractEventLog<{
    amount: string
    0: string
}>
export type FundsRedeemedFromExternalPool_uint256_uint256_uint256_uint256 = ContractEventLog<{
    totalAmount: string
    totalGamePrincipal: string
    totalGameInterest: string
    rewards: string
    0: string
    1: string
    2: string
    3: string
}>
export type FundsRedeemedFromExternalPool_uint256_uint256_uint256 = ContractEventLog<{
    totalAmount: string
    totalGamePrincipal: string
    totalGameInterest: string
    0: string
    1: string
    2: string
}>
export type JoinedGame = ContractEventLog<{
    player: string
    amount: string
    0: string
    1: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type Paused = ContractEventLog<{
    account: string
    0: string
}>
export type Unpaused = ContractEventLog<{
    account: string
    0: string
}>
export type WinnersAnnouncement = ContractEventLog<{
    winners: string[]
    0: string[]
}>
export type Withdrawal_address_uint256_uint256 = ContractEventLog<{
    player: string
    amount: string
    playerReward: string
    0: string
    1: string
    2: string
}>
export type Withdrawal_address_uint256 = ContractEventLog<{
    player: string
    amount: string
    0: string
    1: string
}>

export interface GoodGhostingPolygon extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): GoodGhostingPolygon
    clone(): GoodGhostingPolygon
    methods: {
        adaiToken(): NonPayableTransactionObject<string>

        adminFeeAmount(): NonPayableTransactionObject<string>

        adminFeeWithdraw(): NonPayableTransactionObject<void>

        adminWithdraw(): NonPayableTransactionObject<boolean>

        claim(
            index: number | string | BN,
            account: string,
            isValid: boolean,
            merkleProof: (string | number[])[],
        ): NonPayableTransactionObject<void>

        customFee(): NonPayableTransactionObject<string>

        daiToken(): NonPayableTransactionObject<string>

        depositIntoExternalPool(): NonPayableTransactionObject<void>

        earlyWithdraw(): NonPayableTransactionObject<void>

        earlyWithdrawalFee(): NonPayableTransactionObject<string>

        firstSegmentStart(): NonPayableTransactionObject<string>

        getCurrentSegment(): NonPayableTransactionObject<string>

        getNumberOfPlayers(): NonPayableTransactionObject<string>

        incentiveController(): NonPayableTransactionObject<string>

        isGameCompleted(): NonPayableTransactionObject<boolean>

        iterablePlayers(arg0: number | string | BN): NonPayableTransactionObject<string>

        joinGame(index: number | string | BN, merkleProof: (string | number[])[]): NonPayableTransactionObject<void>

        lastSegment(): NonPayableTransactionObject<string>

        lendingPool(): NonPayableTransactionObject<string>

        lendingPoolAddressProvider(): NonPayableTransactionObject<string>

        makeDeposit(): NonPayableTransactionObject<void>

        matic(): NonPayableTransactionObject<string>

        merkleRoot(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        pause(): NonPayableTransactionObject<void>

        paused(): NonPayableTransactionObject<boolean>

        players(arg0: string): NonPayableTransactionObject<{
            addr: string
            withdrawn: boolean
            canRejoin: boolean
            mostRecentSegmentPaid: string
            amountPaid: string
            0: string
            1: boolean
            2: boolean
            3: string
            4: string
        }>

        redeemFromExternalPool(): NonPayableTransactionObject<void>

        redeemed(): NonPayableTransactionObject<boolean>

        renounceOwnership(): NonPayableTransactionObject<void>

        rewardsPerPlayer(): NonPayableTransactionObject<string>

        segmentDeposit(arg0: number | string | BN): NonPayableTransactionObject<string>

        segmentLength(): NonPayableTransactionObject<string>

        segmentPayment(): NonPayableTransactionObject<string>

        totalGameInterest(): NonPayableTransactionObject<string>

        totalGamePrincipal(): NonPayableTransactionObject<string>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        unpause(): NonPayableTransactionObject<void>

        winners(arg0: number | string | BN): NonPayableTransactionObject<string>

        withdraw(): NonPayableTransactionObject<void>
    }
    events: {
        AdminWithdrawal(cb?: Callback<AdminWithdrawal>): EventEmitter
        AdminWithdrawal(options?: EventOptions, cb?: Callback<AdminWithdrawal>): EventEmitter

        Deposit(cb?: Callback<Deposit>): EventEmitter
        Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

        EarlyWithdrawal(cb?: Callback<EarlyWithdrawal>): EventEmitter
        EarlyWithdrawal(options?: EventOptions, cb?: Callback<EarlyWithdrawal>): EventEmitter

        FundsDepositedIntoExternalPool(cb?: Callback<FundsDepositedIntoExternalPool>): EventEmitter
        FundsDepositedIntoExternalPool(
            options?: EventOptions,
            cb?: Callback<FundsDepositedIntoExternalPool>,
        ): EventEmitter

        'FundsRedeemedFromExternalPool(uint256,uint256,uint256,uint256)'(
            cb?: Callback<FundsRedeemedFromExternalPool_uint256_uint256_uint256_uint256>,
        ): EventEmitter
        'FundsRedeemedFromExternalPool(uint256,uint256,uint256,uint256)'(
            options?: EventOptions,
            cb?: Callback<FundsRedeemedFromExternalPool_uint256_uint256_uint256_uint256>,
        ): EventEmitter

        'FundsRedeemedFromExternalPool(uint256,uint256,uint256)'(
            cb?: Callback<FundsRedeemedFromExternalPool_uint256_uint256_uint256>,
        ): EventEmitter
        'FundsRedeemedFromExternalPool(uint256,uint256,uint256)'(
            options?: EventOptions,
            cb?: Callback<FundsRedeemedFromExternalPool_uint256_uint256_uint256>,
        ): EventEmitter

        JoinedGame(cb?: Callback<JoinedGame>): EventEmitter
        JoinedGame(options?: EventOptions, cb?: Callback<JoinedGame>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        Paused(cb?: Callback<Paused>): EventEmitter
        Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter

        Unpaused(cb?: Callback<Unpaused>): EventEmitter
        Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter

        WinnersAnnouncement(cb?: Callback<WinnersAnnouncement>): EventEmitter
        WinnersAnnouncement(options?: EventOptions, cb?: Callback<WinnersAnnouncement>): EventEmitter

        'Withdrawal(address,uint256,uint256)'(cb?: Callback<Withdrawal_address_uint256_uint256>): EventEmitter
        'Withdrawal(address,uint256,uint256)'(
            options?: EventOptions,
            cb?: Callback<Withdrawal_address_uint256_uint256>,
        ): EventEmitter

        'Withdrawal(address,uint256)'(cb?: Callback<Withdrawal_address_uint256>): EventEmitter
        'Withdrawal(address,uint256)'(options?: EventOptions, cb?: Callback<Withdrawal_address_uint256>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AdminWithdrawal', cb: Callback<AdminWithdrawal>): void
    once(event: 'AdminWithdrawal', options: EventOptions, cb: Callback<AdminWithdrawal>): void

    once(event: 'Deposit', cb: Callback<Deposit>): void
    once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

    once(event: 'EarlyWithdrawal', cb: Callback<EarlyWithdrawal>): void
    once(event: 'EarlyWithdrawal', options: EventOptions, cb: Callback<EarlyWithdrawal>): void

    once(event: 'FundsDepositedIntoExternalPool', cb: Callback<FundsDepositedIntoExternalPool>): void
    once(
        event: 'FundsDepositedIntoExternalPool',
        options: EventOptions,
        cb: Callback<FundsDepositedIntoExternalPool>,
    ): void

    once(event: 'JoinedGame', cb: Callback<JoinedGame>): void
    once(event: 'JoinedGame', options: EventOptions, cb: Callback<JoinedGame>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'Paused', cb: Callback<Paused>): void
    once(event: 'Paused', options: EventOptions, cb: Callback<Paused>): void

    once(event: 'Unpaused', cb: Callback<Unpaused>): void
    once(event: 'Unpaused', options: EventOptions, cb: Callback<Unpaused>): void

    once(event: 'WinnersAnnouncement', cb: Callback<WinnersAnnouncement>): void
    once(event: 'WinnersAnnouncement', options: EventOptions, cb: Callback<WinnersAnnouncement>): void
}
