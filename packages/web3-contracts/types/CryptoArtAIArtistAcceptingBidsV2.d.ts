/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type BidPlaced = ContractEventLog<{
    _bidder: string
    _editionNumber: string
    _amount: string
    0: string
    1: string
    2: string
}>
export type BidIncreased = ContractEventLog<{
    _bidder: string
    _editionNumber: string
    _amount: string
    0: string
    1: string
    2: string
}>
export type BidWithdrawn = ContractEventLog<{
    _bidder: string
    _editionNumber: string
    0: string
    1: string
}>
export type BidAccepted = ContractEventLog<{
    _bidder: string
    _editionNumber: string
    _tokenId: string
    _amount: string
    0: string
    1: string
    2: string
    3: string
}>
export type BidRejected = ContractEventLog<{
    _caller: string
    _bidder: string
    _editionNumber: string
    _amount: string
    0: string
    1: string
    2: string
    3: string
}>
export type BidderRefunded = ContractEventLog<{
    _editionNumber: string
    _bidder: string
    _amount: string
    0: string
    1: string
    2: string
}>
export type AuctionCancelled = ContractEventLog<{
    _editionNumber: string
    0: string
}>
export type AuctionEnabled = ContractEventLog<{
    _editionNumber: string
    _auctioneer: string
    0: string
    1: string
}>
export type AuctionDisabled = ContractEventLog<{
    _editionNumber: string
    _auctioneer: string
    0: string
    1: string
}>
export type Pause = ContractEventLog<{}>
export type Unpause = ContractEventLog<{}>
export type RoleAdded = ContractEventLog<{
    operator: string
    role: string
    0: string
    1: string
}>
export type RoleRemoved = ContractEventLog<{
    operator: string
    role: string
    0: string
    1: string
}>
export type OwnershipRenounced = ContractEventLog<{
    previousOwner: string
    0: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>

export interface CryptoArtAIArtistAcceptingBidsV2 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): CryptoArtAIArtistAcceptingBidsV2
    clone(): CryptoArtAIArtistAcceptingBidsV2
    methods: {
        increaseBid(_editionNumber: number | string | BN): PayableTransactionObject<boolean>

        highestBidForEdition(_editionNumber: number | string | BN): NonPayableTransactionObject<{
            _bidder: string
            _value: string
            0: string
            1: string
        }>

        checkRole(_operator: string, _role: string): NonPayableTransactionObject<void>

        withdrawBid(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        ROLE_WHITELISTED(): NonPayableTransactionObject<string>

        hasRole(_operator: string, _role: string): NonPayableTransactionObject<boolean>

        removeAddressesFromWhitelist(_operators: string[]): NonPayableTransactionObject<void>

        withdrawStuckEther(_withdrawalAccount: string): NonPayableTransactionObject<void>

        removeAddressFromWhitelist(_operator: string): NonPayableTransactionObject<void>

        acceptBid(_editionNumber: number | string | BN): NonPayableTransactionObject<string>

        addedEditions(): NonPayableTransactionObject<string[]>

        unpause(): NonPayableTransactionObject<void>

        setMinBidAmount(_minBidAmount: number | string | BN): NonPayableTransactionObject<void>

        editionHighestBid(arg0: number | string | BN): NonPayableTransactionObject<string>

        minBidAmount(): NonPayableTransactionObject<string>

        editionsOnceEnabledForAuctions(arg0: number | string | BN): NonPayableTransactionObject<string>

        paused(): NonPayableTransactionObject<boolean>

        editionController(_editionNumber: number | string | BN): NonPayableTransactionObject<string>

        rejectBid(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        koCommissionAccount(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        disableEdition(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        editionNumberToArtistControlAddress(arg0: number | string | BN): NonPayableTransactionObject<string>

        addAddressToWhitelist(_operator: string): NonPayableTransactionObject<void>

        pause(): NonPayableTransactionObject<void>

        auctionDetails(_editionNumber: number | string | BN): NonPayableTransactionObject<{
            _enabled: boolean
            _bidder: string
            _value: string
            _controller: string
            0: boolean
            1: string
            2: string
            3: string
        }>

        enableEditionForArtist(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        manualOverrideEditionHighestBidAndBidder(
            _editionNumber: number | string | BN,
            _bidder: string,
            _amount: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        owner(): NonPayableTransactionObject<string>

        setKoCommissionAccount(_koCommissionAccount: string): NonPayableTransactionObject<void>

        cancelAuction(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        manualDeleteEditionBids(
            _editionNumber: number | string | BN,
            _bidder: string,
        ): NonPayableTransactionObject<boolean>

        placeBid(_editionNumber: number | string | BN): PayableTransactionObject<boolean>

        whitelist(_operator: string): NonPayableTransactionObject<boolean>

        setArtistsControlAddressAndEnabledEdition(
            _editionNumber: number | string | BN,
            _address: string,
        ): NonPayableTransactionObject<boolean>

        withdrawStuckEtherOfAmount(
            _withdrawalAccount: string,
            _amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        setKodavV2(_kodaAddress: string): NonPayableTransactionObject<void>

        enabledEditions(arg0: number | string | BN): NonPayableTransactionObject<boolean>

        setArtistsControlAddress(
            _editionNumber: number | string | BN,
            _address: string,
        ): NonPayableTransactionObject<boolean>

        kodaAddress(): NonPayableTransactionObject<string>

        addAddressesToWhitelist(_operators: string[]): NonPayableTransactionObject<void>

        isEditionEnabled(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        enableEdition(_editionNumber: number | string | BN): NonPayableTransactionObject<boolean>

        transferOwnership(_newOwner: string): NonPayableTransactionObject<void>
    }
    events: {
        BidPlaced(cb?: Callback<BidPlaced>): EventEmitter
        BidPlaced(options?: EventOptions, cb?: Callback<BidPlaced>): EventEmitter

        BidIncreased(cb?: Callback<BidIncreased>): EventEmitter
        BidIncreased(options?: EventOptions, cb?: Callback<BidIncreased>): EventEmitter

        BidWithdrawn(cb?: Callback<BidWithdrawn>): EventEmitter
        BidWithdrawn(options?: EventOptions, cb?: Callback<BidWithdrawn>): EventEmitter

        BidAccepted(cb?: Callback<BidAccepted>): EventEmitter
        BidAccepted(options?: EventOptions, cb?: Callback<BidAccepted>): EventEmitter

        BidRejected(cb?: Callback<BidRejected>): EventEmitter
        BidRejected(options?: EventOptions, cb?: Callback<BidRejected>): EventEmitter

        BidderRefunded(cb?: Callback<BidderRefunded>): EventEmitter
        BidderRefunded(options?: EventOptions, cb?: Callback<BidderRefunded>): EventEmitter

        AuctionCancelled(cb?: Callback<AuctionCancelled>): EventEmitter
        AuctionCancelled(options?: EventOptions, cb?: Callback<AuctionCancelled>): EventEmitter

        AuctionEnabled(cb?: Callback<AuctionEnabled>): EventEmitter
        AuctionEnabled(options?: EventOptions, cb?: Callback<AuctionEnabled>): EventEmitter

        AuctionDisabled(cb?: Callback<AuctionDisabled>): EventEmitter
        AuctionDisabled(options?: EventOptions, cb?: Callback<AuctionDisabled>): EventEmitter

        Pause(cb?: Callback<Pause>): EventEmitter
        Pause(options?: EventOptions, cb?: Callback<Pause>): EventEmitter

        Unpause(cb?: Callback<Unpause>): EventEmitter
        Unpause(options?: EventOptions, cb?: Callback<Unpause>): EventEmitter

        RoleAdded(cb?: Callback<RoleAdded>): EventEmitter
        RoleAdded(options?: EventOptions, cb?: Callback<RoleAdded>): EventEmitter

        RoleRemoved(cb?: Callback<RoleRemoved>): EventEmitter
        RoleRemoved(options?: EventOptions, cb?: Callback<RoleRemoved>): EventEmitter

        OwnershipRenounced(cb?: Callback<OwnershipRenounced>): EventEmitter
        OwnershipRenounced(options?: EventOptions, cb?: Callback<OwnershipRenounced>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'BidPlaced', cb: Callback<BidPlaced>): void
    once(event: 'BidPlaced', options: EventOptions, cb: Callback<BidPlaced>): void

    once(event: 'BidIncreased', cb: Callback<BidIncreased>): void
    once(event: 'BidIncreased', options: EventOptions, cb: Callback<BidIncreased>): void

    once(event: 'BidWithdrawn', cb: Callback<BidWithdrawn>): void
    once(event: 'BidWithdrawn', options: EventOptions, cb: Callback<BidWithdrawn>): void

    once(event: 'BidAccepted', cb: Callback<BidAccepted>): void
    once(event: 'BidAccepted', options: EventOptions, cb: Callback<BidAccepted>): void

    once(event: 'BidRejected', cb: Callback<BidRejected>): void
    once(event: 'BidRejected', options: EventOptions, cb: Callback<BidRejected>): void

    once(event: 'BidderRefunded', cb: Callback<BidderRefunded>): void
    once(event: 'BidderRefunded', options: EventOptions, cb: Callback<BidderRefunded>): void

    once(event: 'AuctionCancelled', cb: Callback<AuctionCancelled>): void
    once(event: 'AuctionCancelled', options: EventOptions, cb: Callback<AuctionCancelled>): void

    once(event: 'AuctionEnabled', cb: Callback<AuctionEnabled>): void
    once(event: 'AuctionEnabled', options: EventOptions, cb: Callback<AuctionEnabled>): void

    once(event: 'AuctionDisabled', cb: Callback<AuctionDisabled>): void
    once(event: 'AuctionDisabled', options: EventOptions, cb: Callback<AuctionDisabled>): void

    once(event: 'Pause', cb: Callback<Pause>): void
    once(event: 'Pause', options: EventOptions, cb: Callback<Pause>): void

    once(event: 'Unpause', cb: Callback<Unpause>): void
    once(event: 'Unpause', options: EventOptions, cb: Callback<Unpause>): void

    once(event: 'RoleAdded', cb: Callback<RoleAdded>): void
    once(event: 'RoleAdded', options: EventOptions, cb: Callback<RoleAdded>): void

    once(event: 'RoleRemoved', cb: Callback<RoleRemoved>): void
    once(event: 'RoleRemoved', options: EventOptions, cb: Callback<RoleRemoved>): void

    once(event: 'OwnershipRenounced', cb: Callback<OwnershipRenounced>): void
    once(event: 'OwnershipRenounced', options: EventOptions, cb: Callback<OwnershipRenounced>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void
}
