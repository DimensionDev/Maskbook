/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type NewInterestParams = ContractEventLog<{
    baseRatePerBlock: string
    multiplierPerBlock: string
    0: string
    1: string
}>

export interface InterestModel extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): InterestModel
    clone(): InterestModel
    methods: {
        baseRatePerBlock(): NonPayableTransactionObject<string>

        blocksPerYear(): NonPayableTransactionObject<string>

        getBorrowRate(
            cash: number | string | BN,
            borrows: number | string | BN,
            reserves: number | string | BN,
        ): NonPayableTransactionObject<string>

        getSupplyRate(
            cash: number | string | BN,
            borrows: number | string | BN,
            reserves: number | string | BN,
            reserveFactorMantissa: number | string | BN,
        ): NonPayableTransactionObject<string>

        isInterestRateModel(): NonPayableTransactionObject<boolean>

        multiplierPerBlock(): NonPayableTransactionObject<string>

        utilizationRate(
            cash: number | string | BN,
            borrows: number | string | BN,
            reserves: number | string | BN,
        ): NonPayableTransactionObject<string>
    }
    events: {
        NewInterestParams(cb?: Callback<NewInterestParams>): EventEmitter
        NewInterestParams(options?: EventOptions, cb?: Callback<NewInterestParams>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'NewInterestParams', cb: Callback<NewInterestParams>): void
    once(event: 'NewInterestParams', options: EventOptions, cb: Callback<NewInterestParams>): void
}
