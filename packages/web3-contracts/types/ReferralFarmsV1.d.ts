/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type FarmDepositDecreaseClaimed = ContractEventLog<{
    farmHash: string
    delta: string
    0: string
    1: string
}>
export type FarmDepositDecreaseRequested = ContractEventLog<{
    farmHash: string
    value: string
    confirmation: string
    0: string
    1: string
    2: string
}>
export type FarmDepositIncreased = ContractEventLog<{
    farmHash: string
    delta: string
    0: string
    1: string
}>
export type FarmExists = ContractEventLog<{
    sponsor: string
    rewardTokenDefn: string
    referredTokenDefn: string
    farmHash: string
    0: string
    1: string
    2: string
    3: string
}>
export type FarmMetastate = ContractEventLog<{
    farmHash: string
    key: string
    value: string
    0: string
    1: string
    2: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type RewardsHarvested = ContractEventLog<{
    caller: string
    rewardTokenDefn: string
    farmHash: string
    value: string
    leafHash: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>

export interface ReferralFarmsV1 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ReferralFarmsV1
    clone(): ReferralFarmsV1
    methods: {
        claimReferralFarmDecrease(
            rewardTokenDefn: string | number[],
            referredTokenDefn: string | number[],
            confirmation: number | string | BN,
            value: number | string | BN,
            proof: (string | number[])[],
        ): NonPayableTransactionObject<void>

        configure(confirmationsAddr_: string): NonPayableTransactionObject<void>

        configureMetastate(
            rewardTokenDefn: string | number[],
            referredTokenDefn: string | number[],
            metastate: [string | number[], string | number[]][],
        ): NonPayableTransactionObject<void>

        devRescueErc20(token: string, value: number | string | BN, to: string): NonPayableTransactionObject<void>

        devRescueNative(value: number | string | BN, to: string): NonPayableTransactionObject<void>

        getAccountTokenConfirmationOffset(account: string, token: string): NonPayableTransactionObject<string>

        getFarmConfirmationReward(
            farmHash: string | number[],
            idx: number | string | BN,
        ): NonPayableTransactionObject<[string, string]>

        getFarmDepositRemaining(farmHash: string | number[]): NonPayableTransactionObject<string>

        harvestRewardsNoGapcheck(
            reqs: [string | number[], [string | number[], number | string | BN, number | string | BN][]][],
            proofs: (string | number[])[][][],
        ): NonPayableTransactionObject<void>

        increaseReferralFarm(
            rewardTokenDefn: string | number[],
            referredTokenDefn: string | number[],
            rewardDeposit: number | string | BN,
            metastate: [string | number[], string | number[]][],
        ): NonPayableTransactionObject<void>

        owner(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        requestDecreaseReferralFarm(
            rewardTokenDefn: string | number[],
            referredTokenDefn: string | number[],
            value: number | string | BN,
        ): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>
    }
    events: {
        FarmDepositDecreaseClaimed(cb?: Callback<FarmDepositDecreaseClaimed>): EventEmitter
        FarmDepositDecreaseClaimed(options?: EventOptions, cb?: Callback<FarmDepositDecreaseClaimed>): EventEmitter

        FarmDepositDecreaseRequested(cb?: Callback<FarmDepositDecreaseRequested>): EventEmitter
        FarmDepositDecreaseRequested(options?: EventOptions, cb?: Callback<FarmDepositDecreaseRequested>): EventEmitter

        FarmDepositIncreased(cb?: Callback<FarmDepositIncreased>): EventEmitter
        FarmDepositIncreased(options?: EventOptions, cb?: Callback<FarmDepositIncreased>): EventEmitter

        FarmExists(cb?: Callback<FarmExists>): EventEmitter
        FarmExists(options?: EventOptions, cb?: Callback<FarmExists>): EventEmitter

        FarmMetastate(cb?: Callback<FarmMetastate>): EventEmitter
        FarmMetastate(options?: EventOptions, cb?: Callback<FarmMetastate>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        RewardsHarvested(cb?: Callback<RewardsHarvested>): EventEmitter
        RewardsHarvested(options?: EventOptions, cb?: Callback<RewardsHarvested>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'FarmDepositDecreaseClaimed', cb: Callback<FarmDepositDecreaseClaimed>): void
    once(event: 'FarmDepositDecreaseClaimed', options: EventOptions, cb: Callback<FarmDepositDecreaseClaimed>): void

    once(event: 'FarmDepositDecreaseRequested', cb: Callback<FarmDepositDecreaseRequested>): void
    once(event: 'FarmDepositDecreaseRequested', options: EventOptions, cb: Callback<FarmDepositDecreaseRequested>): void

    once(event: 'FarmDepositIncreased', cb: Callback<FarmDepositIncreased>): void
    once(event: 'FarmDepositIncreased', options: EventOptions, cb: Callback<FarmDepositIncreased>): void

    once(event: 'FarmExists', cb: Callback<FarmExists>): void
    once(event: 'FarmExists', options: EventOptions, cb: Callback<FarmExists>): void

    once(event: 'FarmMetastate', cb: Callback<FarmMetastate>): void
    once(event: 'FarmMetastate', options: EventOptions, cb: Callback<FarmMetastate>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'RewardsHarvested', cb: Callback<RewardsHarvested>): void
    once(event: 'RewardsHarvested', options: EventOptions, cb: Callback<RewardsHarvested>): void
}
