/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Approval = ContractEventLog<{
    src: string
    dst: string
    amt: string
    0: string
    1: string
    2: string
}>
export type LOG_CALL = ContractEventLog<{
    sig: string
    caller: string
    data: string
    0: string
    1: string
    2: string
}>
export type LOG_EXIT = ContractEventLog<{
    caller: string
    tokenOut: string
    tokenAmountOut: string
    0: string
    1: string
    2: string
}>
export type LOG_JOIN = ContractEventLog<{
    caller: string
    tokenIn: string
    tokenAmountIn: string
    0: string
    1: string
    2: string
}>
export type LOG_SWAP = ContractEventLog<{
    caller: string
    tokenIn: string
    tokenOut: string
    tokenAmountIn: string
    tokenAmountOut: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type Transfer = ContractEventLog<{
    src: string
    dst: string
    amt: string
    0: string
    1: string
    2: string
}>

export interface AugurBalancerPool extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AugurBalancerPool
    clone(): AugurBalancerPool
    methods: {
        BONE(): NonPayableTransactionObject<string>

        BPOW_PRECISION(): NonPayableTransactionObject<string>

        EXIT_FEE(): NonPayableTransactionObject<string>

        INIT_POOL_SUPPLY(): NonPayableTransactionObject<string>

        MAX_BOUND_TOKENS(): NonPayableTransactionObject<string>

        MAX_BPOW_BASE(): NonPayableTransactionObject<string>

        MAX_FEE(): NonPayableTransactionObject<string>

        MAX_IN_RATIO(): NonPayableTransactionObject<string>

        MAX_OUT_RATIO(): NonPayableTransactionObject<string>

        MAX_TOTAL_WEIGHT(): NonPayableTransactionObject<string>

        MAX_WEIGHT(): NonPayableTransactionObject<string>

        MIN_BALANCE(): NonPayableTransactionObject<string>

        MIN_BOUND_TOKENS(): NonPayableTransactionObject<string>

        MIN_BPOW_BASE(): NonPayableTransactionObject<string>

        MIN_FEE(): NonPayableTransactionObject<string>

        MIN_WEIGHT(): NonPayableTransactionObject<string>

        allowance(src: string, dst: string): NonPayableTransactionObject<string>

        approve(dst: string, amt: number | string | BN): NonPayableTransactionObject<boolean>

        balanceOf(whom: string): NonPayableTransactionObject<string>

        bind(
            token: string,
            balance: number | string | BN,
            denorm: number | string | BN,
        ): NonPayableTransactionObject<void>

        calcExitPool(
            poolAmountIn: number | string | BN,
            minAmountsOut: (number | string | BN)[],
        ): NonPayableTransactionObject<string[]>

        calcInGivenOut(
            tokenBalanceIn: number | string | BN,
            tokenWeightIn: number | string | BN,
            tokenBalanceOut: number | string | BN,
            tokenWeightOut: number | string | BN,
            tokenAmountOut: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcOutGivenIn(
            tokenBalanceIn: number | string | BN,
            tokenWeightIn: number | string | BN,
            tokenBalanceOut: number | string | BN,
            tokenWeightOut: number | string | BN,
            tokenAmountIn: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcPoolInGivenSingleOut(
            tokenBalanceOut: number | string | BN,
            tokenWeightOut: number | string | BN,
            poolSupply: number | string | BN,
            totalWeight: number | string | BN,
            tokenAmountOut: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcPoolOutGivenSingleIn(
            tokenBalanceIn: number | string | BN,
            tokenWeightIn: number | string | BN,
            poolSupply: number | string | BN,
            totalWeight: number | string | BN,
            tokenAmountIn: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcSingleInGivenPoolOut(
            tokenBalanceIn: number | string | BN,
            tokenWeightIn: number | string | BN,
            poolSupply: number | string | BN,
            totalWeight: number | string | BN,
            poolAmountOut: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcSingleOutGivenPoolIn(
            tokenBalanceOut: number | string | BN,
            tokenWeightOut: number | string | BN,
            poolSupply: number | string | BN,
            totalWeight: number | string | BN,
            poolAmountIn: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        calcSpotPrice(
            tokenBalanceIn: number | string | BN,
            tokenWeightIn: number | string | BN,
            tokenBalanceOut: number | string | BN,
            tokenWeightOut: number | string | BN,
            swapFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        decimals(): NonPayableTransactionObject<string>

        decreaseApproval(dst: string, amt: number | string | BN): NonPayableTransactionObject<boolean>

        exitPool(
            poolAmountIn: number | string | BN,
            minAmountsOut: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        exitswapExternAmountOut(
            tokenOut: string,
            tokenAmountOut: number | string | BN,
            maxPoolAmountIn: number | string | BN,
        ): NonPayableTransactionObject<string>

        exitswapPoolAmountIn(
            tokenOut: string,
            poolAmountIn: number | string | BN,
            minAmountOut: number | string | BN,
        ): NonPayableTransactionObject<string>

        finalize(): NonPayableTransactionObject<void>

        getBalance(token: string): NonPayableTransactionObject<string>

        getColor(): NonPayableTransactionObject<string>

        getController(): NonPayableTransactionObject<string>

        getCurrentTokens(): NonPayableTransactionObject<string[]>

        getDenormalizedWeight(token: string): NonPayableTransactionObject<string>

        getFinalTokens(): NonPayableTransactionObject<string[]>

        getNormalizedWeight(token: string): NonPayableTransactionObject<string>

        getNumTokens(): NonPayableTransactionObject<string>

        getSpotPrice(tokenIn: string, tokenOut: string): NonPayableTransactionObject<string>

        getSpotPriceSansFee(tokenIn: string, tokenOut: string): NonPayableTransactionObject<string>

        getSwapFee(): NonPayableTransactionObject<string>

        getTotalDenormalizedWeight(): NonPayableTransactionObject<string>

        gulp(token: string): NonPayableTransactionObject<void>

        increaseApproval(dst: string, amt: number | string | BN): NonPayableTransactionObject<boolean>

        isBound(t: string): NonPayableTransactionObject<boolean>

        isFinalized(): NonPayableTransactionObject<boolean>

        isPublicSwap(): NonPayableTransactionObject<boolean>

        joinPool(
            poolAmountOut: number | string | BN,
            maxAmountsIn: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        joinswapExternAmountIn(
            tokenIn: string,
            tokenAmountIn: number | string | BN,
            minPoolAmountOut: number | string | BN,
        ): NonPayableTransactionObject<string>

        joinswapPoolAmountOut(
            tokenIn: string,
            poolAmountOut: number | string | BN,
            maxAmountIn: number | string | BN,
        ): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        rebind(
            token: string,
            balance: number | string | BN,
            denorm: number | string | BN,
        ): NonPayableTransactionObject<void>

        setController(manager: string): NonPayableTransactionObject<void>

        setPublicSwap(public_: boolean): NonPayableTransactionObject<void>

        setSwapFee(swapFee: number | string | BN): NonPayableTransactionObject<void>

        swapExactAmountIn(
            tokenIn: string,
            tokenAmountIn: number | string | BN,
            tokenOut: string,
            minAmountOut: number | string | BN,
            maxPrice: number | string | BN,
        ): NonPayableTransactionObject<{
            tokenAmountOut: string
            spotPriceAfter: string
            0: string
            1: string
        }>

        swapExactAmountOut(
            tokenIn: string,
            maxAmountIn: number | string | BN,
            tokenOut: string,
            tokenAmountOut: number | string | BN,
            maxPrice: number | string | BN,
        ): NonPayableTransactionObject<{
            tokenAmountIn: string
            spotPriceAfter: string
            0: string
            1: string
        }>

        symbol(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        transfer(dst: string, amt: number | string | BN): NonPayableTransactionObject<boolean>

        transferFrom(src: string, dst: string, amt: number | string | BN): NonPayableTransactionObject<boolean>

        unbind(token: string): NonPayableTransactionObject<void>
    }
    events: {
        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        LOG_EXIT(cb?: Callback<LOG_EXIT>): EventEmitter
        LOG_EXIT(options?: EventOptions, cb?: Callback<LOG_EXIT>): EventEmitter

        LOG_JOIN(cb?: Callback<LOG_JOIN>): EventEmitter
        LOG_JOIN(options?: EventOptions, cb?: Callback<LOG_JOIN>): EventEmitter

        LOG_SWAP(cb?: Callback<LOG_SWAP>): EventEmitter
        LOG_SWAP(options?: EventOptions, cb?: Callback<LOG_SWAP>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'LOG_EXIT', cb: Callback<LOG_EXIT>): void
    once(event: 'LOG_EXIT', options: EventOptions, cb: Callback<LOG_EXIT>): void

    once(event: 'LOG_JOIN', cb: Callback<LOG_JOIN>): void
    once(event: 'LOG_JOIN', options: EventOptions, cb: Callback<LOG_JOIN>): void

    once(event: 'LOG_SWAP', cb: Callback<LOG_SWAP>): void
    once(event: 'LOG_SWAP', options: EventOptions, cb: Callback<LOG_SWAP>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void
}
