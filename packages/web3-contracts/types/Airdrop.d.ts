/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Claimed = ContractEventLog<{
    amount: string
    timestamp: string
    0: string
    1: string
}>
export type Recharged = ContractEventLog<{
    total: string
    timestamp: string
    0: string
    1: string
}>
export type RootChanged = ContractEventLog<{
    previous: string
    now: string
    0: string
    1: string
}>
export type Withdrawed = ContractEventLog<{
    left: string
    timestamp: string
    0: string
    1: string
}>

export interface Airdrop extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Airdrop
    clone(): Airdrop
    methods: {
        claim(
            index: number | string | BN,
            amount: number | string | BN,
            merkleProof: (string | number[])[],
        ): NonPayableTransactionObject<void>

        recharge(_total: number | string | BN): NonPayableTransactionObject<void>

        set_root(root: string | number[]): NonPayableTransactionObject<void>

        withdraw(): NonPayableTransactionObject<void>

        check(
            index: number | string | BN,
            claimer: string,
            amount: number | string | BN,
            merkleProof: (string | number[])[],
        ): NonPayableTransactionObject<{
            available: boolean
            start: string
            end: string
            claimable: string
            0: boolean
            1: string
            2: string
            3: string
        }>
    }
    events: {
        Claimed(cb?: Callback<Claimed>): EventEmitter
        Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter

        Recharged(cb?: Callback<Recharged>): EventEmitter
        Recharged(options?: EventOptions, cb?: Callback<Recharged>): EventEmitter

        RootChanged(cb?: Callback<RootChanged>): EventEmitter
        RootChanged(options?: EventOptions, cb?: Callback<RootChanged>): EventEmitter

        Withdrawed(cb?: Callback<Withdrawed>): EventEmitter
        Withdrawed(options?: EventOptions, cb?: Callback<Withdrawed>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Claimed', cb: Callback<Claimed>): void
    once(event: 'Claimed', options: EventOptions, cb: Callback<Claimed>): void

    once(event: 'Recharged', cb: Callback<Recharged>): void
    once(event: 'Recharged', options: EventOptions, cb: Callback<Recharged>): void

    once(event: 'RootChanged', cb: Callback<RootChanged>): void
    once(event: 'RootChanged', options: EventOptions, cb: Callback<RootChanged>): void

    once(event: 'Withdrawed', cb: Callback<Withdrawed>): void
    once(event: 'Withdrawed', options: EventOptions, cb: Callback<Withdrawed>): void
}
