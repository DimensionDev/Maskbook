/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface CrvDepositor extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): CrvDepositor
    clone(): CrvDepositor
    methods: {
        FEE_DENOMINATOR(): NonPayableTransactionObject<string>

        crv(): NonPayableTransactionObject<string>

        'deposit(uint256,bool,address)'(
            _amount: number | string | BN,
            _lock: boolean,
            _stakeAddress: string,
        ): NonPayableTransactionObject<void>

        'deposit(uint256,bool)'(_amount: number | string | BN, _lock: boolean): NonPayableTransactionObject<void>

        depositAll(_lock: boolean, _stakeAddress: string): NonPayableTransactionObject<void>

        escrow(): NonPayableTransactionObject<string>

        feeManager(): NonPayableTransactionObject<string>

        incentiveCrv(): NonPayableTransactionObject<string>

        initialLock(): NonPayableTransactionObject<void>

        lockCurve(): NonPayableTransactionObject<void>

        lockIncentive(): NonPayableTransactionObject<string>

        minter(): NonPayableTransactionObject<string>

        setFeeManager(_feeManager: string): NonPayableTransactionObject<void>

        setFees(_lockIncentive: number | string | BN): NonPayableTransactionObject<void>

        staker(): NonPayableTransactionObject<string>

        unlockTime(): NonPayableTransactionObject<string>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
