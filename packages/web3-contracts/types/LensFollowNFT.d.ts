/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-types'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Approval = ContractEventLog<{
    owner: string
    approved: string
    tokenId: string
    0: string
    1: string
    2: string
}>
export type ApprovalForAll = ContractEventLog<{
    owner: string
    operator: string
    approved: boolean
    0: string
    1: string
    2: boolean
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    tokenId: string
    0: string
    1: string
    2: string
}>

export interface LensFollowNFT extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): LensFollowNFT
    clone(): LensFollowNFT
    methods: {
        HUB(): NonPayableTransactionObject<string>

        approve(to: string, tokenId: number | string | BN): NonPayableTransactionObject<void>

        balanceOf(owner: string): NonPayableTransactionObject<string>

        burn(tokenId: number | string | BN): NonPayableTransactionObject<void>

        burnWithSig(
            tokenId: number | string | BN,
            sig: [number | string | BN, string | number[], string | number[], number | string | BN],
        ): NonPayableTransactionObject<void>

        delegate(delegatee: string): NonPayableTransactionObject<void>

        delegateBySig(
            delegator: string,
            delegatee: string,
            sig: [number | string | BN, string | number[], string | number[], number | string | BN],
        ): NonPayableTransactionObject<void>

        exists(tokenId: number | string | BN): NonPayableTransactionObject<boolean>

        getApproved(tokenId: number | string | BN): NonPayableTransactionObject<string>

        getDelegatedSupplyByBlockNumber(blockNumber: number | string | BN): NonPayableTransactionObject<string>

        getDomainSeparator(): NonPayableTransactionObject<string>

        getPowerByBlockNumber(user: string, blockNumber: number | string | BN): NonPayableTransactionObject<string>

        initialize(profileId: number | string | BN): NonPayableTransactionObject<void>

        isApprovedForAll(owner: string, operator: string): NonPayableTransactionObject<boolean>

        mint(to: string): NonPayableTransactionObject<string>

        mintTimestampOf(tokenId: number | string | BN): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>

        permit(
            spender: string,
            tokenId: number | string | BN,
            sig: [number | string | BN, string | number[], string | number[], number | string | BN],
        ): NonPayableTransactionObject<void>

        permitForAll(
            owner: string,
            operator: string,
            approved: boolean,
            sig: [number | string | BN, string | number[], string | number[], number | string | BN],
        ): NonPayableTransactionObject<void>

        'safeTransferFrom(address,address,uint256)'(
            from: string,
            to: string,
            tokenId: number | string | BN,
        ): NonPayableTransactionObject<void>

        'safeTransferFrom(address,address,uint256,bytes)'(
            from: string,
            to: string,
            tokenId: number | string | BN,
            _data: string | number[],
        ): NonPayableTransactionObject<void>

        setApprovalForAll(operator: string, approved: boolean): NonPayableTransactionObject<void>

        sigNonces(arg0: string): NonPayableTransactionObject<string>

        supportsInterface(interfaceId: string | number[]): NonPayableTransactionObject<boolean>

        symbol(): NonPayableTransactionObject<string>

        tokenByIndex(index: number | string | BN): NonPayableTransactionObject<string>

        tokenDataOf(tokenId: number | string | BN): NonPayableTransactionObject<[string, string]>

        tokenOfOwnerByIndex(owner: string, index: number | string | BN): NonPayableTransactionObject<string>

        tokenURI(tokenId: number | string | BN): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        transferFrom(from: string, to: string, tokenId: number | string | BN): NonPayableTransactionObject<void>
    }
    events: {
        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter
        ApprovalForAll(options?: EventOptions, cb?: Callback<ApprovalForAll>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'ApprovalForAll', cb: Callback<ApprovalForAll>): void
    once(event: 'ApprovalForAll', options: EventOptions, cb: Callback<ApprovalForAll>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void
}
