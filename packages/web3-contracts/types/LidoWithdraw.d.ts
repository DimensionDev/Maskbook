/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-core'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Approval = ContractEventLog<{
    owner: string
    approved: string
    tokenId: string
    0: string
    1: string
    2: string
}>
export type ApprovalForAll = ContractEventLog<{
    owner: string
    operator: string
    approved: boolean
    0: string
    1: string
    2: boolean
}>
export type BaseURISet = ContractEventLog<{
    baseURI: string
    0: string
}>
export type BatchMetadataUpdate = ContractEventLog<{
    _fromTokenId: string
    _toTokenId: string
    0: string
    1: string
}>
export type BunkerModeDisabled = ContractEventLog<{}>
export type BunkerModeEnabled = ContractEventLog<{
    _sinceTimestamp: string
    0: string
}>
export type ContractVersionSet = ContractEventLog<{
    version: string
    0: string
}>
export type InitializedV1 = ContractEventLog<{
    _admin: string
    0: string
}>
export type MetadataUpdate = ContractEventLog<{
    _tokenId: string
    0: string
}>
export type NftDescriptorAddressSet = ContractEventLog<{
    nftDescriptorAddress: string
    0: string
}>
export type Paused = ContractEventLog<{
    duration: string
    0: string
}>
export type Resumed = ContractEventLog<{}>
export type RoleAdminChanged = ContractEventLog<{
    role: string
    previousAdminRole: string
    newAdminRole: string
    0: string
    1: string
    2: string
}>
export type RoleGranted = ContractEventLog<{
    role: string
    account: string
    sender: string
    0: string
    1: string
    2: string
}>
export type RoleRevoked = ContractEventLog<{
    role: string
    account: string
    sender: string
    0: string
    1: string
    2: string
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    tokenId: string
    0: string
    1: string
    2: string
}>
export type WithdrawalClaimed = ContractEventLog<{
    requestId: string
    owner: string
    receiver: string
    amountOfETH: string
    0: string
    1: string
    2: string
    3: string
}>
export type WithdrawalRequested = ContractEventLog<{
    requestId: string
    requestor: string
    owner: string
    amountOfStETH: string
    amountOfShares: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type WithdrawalsFinalized = ContractEventLog<{
    from: string
    to: string
    amountOfETHLocked: string
    sharesToBurn: string
    timestamp: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>

export interface LidoWithdraw extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): LidoWithdraw
    clone(): LidoWithdraw
    methods: {
        BUNKER_MODE_DISABLED_TIMESTAMP(): NonPayableTransactionObject<string>

        DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>

        FINALIZE_ROLE(): NonPayableTransactionObject<string>

        MANAGE_TOKEN_URI_ROLE(): NonPayableTransactionObject<string>

        MAX_BATCHES_LENGTH(): NonPayableTransactionObject<string>

        MAX_STETH_WITHDRAWAL_AMOUNT(): NonPayableTransactionObject<string>

        MIN_STETH_WITHDRAWAL_AMOUNT(): NonPayableTransactionObject<string>

        ORACLE_ROLE(): NonPayableTransactionObject<string>

        PAUSE_INFINITELY(): NonPayableTransactionObject<string>

        PAUSE_ROLE(): NonPayableTransactionObject<string>

        RESUME_ROLE(): NonPayableTransactionObject<string>

        STETH(): NonPayableTransactionObject<string>

        WSTETH(): NonPayableTransactionObject<string>

        approve(_to: string, _requestId: number | string | BN): NonPayableTransactionObject<void>

        balanceOf(_owner: string): NonPayableTransactionObject<string>

        bunkerModeSinceTimestamp(): NonPayableTransactionObject<string>

        calculateFinalizationBatches(
            _maxShareRate: number | string | BN,
            _maxTimestamp: number | string | BN,
            _maxRequestsPerCall: number | string | BN,
            _state: [number | string | BN, boolean, (number | string | BN)[], number | string | BN],
        ): NonPayableTransactionObject<[string, boolean, string[], string]>

        claimWithdrawal(_requestId: number | string | BN): NonPayableTransactionObject<void>

        claimWithdrawals(
            _requestIds: (number | string | BN)[],
            _hints: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        claimWithdrawalsTo(
            _requestIds: (number | string | BN)[],
            _hints: (number | string | BN)[],
            _recipient: string,
        ): NonPayableTransactionObject<void>

        finalize(
            _lastRequestIdToBeFinalized: number | string | BN,
            _maxShareRate: number | string | BN,
        ): PayableTransactionObject<void>

        findCheckpointHints(
            _requestIds: (number | string | BN)[],
            _firstIndex: number | string | BN,
            _lastIndex: number | string | BN,
        ): NonPayableTransactionObject<string[]>

        getApproved(_requestId: number | string | BN): NonPayableTransactionObject<string>

        getBaseURI(): NonPayableTransactionObject<string>

        getClaimableEther(
            _requestIds: (number | string | BN)[],
            _hints: (number | string | BN)[],
        ): NonPayableTransactionObject<string[]>

        getContractVersion(): NonPayableTransactionObject<string>

        getLastCheckpointIndex(): NonPayableTransactionObject<string>

        getLastFinalizedRequestId(): NonPayableTransactionObject<string>

        getLastRequestId(): NonPayableTransactionObject<string>

        getLockedEtherAmount(): NonPayableTransactionObject<string>

        getNFTDescriptorAddress(): NonPayableTransactionObject<string>

        getResumeSinceTimestamp(): NonPayableTransactionObject<string>

        getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>

        getRoleMember(role: string | number[], index: number | string | BN): NonPayableTransactionObject<string>

        getRoleMemberCount(role: string | number[]): NonPayableTransactionObject<string>

        getWithdrawalRequests(_owner: string): NonPayableTransactionObject<string[]>

        getWithdrawalStatus(
            _requestIds: (number | string | BN)[],
        ): NonPayableTransactionObject<[string, string, string, string, boolean, boolean][]>

        grantRole(role: string | number[], account: string): NonPayableTransactionObject<void>

        hasRole(role: string | number[], account: string): NonPayableTransactionObject<boolean>

        initialize(_admin: string): NonPayableTransactionObject<void>

        isApprovedForAll(_owner: string, _operator: string): NonPayableTransactionObject<boolean>

        isBunkerModeActive(): NonPayableTransactionObject<boolean>

        isPaused(): NonPayableTransactionObject<boolean>

        name(): NonPayableTransactionObject<string>

        onOracleReport(
            _isBunkerModeNow: boolean,
            _bunkerStartTimestamp: number | string | BN,
            _currentReportTimestamp: number | string | BN,
        ): NonPayableTransactionObject<void>

        ownerOf(_requestId: number | string | BN): NonPayableTransactionObject<string>

        pauseFor(_duration: number | string | BN): NonPayableTransactionObject<void>

        pauseUntil(_pauseUntilInclusive: number | string | BN): NonPayableTransactionObject<void>

        prefinalize(
            _batches: (number | string | BN)[],
            _maxShareRate: number | string | BN,
        ): NonPayableTransactionObject<{
            ethToLock: string
            sharesToBurn: string
            0: string
            1: string
        }>

        renounceRole(role: string | number[], account: string): NonPayableTransactionObject<void>

        requestWithdrawals(_amounts: (number | string | BN)[], _owner: string): NonPayableTransactionObject<string[]>

        requestWithdrawalsWithPermit(
            _amounts: (number | string | BN)[],
            _owner: string,
            _permit: [
                number | string | BN,
                number | string | BN,
                number | string | BN,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<string[]>

        requestWithdrawalsWstETH(
            _amounts: (number | string | BN)[],
            _owner: string,
        ): NonPayableTransactionObject<string[]>

        requestWithdrawalsWstETHWithPermit(
            _amounts: (number | string | BN)[],
            _owner: string,
            _permit: [
                number | string | BN,
                number | string | BN,
                number | string | BN,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<string[]>

        resume(): NonPayableTransactionObject<void>

        revokeRole(role: string | number[], account: string): NonPayableTransactionObject<void>

        'safeTransferFrom(address,address,uint256)'(
            _from: string,
            _to: string,
            _requestId: number | string | BN,
        ): NonPayableTransactionObject<void>

        'safeTransferFrom(address,address,uint256,bytes)'(
            _from: string,
            _to: string,
            _requestId: number | string | BN,
            _data: string | number[],
        ): NonPayableTransactionObject<void>

        setApprovalForAll(_operator: string, _approved: boolean): NonPayableTransactionObject<void>

        setBaseURI(_baseURI: string): NonPayableTransactionObject<void>

        setNFTDescriptorAddress(_nftDescriptorAddress: string): NonPayableTransactionObject<void>

        supportsInterface(interfaceId: string | number[]): NonPayableTransactionObject<boolean>

        symbol(): NonPayableTransactionObject<string>

        tokenURI(_requestId: number | string | BN): NonPayableTransactionObject<string>

        transferFrom(_from: string, _to: string, _requestId: number | string | BN): NonPayableTransactionObject<void>

        unfinalizedRequestNumber(): NonPayableTransactionObject<string>

        unfinalizedStETH(): NonPayableTransactionObject<string>
    }
    events: {
        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter
        ApprovalForAll(options?: EventOptions, cb?: Callback<ApprovalForAll>): EventEmitter

        BaseURISet(cb?: Callback<BaseURISet>): EventEmitter
        BaseURISet(options?: EventOptions, cb?: Callback<BaseURISet>): EventEmitter

        BatchMetadataUpdate(cb?: Callback<BatchMetadataUpdate>): EventEmitter
        BatchMetadataUpdate(options?: EventOptions, cb?: Callback<BatchMetadataUpdate>): EventEmitter

        BunkerModeDisabled(cb?: Callback<BunkerModeDisabled>): EventEmitter
        BunkerModeDisabled(options?: EventOptions, cb?: Callback<BunkerModeDisabled>): EventEmitter

        BunkerModeEnabled(cb?: Callback<BunkerModeEnabled>): EventEmitter
        BunkerModeEnabled(options?: EventOptions, cb?: Callback<BunkerModeEnabled>): EventEmitter

        ContractVersionSet(cb?: Callback<ContractVersionSet>): EventEmitter
        ContractVersionSet(options?: EventOptions, cb?: Callback<ContractVersionSet>): EventEmitter

        InitializedV1(cb?: Callback<InitializedV1>): EventEmitter
        InitializedV1(options?: EventOptions, cb?: Callback<InitializedV1>): EventEmitter

        MetadataUpdate(cb?: Callback<MetadataUpdate>): EventEmitter
        MetadataUpdate(options?: EventOptions, cb?: Callback<MetadataUpdate>): EventEmitter

        NftDescriptorAddressSet(cb?: Callback<NftDescriptorAddressSet>): EventEmitter
        NftDescriptorAddressSet(options?: EventOptions, cb?: Callback<NftDescriptorAddressSet>): EventEmitter

        Paused(cb?: Callback<Paused>): EventEmitter
        Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter

        Resumed(cb?: Callback<Resumed>): EventEmitter
        Resumed(options?: EventOptions, cb?: Callback<Resumed>): EventEmitter

        RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter
        RoleAdminChanged(options?: EventOptions, cb?: Callback<RoleAdminChanged>): EventEmitter

        RoleGranted(cb?: Callback<RoleGranted>): EventEmitter
        RoleGranted(options?: EventOptions, cb?: Callback<RoleGranted>): EventEmitter

        RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter
        RoleRevoked(options?: EventOptions, cb?: Callback<RoleRevoked>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        WithdrawalClaimed(cb?: Callback<WithdrawalClaimed>): EventEmitter
        WithdrawalClaimed(options?: EventOptions, cb?: Callback<WithdrawalClaimed>): EventEmitter

        WithdrawalRequested(cb?: Callback<WithdrawalRequested>): EventEmitter
        WithdrawalRequested(options?: EventOptions, cb?: Callback<WithdrawalRequested>): EventEmitter

        WithdrawalsFinalized(cb?: Callback<WithdrawalsFinalized>): EventEmitter
        WithdrawalsFinalized(options?: EventOptions, cb?: Callback<WithdrawalsFinalized>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'ApprovalForAll', cb: Callback<ApprovalForAll>): void
    once(event: 'ApprovalForAll', options: EventOptions, cb: Callback<ApprovalForAll>): void

    once(event: 'BaseURISet', cb: Callback<BaseURISet>): void
    once(event: 'BaseURISet', options: EventOptions, cb: Callback<BaseURISet>): void

    once(event: 'BatchMetadataUpdate', cb: Callback<BatchMetadataUpdate>): void
    once(event: 'BatchMetadataUpdate', options: EventOptions, cb: Callback<BatchMetadataUpdate>): void

    once(event: 'BunkerModeDisabled', cb: Callback<BunkerModeDisabled>): void
    once(event: 'BunkerModeDisabled', options: EventOptions, cb: Callback<BunkerModeDisabled>): void

    once(event: 'BunkerModeEnabled', cb: Callback<BunkerModeEnabled>): void
    once(event: 'BunkerModeEnabled', options: EventOptions, cb: Callback<BunkerModeEnabled>): void

    once(event: 'ContractVersionSet', cb: Callback<ContractVersionSet>): void
    once(event: 'ContractVersionSet', options: EventOptions, cb: Callback<ContractVersionSet>): void

    once(event: 'InitializedV1', cb: Callback<InitializedV1>): void
    once(event: 'InitializedV1', options: EventOptions, cb: Callback<InitializedV1>): void

    once(event: 'MetadataUpdate', cb: Callback<MetadataUpdate>): void
    once(event: 'MetadataUpdate', options: EventOptions, cb: Callback<MetadataUpdate>): void

    once(event: 'NftDescriptorAddressSet', cb: Callback<NftDescriptorAddressSet>): void
    once(event: 'NftDescriptorAddressSet', options: EventOptions, cb: Callback<NftDescriptorAddressSet>): void

    once(event: 'Paused', cb: Callback<Paused>): void
    once(event: 'Paused', options: EventOptions, cb: Callback<Paused>): void

    once(event: 'Resumed', cb: Callback<Resumed>): void
    once(event: 'Resumed', options: EventOptions, cb: Callback<Resumed>): void

    once(event: 'RoleAdminChanged', cb: Callback<RoleAdminChanged>): void
    once(event: 'RoleAdminChanged', options: EventOptions, cb: Callback<RoleAdminChanged>): void

    once(event: 'RoleGranted', cb: Callback<RoleGranted>): void
    once(event: 'RoleGranted', options: EventOptions, cb: Callback<RoleGranted>): void

    once(event: 'RoleRevoked', cb: Callback<RoleRevoked>): void
    once(event: 'RoleRevoked', options: EventOptions, cb: Callback<RoleRevoked>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void

    once(event: 'WithdrawalClaimed', cb: Callback<WithdrawalClaimed>): void
    once(event: 'WithdrawalClaimed', options: EventOptions, cb: Callback<WithdrawalClaimed>): void

    once(event: 'WithdrawalRequested', cb: Callback<WithdrawalRequested>): void
    once(event: 'WithdrawalRequested', options: EventOptions, cb: Callback<WithdrawalRequested>): void

    once(event: 'WithdrawalsFinalized', cb: Callback<WithdrawalsFinalized>): void
    once(event: 'WithdrawalsFinalized', options: EventOptions, cb: Callback<WithdrawalsFinalized>): void
}
