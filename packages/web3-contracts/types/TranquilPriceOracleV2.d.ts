/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>

export interface TranquilPriceOracleV2 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): TranquilPriceOracleV2
    clone(): TranquilPriceOracleV2
    methods: {
        WONE_ADDRESS(): NonPayableTransactionObject<string>

        chainlinkOracle(): NonPayableTransactionObject<string>

        fallbackOracle(): NonPayableTransactionObject<string>

        isPriceOracle(): NonPayableTransactionObject<boolean>

        owner(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        specialTokenOracles(arg0: string): NonPayableTransactionObject<string>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        uniswapOracle(): NonPayableTransactionObject<string>

        setSpecialTokenOracle(_token: string, _specialTokenOracle: string): NonPayableTransactionObject<void>

        setChainlinkOracle(_chainlinkOracle: string): NonPayableTransactionObject<void>

        setUniswapOracle(_uniswapOracle: string): NonPayableTransactionObject<void>

        setFallbackOracle(_fallbackOracle: string): NonPayableTransactionObject<void>

        getUnderlyingPrice(tqToken: string): NonPayableTransactionObject<string>

        getPrice(token: string): NonPayableTransactionObject<string>
    }
    events: {
        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void
}
