/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type FeedSet = ContractEventLog<{
    feed: string
    symbol: string
    0: string
    1: string
}>
export type NewAdmin = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type PricePosted = ContractEventLog<{
    asset: string
    previousPriceMantissa: string
    requestedPriceMantissa: string
    newPriceMantissa: string
    0: string
    1: string
    2: string
    3: string
}>

export interface VenusOracle extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): VenusOracle
    clone(): VenusOracle
    methods: {
        VAI_VALUE(): NonPayableTransactionObject<string>

        admin(): NonPayableTransactionObject<string>

        assetPrices(asset: string): NonPayableTransactionObject<string>

        getFeed(symbol: string): NonPayableTransactionObject<string>

        getUnderlyingPrice(vToken: string): NonPayableTransactionObject<string>

        isPriceOracle(): NonPayableTransactionObject<boolean>

        setAdmin(newAdmin: string): NonPayableTransactionObject<void>

        setDirectPrice(asset: string, price: number | string | BN): NonPayableTransactionObject<void>

        setFeed(symbol: string, feed: string): NonPayableTransactionObject<void>

        setUnderlyingPrice(
            vToken: string,
            underlyingPriceMantissa: number | string | BN,
        ): NonPayableTransactionObject<void>
    }
    events: {
        FeedSet(cb?: Callback<FeedSet>): EventEmitter
        FeedSet(options?: EventOptions, cb?: Callback<FeedSet>): EventEmitter

        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        PricePosted(cb?: Callback<PricePosted>): EventEmitter
        PricePosted(options?: EventOptions, cb?: Callback<PricePosted>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'FeedSet', cb: Callback<FeedSet>): void
    once(event: 'FeedSet', options: EventOptions, cb: Callback<FeedSet>): void

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'PricePosted', cb: Callback<PricePosted>): void
    once(event: 'PricePosted', options: EventOptions, cb: Callback<PricePosted>): void
}
