/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type NewAdmin = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type NewPendingAdmin = ContractEventLog<{
    oldPendingAdmin: string
    newPendingAdmin: string
    0: string
    1: string
}>
export type VestedTokensClaimed = ContractEventLog<{
    recipient: string
    amountClaimed: string
    0: string
    1: string
}>
export type XVSVested = ContractEventLog<{
    recipient: string
    amount: string
    withdrawnAmount: string
    vestingStartBlock: string
    0: string
    1: string
    2: string
    3: string
}>
export type XVSWithdrawn = ContractEventLog<{
    recipient: string
    amount: string
    0: string
    1: string
}>
export type vrtConversionAddressSet = ContractEventLog<{
    vrtConversionAddress: string
    0: string
}>

export interface XvsVesting extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): XvsVesting
    clone(): XvsVesting
    methods: {
        VESTING_PERIOD(): NonPayableTransactionObject<string>

        _acceptAdmin(): NonPayableTransactionObject<void>

        _setPendingAdmin(newPendingAdmin: string): NonPayableTransactionObject<void>

        _setVrtConversion(_vrtConversionAddress: string): NonPayableTransactionObject<void>

        admin(): NonPayableTransactionObject<string>

        deposit(recipient: string, amount: number | string | BN): NonPayableTransactionObject<void>

        getBlockNumber(): NonPayableTransactionObject<string>

        pendingAdmin(): NonPayableTransactionObject<string>

        vestingDuration(): NonPayableTransactionObject<string>

        vestingFrequency(): NonPayableTransactionObject<string>

        vestings(arg0: string): NonPayableTransactionObject<{
            recipient: string
            vestingStartBlock: string
            totalVestedAmount: string
            withdrawnAmount: string
            0: string
            1: string
            2: string
            3: string
        }>

        vrtConversionAddress(): NonPayableTransactionObject<string>

        withdraw(recipient: string): NonPayableTransactionObject<void>

        xvs(): NonPayableTransactionObject<string>

        xvsDecimalsMultiplier(): NonPayableTransactionObject<string>
    }
    events: {
        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter
        NewPendingAdmin(options?: EventOptions, cb?: Callback<NewPendingAdmin>): EventEmitter

        VestedTokensClaimed(cb?: Callback<VestedTokensClaimed>): EventEmitter
        VestedTokensClaimed(options?: EventOptions, cb?: Callback<VestedTokensClaimed>): EventEmitter

        XVSVested(cb?: Callback<XVSVested>): EventEmitter
        XVSVested(options?: EventOptions, cb?: Callback<XVSVested>): EventEmitter

        XVSWithdrawn(cb?: Callback<XVSWithdrawn>): EventEmitter
        XVSWithdrawn(options?: EventOptions, cb?: Callback<XVSWithdrawn>): EventEmitter

        vrtConversionAddressSet(cb?: Callback<vrtConversionAddressSet>): EventEmitter
        vrtConversionAddressSet(options?: EventOptions, cb?: Callback<vrtConversionAddressSet>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'NewPendingAdmin', cb: Callback<NewPendingAdmin>): void
    once(event: 'NewPendingAdmin', options: EventOptions, cb: Callback<NewPendingAdmin>): void

    once(event: 'VestedTokensClaimed', cb: Callback<VestedTokensClaimed>): void
    once(event: 'VestedTokensClaimed', options: EventOptions, cb: Callback<VestedTokensClaimed>): void

    once(event: 'XVSVested', cb: Callback<XVSVested>): void
    once(event: 'XVSVested', options: EventOptions, cb: Callback<XVSVested>): void

    once(event: 'XVSWithdrawn', cb: Callback<XVSWithdrawn>): void
    once(event: 'XVSWithdrawn', options: EventOptions, cb: Callback<XVSWithdrawn>): void

    once(event: 'vrtConversionAddressSet', cb: Callback<vrtConversionAddressSet>): void
    once(event: 'vrtConversionAddressSet', options: EventOptions, cb: Callback<vrtConversionAddressSet>): void
}
