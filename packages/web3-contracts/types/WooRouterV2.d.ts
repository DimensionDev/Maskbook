/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type WooPoolChanged = ContractEventLog<{
    newPool: string
    0: string
}>
export type WooRouterSwap = ContractEventLog<{
    swapType: string
    fromToken: string
    toToken: string
    fromAmount: string
    toAmount: string
    from: string
    to: string
    rebateTo: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
}>

export interface WooRouterV2 extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): WooRouterV2
    clone(): WooRouterV2
    methods: {
        WETH(): NonPayableTransactionObject<string>

        externalSwap(
            approveTarget: string,
            swapTarget: string,
            fromToken: string,
            toToken: string,
            fromAmount: number | string | BN,
            minToAmount: number | string | BN,
            to: string,
            data: string | number[],
        ): PayableTransactionObject<string>

        isWhitelisted(arg0: string): NonPayableTransactionObject<boolean>

        owner(): NonPayableTransactionObject<string>

        querySellBase(baseToken: string, baseAmount: number | string | BN): NonPayableTransactionObject<string>

        querySellQuote(baseToken: string, quoteAmount: number | string | BN): NonPayableTransactionObject<string>

        querySwap(
            fromToken: string,
            toToken: string,
            fromAmount: number | string | BN,
        ): NonPayableTransactionObject<string>

        quoteToken(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        rescueFunds(token: string, amount: number | string | BN): NonPayableTransactionObject<void>

        rescueNativeFunds(): NonPayableTransactionObject<void>

        sellBase(
            baseToken: string,
            baseAmount: number | string | BN,
            minQuoteAmount: number | string | BN,
            to: string,
            rebateTo: string,
        ): NonPayableTransactionObject<string>

        sellQuote(
            baseToken: string,
            quoteAmount: number | string | BN,
            minBaseAmount: number | string | BN,
            to: string,
            rebateTo: string,
        ): NonPayableTransactionObject<string>

        setPool(newPool: string): NonPayableTransactionObject<void>

        setWhitelisted(target: string, whitelisted: boolean): NonPayableTransactionObject<void>

        swap(
            fromToken: string,
            toToken: string,
            fromAmount: number | string | BN,
            minToAmount: number | string | BN,
            to: string,
            rebateTo: string,
        ): PayableTransactionObject<string>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        wooPool(): NonPayableTransactionObject<string>
    }
    events: {
        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        WooPoolChanged(cb?: Callback<WooPoolChanged>): EventEmitter
        WooPoolChanged(options?: EventOptions, cb?: Callback<WooPoolChanged>): EventEmitter

        WooRouterSwap(cb?: Callback<WooRouterSwap>): EventEmitter
        WooRouterSwap(options?: EventOptions, cb?: Callback<WooRouterSwap>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'WooPoolChanged', cb: Callback<WooPoolChanged>): void
    once(event: 'WooPoolChanged', options: EventOptions, cb: Callback<WooPoolChanged>): void

    once(event: 'WooRouterSwap', cb: Callback<WooRouterSwap>): void
    once(event: 'WooRouterSwap', options: EventOptions, cb: Callback<WooRouterSwap>): void
}
