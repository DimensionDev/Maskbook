/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AnnounceWinner = ContractEventLog<{
    isShortLastRoundWinner: boolean
    initialPrice: string
    endPrice: string
    0: boolean
    1: string
    2: string
}>
export type Deposit = ContractEventLog<{
    shortPrincipalAmount: string
    longPrincipalAmount: string
    0: string
    1: string
}>
export type SponsorDeposit = ContractEventLog<{
    principalAmount: string
    0: string
}>
export type SponsorWithdraw = ContractEventLog<{
    sponsorTokenAmount: string
    0: string
}>
export type UpdateTokenValue = ContractEventLog<{
    valuePerShortToken: string
    valuePerLongToken: string
    0: string
    1: string
}>
export type Withdraw = ContractEventLog<{
    isAToken: boolean
    shortTokenAmount: string
    longTokenAmount: string
    0: boolean
    1: string
    2: string
}>

export interface LosslessV2Pool extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): LosslessV2Pool
    clone(): LosslessV2Pool
    methods: {
        PRECISION(): NonPayableTransactionObject<string>

        aToken(): NonPayableTransactionObject<string>

        addressProvider(): NonPayableTransactionObject<string>

        bidToken(): NonPayableTransactionObject<string>

        checkUpkeep(checkData: string | number[]): NonPayableTransactionObject<{
            upkeepNeeded: boolean
            performData: string
            0: boolean
            1: string
        }>

        deposit(
            shortPrincipalAmount: number | string | BN,
            longPrincipalAmount: number | string | BN,
        ): NonPayableTransactionObject<void>

        endGame(): NonPayableTransactionObject<void>

        factory(): NonPayableTransactionObject<string>

        inPoolTimestamp(arg0: string): NonPayableTransactionObject<string>

        initialize(shortToken_: string, longToken_: string, sponsorToken_: string): NonPayableTransactionObject<void>

        performUpkeep(performData: string | number[]): NonPayableTransactionObject<void>

        poolTermination(): NonPayableTransactionObject<void>

        poolTokensInfo(): NonPayableTransactionObject<{
            longToken: string
            shortToken: string
            sponsorToken: string
            0: string
            1: string
            2: string
        }>

        principalToken(): NonPayableTransactionObject<string>

        sponsorDeposit(principalAmount: number | string | BN): NonPayableTransactionObject<void>

        sponsorWithdraw(sponsorTokenAmount: number | string | BN): NonPayableTransactionObject<void>

        startFirstRound(): NonPayableTransactionObject<void>

        startGame(): NonPayableTransactionObject<void>

        status(): NonPayableTransactionObject<{
            isShortLastRoundWinner: boolean
            isFirstUser: boolean
            isFirstRound: boolean
            gameRound: string
            durationOfGame: string
            durationOfBidding: string
            lastUpdateTimestamp: string
            initialPrice: string
            endPrice: string
            currState: string
            0: boolean
            1: boolean
            2: boolean
            3: string
            4: string
            5: string
            6: string
            7: string
            8: string
            9: string
        }>

        swap(fromLongToShort: boolean, swapTokenAmount: number | string | BN): NonPayableTransactionObject<void>

        userLongPrincipalBalance(userAddress: string): NonPayableTransactionObject<string>

        userShortPrincipalBalance(userAddress: string): NonPayableTransactionObject<string>

        valuePerLongToken(): NonPayableTransactionObject<string>

        valuePerShortToken(): NonPayableTransactionObject<string>

        valuePerSponsorToken(): NonPayableTransactionObject<string>

        withdraw(
            isAToken: boolean,
            shortTokenAmount: number | string | BN,
            longTokenAmount: number | string | BN,
        ): NonPayableTransactionObject<void>
    }
    events: {
        AnnounceWinner(cb?: Callback<AnnounceWinner>): EventEmitter
        AnnounceWinner(options?: EventOptions, cb?: Callback<AnnounceWinner>): EventEmitter

        Deposit(cb?: Callback<Deposit>): EventEmitter
        Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

        SponsorDeposit(cb?: Callback<SponsorDeposit>): EventEmitter
        SponsorDeposit(options?: EventOptions, cb?: Callback<SponsorDeposit>): EventEmitter

        SponsorWithdraw(cb?: Callback<SponsorWithdraw>): EventEmitter
        SponsorWithdraw(options?: EventOptions, cb?: Callback<SponsorWithdraw>): EventEmitter

        UpdateTokenValue(cb?: Callback<UpdateTokenValue>): EventEmitter
        UpdateTokenValue(options?: EventOptions, cb?: Callback<UpdateTokenValue>): EventEmitter

        Withdraw(cb?: Callback<Withdraw>): EventEmitter
        Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AnnounceWinner', cb: Callback<AnnounceWinner>): void
    once(event: 'AnnounceWinner', options: EventOptions, cb: Callback<AnnounceWinner>): void

    once(event: 'Deposit', cb: Callback<Deposit>): void
    once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

    once(event: 'SponsorDeposit', cb: Callback<SponsorDeposit>): void
    once(event: 'SponsorDeposit', options: EventOptions, cb: Callback<SponsorDeposit>): void

    once(event: 'SponsorWithdraw', cb: Callback<SponsorWithdraw>): void
    once(event: 'SponsorWithdraw', options: EventOptions, cb: Callback<SponsorWithdraw>): void

    once(event: 'UpdateTokenValue', cb: Callback<UpdateTokenValue>): void
    once(event: 'UpdateTokenValue', options: EventOptions, cb: Callback<UpdateTokenValue>): void

    once(event: 'Withdraw', cb: Callback<Withdraw>): void
    once(event: 'Withdraw', options: EventOptions, cb: Callback<Withdraw>): void
}
