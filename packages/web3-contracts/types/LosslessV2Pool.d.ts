/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface LosslessV2PoolInterface extends ethers.utils.Interface {
    functions: {
        'PRECISION()': FunctionFragment
        'aToken()': FunctionFragment
        'addressProvider()': FunctionFragment
        'bidToken()': FunctionFragment
        'checkUpkeep(bytes)': FunctionFragment
        'deposit(uint256,uint256)': FunctionFragment
        'endGame()': FunctionFragment
        'factory()': FunctionFragment
        'initialize(address,address,address)': FunctionFragment
        'performUpkeep(bytes)': FunctionFragment
        'poolTermination()': FunctionFragment
        'poolTokensInfo()': FunctionFragment
        'principalToken()': FunctionFragment
        'sponsorDeposit(uint256)': FunctionFragment
        'sponsorWithdraw(uint256)': FunctionFragment
        'startFirstRound()': FunctionFragment
        'startGame()': FunctionFragment
        'status()': FunctionFragment
        'swap(bool,uint256)': FunctionFragment
        'userLongPrincipalBalance(address)': FunctionFragment
        'userShortPrincipalBalance(address)': FunctionFragment
        'valuePerLongToken()': FunctionFragment
        'valuePerShortToken()': FunctionFragment
        'valuePerSponsorToken()': FunctionFragment
        'withdraw(bool,uint256,uint256)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string
    encodeFunctionData(functionFragment: 'aToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'addressProvider', values?: undefined): string
    encodeFunctionData(functionFragment: 'bidToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'checkUpkeep', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'endGame', values?: undefined): string
    encodeFunctionData(functionFragment: 'factory', values?: undefined): string
    encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string
    encodeFunctionData(functionFragment: 'performUpkeep', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'poolTermination', values?: undefined): string
    encodeFunctionData(functionFragment: 'poolTokensInfo', values?: undefined): string
    encodeFunctionData(functionFragment: 'principalToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'sponsorDeposit', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'sponsorWithdraw', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'startFirstRound', values?: undefined): string
    encodeFunctionData(functionFragment: 'startGame', values?: undefined): string
    encodeFunctionData(functionFragment: 'status', values?: undefined): string
    encodeFunctionData(functionFragment: 'swap', values: [boolean, BigNumberish]): string
    encodeFunctionData(functionFragment: 'userLongPrincipalBalance', values: [string]): string
    encodeFunctionData(functionFragment: 'userShortPrincipalBalance', values: [string]): string
    encodeFunctionData(functionFragment: 'valuePerLongToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'valuePerShortToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'valuePerSponsorToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'withdraw', values: [boolean, BigNumberish, BigNumberish]): string

    decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'aToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addressProvider', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'bidToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'checkUpkeep', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'endGame', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'performUpkeep', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'poolTermination', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'poolTokensInfo', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'principalToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sponsorDeposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sponsorWithdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'startFirstRound', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'startGame', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'userLongPrincipalBalance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'userShortPrincipalBalance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'valuePerLongToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'valuePerShortToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'valuePerSponsorToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

    events: {
        'AnnounceWinner(bool,int256,int256)': EventFragment
        'Deposit(uint256,uint256)': EventFragment
        'SponsorDeposit(uint256)': EventFragment
        'SponsorWithdraw(uint256)': EventFragment
        'UpdateTokenValue(uint256,uint256)': EventFragment
        'Withdraw(bool,uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AnnounceWinner'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SponsorDeposit'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SponsorWithdraw'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UpdateTokenValue'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export class LosslessV2Pool extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this

    listeners(eventName?: string): Array<Listener>
    off(eventName: string, listener: Listener): this
    on(eventName: string, listener: Listener): this
    once(eventName: string, listener: Listener): this
    removeListener(eventName: string, listener: Listener): this
    removeAllListeners(eventName?: string): this

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

    interface: LosslessV2PoolInterface

    functions: {
        PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>

        aToken(overrides?: CallOverrides): Promise<[string]>

        addressProvider(overrides?: CallOverrides): Promise<[string]>

        bidToken(overrides?: CallOverrides): Promise<[string]>

        checkUpkeep(
            checkData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        deposit(
            shortPrincipalAmount: BigNumberish,
            longPrincipalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        endGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        factory(overrides?: CallOverrides): Promise<[string]>

        initialize(
            shortToken_: string,
            longToken_: string,
            sponsorToken_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        performUpkeep(
            performData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        poolTermination(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        poolTokensInfo(overrides?: CallOverrides): Promise<
            [string, string, string] & {
                longToken: string
                shortToken: string
                sponsorToken: string
            }
        >

        principalToken(overrides?: CallOverrides): Promise<[string]>

        sponsorDeposit(
            principalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        sponsorWithdraw(
            sponsorTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        startFirstRound(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        startGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        status(overrides?: CallOverrides): Promise<
            [boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
                isShortLastRoundWinner: boolean
                isFirstUser: boolean
                isFirstRound: boolean
                gameRound: BigNumber
                durationOfGame: BigNumber
                durationOfBidding: BigNumber
                lastUpdateTimestamp: BigNumber
                initialPrice: BigNumber
                endPrice: BigNumber
                currState: number
            }
        >

        swap(
            fromLongToShort: boolean,
            swapTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>

        userLongPrincipalBalance(
            userAddress: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { userLongAmount: BigNumber }>

        userShortPrincipalBalance(
            userAddress: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { userShortAmount: BigNumber }>

        valuePerLongToken(overrides?: CallOverrides): Promise<[BigNumber]>

        valuePerShortToken(overrides?: CallOverrides): Promise<[BigNumber]>

        valuePerSponsorToken(overrides?: CallOverrides): Promise<[BigNumber]>

        withdraw(
            isAToken: boolean,
            shortTokenAmount: BigNumberish,
            longTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>
    }

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>

    aToken(overrides?: CallOverrides): Promise<string>

    addressProvider(overrides?: CallOverrides): Promise<string>

    bidToken(overrides?: CallOverrides): Promise<string>

    checkUpkeep(
        checkData: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    deposit(
        shortPrincipalAmount: BigNumberish,
        longPrincipalAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    endGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    factory(overrides?: CallOverrides): Promise<string>

    initialize(
        shortToken_: string,
        longToken_: string,
        sponsorToken_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    performUpkeep(
        performData: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    poolTermination(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    poolTokensInfo(overrides?: CallOverrides): Promise<
        [string, string, string] & {
            longToken: string
            shortToken: string
            sponsorToken: string
        }
    >

    principalToken(overrides?: CallOverrides): Promise<string>

    sponsorDeposit(
        principalAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    sponsorWithdraw(
        sponsorTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    startFirstRound(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    startGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    status(overrides?: CallOverrides): Promise<
        [boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            isShortLastRoundWinner: boolean
            isFirstUser: boolean
            isFirstRound: boolean
            gameRound: BigNumber
            durationOfGame: BigNumber
            durationOfBidding: BigNumber
            lastUpdateTimestamp: BigNumber
            initialPrice: BigNumber
            endPrice: BigNumber
            currState: number
        }
    >

    swap(
        fromLongToShort: boolean,
        swapTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    userLongPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    userShortPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    valuePerLongToken(overrides?: CallOverrides): Promise<BigNumber>

    valuePerShortToken(overrides?: CallOverrides): Promise<BigNumber>

    valuePerSponsorToken(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
        isAToken: boolean,
        shortTokenAmount: BigNumberish,
        longTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    callStatic: {
        PRECISION(overrides?: CallOverrides): Promise<BigNumber>

        aToken(overrides?: CallOverrides): Promise<string>

        addressProvider(overrides?: CallOverrides): Promise<string>

        bidToken(overrides?: CallOverrides): Promise<string>

        checkUpkeep(
            checkData: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[boolean, string] & { upkeepNeeded: boolean; performData: string }>

        deposit(
            shortPrincipalAmount: BigNumberish,
            longPrincipalAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>

        endGame(overrides?: CallOverrides): Promise<void>

        factory(overrides?: CallOverrides): Promise<string>

        initialize(
            shortToken_: string,
            longToken_: string,
            sponsorToken_: string,
            overrides?: CallOverrides,
        ): Promise<void>

        performUpkeep(performData: BytesLike, overrides?: CallOverrides): Promise<void>

        poolTermination(overrides?: CallOverrides): Promise<void>

        poolTokensInfo(overrides?: CallOverrides): Promise<
            [string, string, string] & {
                longToken: string
                shortToken: string
                sponsorToken: string
            }
        >

        principalToken(overrides?: CallOverrides): Promise<string>

        sponsorDeposit(principalAmount: BigNumberish, overrides?: CallOverrides): Promise<void>

        sponsorWithdraw(sponsorTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>

        startFirstRound(overrides?: CallOverrides): Promise<void>

        startGame(overrides?: CallOverrides): Promise<void>

        status(overrides?: CallOverrides): Promise<
            [boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
                isShortLastRoundWinner: boolean
                isFirstUser: boolean
                isFirstRound: boolean
                gameRound: BigNumber
                durationOfGame: BigNumber
                durationOfBidding: BigNumber
                lastUpdateTimestamp: BigNumber
                initialPrice: BigNumber
                endPrice: BigNumber
                currState: number
            }
        >

        swap(fromLongToShort: boolean, swapTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>

        userLongPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

        userShortPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

        valuePerLongToken(overrides?: CallOverrides): Promise<BigNumber>

        valuePerShortToken(overrides?: CallOverrides): Promise<BigNumber>

        valuePerSponsorToken(overrides?: CallOverrides): Promise<BigNumber>

        withdraw(
            isAToken: boolean,
            shortTokenAmount: BigNumberish,
            longTokenAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>
    }

    filters: {
        AnnounceWinner(
            isShortLastRoundWinner?: null,
            initialPrice?: null,
            endPrice?: null,
        ): TypedEventFilter<
            [boolean, BigNumber, BigNumber],
            {
                isShortLastRoundWinner: boolean
                initialPrice: BigNumber
                endPrice: BigNumber
            }
        >

        Deposit(
            shortPrincipalAmount?: null,
            longPrincipalAmount?: null,
        ): TypedEventFilter<[BigNumber, BigNumber], { shortPrincipalAmount: BigNumber; longPrincipalAmount: BigNumber }>

        SponsorDeposit(principalAmount?: null): TypedEventFilter<[BigNumber], { principalAmount: BigNumber }>

        SponsorWithdraw(sponsorTokenAmount?: null): TypedEventFilter<[BigNumber], { sponsorTokenAmount: BigNumber }>

        UpdateTokenValue(
            valuePerShortToken?: null,
            valuePerLongToken?: null,
        ): TypedEventFilter<[BigNumber, BigNumber], { valuePerShortToken: BigNumber; valuePerLongToken: BigNumber }>

        Withdraw(
            isAToken?: null,
            shortTokenAmount?: null,
            longTokenAmount?: null,
        ): TypedEventFilter<
            [boolean, BigNumber, BigNumber],
            {
                isAToken: boolean
                shortTokenAmount: BigNumber
                longTokenAmount: BigNumber
            }
        >
    }

    estimateGas: {
        PRECISION(overrides?: CallOverrides): Promise<BigNumber>

        aToken(overrides?: CallOverrides): Promise<BigNumber>

        addressProvider(overrides?: CallOverrides): Promise<BigNumber>

        bidToken(overrides?: CallOverrides): Promise<BigNumber>

        checkUpkeep(
            checkData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        deposit(
            shortPrincipalAmount: BigNumberish,
            longPrincipalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        endGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        factory(overrides?: CallOverrides): Promise<BigNumber>

        initialize(
            shortToken_: string,
            longToken_: string,
            sponsorToken_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        performUpkeep(
            performData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        poolTermination(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        poolTokensInfo(overrides?: CallOverrides): Promise<BigNumber>

        principalToken(overrides?: CallOverrides): Promise<BigNumber>

        sponsorDeposit(
            principalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        sponsorWithdraw(
            sponsorTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        startFirstRound(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        startGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        status(overrides?: CallOverrides): Promise<BigNumber>

        swap(
            fromLongToShort: boolean,
            swapTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>

        userLongPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

        userShortPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>

        valuePerLongToken(overrides?: CallOverrides): Promise<BigNumber>

        valuePerShortToken(overrides?: CallOverrides): Promise<BigNumber>

        valuePerSponsorToken(overrides?: CallOverrides): Promise<BigNumber>

        withdraw(
            isAToken: boolean,
            shortTokenAmount: BigNumberish,
            longTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>
    }

    populateTransaction: {
        PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>

        aToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>

        bidToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        checkUpkeep(
            checkData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        deposit(
            shortPrincipalAmount: BigNumberish,
            longPrincipalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        endGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

        initialize(
            shortToken_: string,
            longToken_: string,
            sponsorToken_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        performUpkeep(
            performData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        poolTermination(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        poolTokensInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>

        principalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        sponsorDeposit(
            principalAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        sponsorWithdraw(
            sponsorTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        startFirstRound(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        startGame(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        status(overrides?: CallOverrides): Promise<PopulatedTransaction>

        swap(
            fromLongToShort: boolean,
            swapTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>

        userLongPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        userShortPrincipalBalance(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        valuePerLongToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        valuePerShortToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        valuePerSponsorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdraw(
            isAToken: boolean,
            shortTokenAmount: BigNumberish,
            longTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>
    }
}
