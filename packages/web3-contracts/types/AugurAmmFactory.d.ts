/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type LiquidityChanged = ContractEventLog<{
    marketFactory: string
    marketId: string
    user: string
    recipient: string
    collateral: string
    lpTokens: string
    sharesReturned: string[]
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string[]
}>
export type PoolCreated = ContractEventLog<{
    pool: string
    marketFactory: string
    marketId: string
    creator: string
    lpTokenRecipient: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type SharesSwapped = ContractEventLog<{
    marketFactory: string
    marketId: string
    user: string
    outcome: string
    collateral: string
    shares: string
    price: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
}>

export interface AugurAmmFactory extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AugurAmmFactory
    clone(): AugurAmmFactory
    methods: {
        BONE(): NonPayableTransactionObject<string>

        BPOW_PRECISION(): NonPayableTransactionObject<string>

        EXIT_FEE(): NonPayableTransactionObject<string>

        INIT_POOL_SUPPLY(): NonPayableTransactionObject<string>

        MAX_BOUND_TOKENS(): NonPayableTransactionObject<string>

        MAX_BPOW_BASE(): NonPayableTransactionObject<string>

        MAX_FEE(): NonPayableTransactionObject<string>

        MAX_IN_RATIO(): NonPayableTransactionObject<string>

        MAX_OUT_RATIO(): NonPayableTransactionObject<string>

        MAX_TOTAL_WEIGHT(): NonPayableTransactionObject<string>

        MAX_WEIGHT(): NonPayableTransactionObject<string>

        MIN_BALANCE(): NonPayableTransactionObject<string>

        MIN_BOUND_TOKENS(): NonPayableTransactionObject<string>

        MIN_BPOW_BASE(): NonPayableTransactionObject<string>

        MIN_FEE(): NonPayableTransactionObject<string>

        MIN_WEIGHT(): NonPayableTransactionObject<string>

        addLiquidity(
            _marketFactory: string,
            _marketId: number | string | BN,
            _collateralIn: number | string | BN,
            _minLPTokensOut: number | string | BN,
            _lpTokenRecipient: string,
        ): NonPayableTransactionObject<{
            _poolAmountOut: string
            _balances: string[]
            0: string
            1: string[]
        }>

        bFactory(): NonPayableTransactionObject<string>

        buy(
            _marketFactory: string,
            _marketId: number | string | BN,
            _outcome: number | string | BN,
            _collateralIn: number | string | BN,
            _minTokensOut: number | string | BN,
        ): NonPayableTransactionObject<string>

        createPool(
            _marketFactory: string,
            _marketId: number | string | BN,
            _initialLiquidity: number | string | BN,
            _lpTokenRecipient: string,
        ): NonPayableTransactionObject<string>

        getColor(): NonPayableTransactionObject<string>

        getPool(_marketFactory: string, _marketId: number | string | BN): NonPayableTransactionObject<string>

        getPoolBalances(_marketFactory: string, _marketId: number | string | BN): NonPayableTransactionObject<string[]>

        getPoolTokenBalance(
            _marketFactory: string,
            _marketId: number | string | BN,
            whom: string,
        ): NonPayableTransactionObject<string>

        getPoolWeights(_marketFactory: string, _marketId: number | string | BN): NonPayableTransactionObject<string[]>

        getSwapFee(_marketFactory: string, _marketId: number | string | BN): NonPayableTransactionObject<string>

        pools(arg0: string, arg1: number | string | BN): NonPayableTransactionObject<string>

        removeLiquidity(
            _marketFactory: string,
            _marketId: number | string | BN,
            _lpTokensIn: number | string | BN,
            _minCollateralOut: number | string | BN,
            _collateralRecipient: string,
        ): NonPayableTransactionObject<{
            _collateralOut: string
            _balances: string[]
            0: string
            1: string[]
        }>

        sellForCollateral(
            _marketFactory: string,
            _marketId: number | string | BN,
            _outcome: number | string | BN,
            _shareTokensIn: (number | string | BN)[],
            _minSetsOut: number | string | BN,
        ): NonPayableTransactionObject<string>

        tokenRatios(_marketFactory: string, _marketId: number | string | BN): NonPayableTransactionObject<string[]>
    }
    events: {
        LiquidityChanged(cb?: Callback<LiquidityChanged>): EventEmitter
        LiquidityChanged(options?: EventOptions, cb?: Callback<LiquidityChanged>): EventEmitter

        PoolCreated(cb?: Callback<PoolCreated>): EventEmitter
        PoolCreated(options?: EventOptions, cb?: Callback<PoolCreated>): EventEmitter

        SharesSwapped(cb?: Callback<SharesSwapped>): EventEmitter
        SharesSwapped(options?: EventOptions, cb?: Callback<SharesSwapped>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'LiquidityChanged', cb: Callback<LiquidityChanged>): void
    once(event: 'LiquidityChanged', options: EventOptions, cb: Callback<LiquidityChanged>): void

    once(event: 'PoolCreated', cb: Callback<PoolCreated>): void
    once(event: 'PoolCreated', options: EventOptions, cb: Callback<PoolCreated>): void

    once(event: 'SharesSwapped', cb: Callback<SharesSwapped>): void
    once(event: 'SharesSwapped', options: EventOptions, cb: Callback<SharesSwapped>): void
}
