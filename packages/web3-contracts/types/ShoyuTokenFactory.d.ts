/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type DeployNFT1155AndMintBatch = ContractEventLog<{
    proxy: string
    owner: string
    tokenIds: string[]
    amounts: string[]
    royaltyFeeRecipient: string
    royaltyFee: string
    0: string
    1: string
    2: string[]
    3: string[]
    4: string
    5: string
}>
export type DeployNFT721AndMintBatch = ContractEventLog<{
    proxy: string
    owner: string
    name: string
    symbol: string
    tokenIds: string[]
    royaltyFeeRecipient: string
    royaltyFee: string
    0: string
    1: string
    2: string
    3: string
    4: string[]
    5: string
    6: string
}>
export type DeployNFT721AndPark = ContractEventLog<{
    proxy: string
    owner: string
    name: string
    symbol: string
    toTokenId: string
    royaltyFeeRecipient: string
    royaltyFee: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
}>
export type DeploySocialToken = ContractEventLog<{
    proxy: string
    owner: string
    name: string
    symbol: string
    dividendToken: string
    initialSupply: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type SetBaseURI1155 = ContractEventLog<{
    uri: string
    0: string
}>
export type SetBaseURI721 = ContractEventLog<{
    uri: string
    0: string
}>
export type SetDeployerWhitelisted = ContractEventLog<{
    deployer: string
    whitelisted: boolean
    0: string
    1: boolean
}>
export type SetOperationalFee = ContractEventLog<{
    fee: string
    0: string
}>
export type SetOperationalFeeRecipient = ContractEventLog<{
    recipient: string
    0: string
}>
export type SetProtocolFeeRecipient = ContractEventLog<{
    recipient: string
    0: string
}>
export type SetStrategyWhitelisted = ContractEventLog<{
    strategy: string
    whitelisted: boolean
    0: string
    1: boolean
}>
export type UpgradeERC1155Exchange = ContractEventLog<{
    exchange: string
    0: string
}>
export type UpgradeERC721Exchange = ContractEventLog<{
    exchange: string
    0: string
}>
export type UpgradeNFT1155 = ContractEventLog<{
    newTarget: string
    0: string
}>
export type UpgradeNFT721 = ContractEventLog<{
    newTarget: string
    0: string
}>
export type UpgradeSocialToken = ContractEventLog<{
    newTarget: string
    0: string
}>

export interface ShoyuTokenFactory extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ShoyuTokenFactory
    clone(): ShoyuTokenFactory
    methods: {
        DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>

        MAX_OPERATIONAL_FEE(): NonPayableTransactionObject<string>

        MAX_ROYALTY_FEE(): NonPayableTransactionObject<string>

        MINT_BATCH_1155_TYPEHASH(): NonPayableTransactionObject<string>

        MINT_BATCH_721_TYPEHASH(): NonPayableTransactionObject<string>

        MINT_SOCIAL_TOKEN_TYPEHASH(): NonPayableTransactionObject<string>

        PARK_TOKEN_IDS_721_TYPEHASH(): NonPayableTransactionObject<string>

        baseURI1155(): NonPayableTransactionObject<string>

        baseURI721(): NonPayableTransactionObject<string>

        deployNFT1155AndMintBatch(
            owner: string,
            tokenIds: (number | string | BN)[],
            amounts: (number | string | BN)[],
            royaltyFeeRecipient: string,
            royaltyFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        deployNFT721AndMintBatch(
            owner: string,
            name: string,
            symbol: string,
            tokenIds: (number | string | BN)[],
            royaltyFeeRecipient: string,
            royaltyFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        deployNFT721AndPark(
            owner: string,
            name: string,
            symbol: string,
            toTokenId: number | string | BN,
            royaltyFeeRecipient: string,
            royaltyFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        deploySocialToken(
            owner: string,
            name: string,
            symbol: string,
            dividendToken: string,
            initialSupply: number | string | BN,
        ): NonPayableTransactionObject<string>

        erc1155Exchange(): NonPayableTransactionObject<string>

        erc721Exchange(): NonPayableTransactionObject<string>

        isDeployerWhitelisted(arg0: string): NonPayableTransactionObject<boolean>

        isNFT1155(query: string): NonPayableTransactionObject<boolean>

        isNFT721(query: string): NonPayableTransactionObject<boolean>

        isSocialToken(query: string): NonPayableTransactionObject<boolean>

        isStrategyWhitelisted(arg0: string): NonPayableTransactionObject<boolean>

        mintBatch1155(
            nft: string,
            to: string,
            tokenIds: (number | string | BN)[],
            amounts: (number | string | BN)[],
            data: string | number[],
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        mintBatch721(
            nft: string,
            to: string,
            tokenIds: (number | string | BN)[],
            data: string | number[],
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        mintSocialToken(
            token: string,
            to: string,
            amount: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        nonces(arg0: string): NonPayableTransactionObject<string>

        operationalFeeInfo(): NonPayableTransactionObject<{
            recipient: string
            permil: string
            0: string
            1: string
        }>

        owner(): NonPayableTransactionObject<string>

        parkTokenIds721(
            nft: string,
            toTokenId: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        protocolFeeInfo(): NonPayableTransactionObject<{
            recipient: string
            permil: string
            0: string
            1: string
        }>

        renounceOwnership(): NonPayableTransactionObject<void>

        setBaseURI1155(uri: string): NonPayableTransactionObject<void>

        setBaseURI721(uri: string): NonPayableTransactionObject<void>

        setDeployerWhitelisted(deployer: string, whitelisted: boolean): NonPayableTransactionObject<void>

        setOperationalFee(operationalFee: number | string | BN): NonPayableTransactionObject<void>

        setOperationalFeeRecipient(operationalFeeRecipient: string): NonPayableTransactionObject<void>

        setProtocolFeeRecipient(protocolFeeRecipient: string): NonPayableTransactionObject<void>

        setStrategyWhitelisted(strategy: string, whitelisted: boolean): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        upgradeERC1155Exchange(exchange: string): NonPayableTransactionObject<void>

        upgradeERC721Exchange(exchange: string): NonPayableTransactionObject<void>

        upgradeNFT1155(newTarget: string): NonPayableTransactionObject<void>

        upgradeNFT721(newTarget: string): NonPayableTransactionObject<void>

        upgradeSocialToken(newTarget: string): NonPayableTransactionObject<void>
    }
    events: {
        DeployNFT1155AndMintBatch(cb?: Callback<DeployNFT1155AndMintBatch>): EventEmitter
        DeployNFT1155AndMintBatch(options?: EventOptions, cb?: Callback<DeployNFT1155AndMintBatch>): EventEmitter

        DeployNFT721AndMintBatch(cb?: Callback<DeployNFT721AndMintBatch>): EventEmitter
        DeployNFT721AndMintBatch(options?: EventOptions, cb?: Callback<DeployNFT721AndMintBatch>): EventEmitter

        DeployNFT721AndPark(cb?: Callback<DeployNFT721AndPark>): EventEmitter
        DeployNFT721AndPark(options?: EventOptions, cb?: Callback<DeployNFT721AndPark>): EventEmitter

        DeploySocialToken(cb?: Callback<DeploySocialToken>): EventEmitter
        DeploySocialToken(options?: EventOptions, cb?: Callback<DeploySocialToken>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        SetBaseURI1155(cb?: Callback<SetBaseURI1155>): EventEmitter
        SetBaseURI1155(options?: EventOptions, cb?: Callback<SetBaseURI1155>): EventEmitter

        SetBaseURI721(cb?: Callback<SetBaseURI721>): EventEmitter
        SetBaseURI721(options?: EventOptions, cb?: Callback<SetBaseURI721>): EventEmitter

        SetDeployerWhitelisted(cb?: Callback<SetDeployerWhitelisted>): EventEmitter
        SetDeployerWhitelisted(options?: EventOptions, cb?: Callback<SetDeployerWhitelisted>): EventEmitter

        SetOperationalFee(cb?: Callback<SetOperationalFee>): EventEmitter
        SetOperationalFee(options?: EventOptions, cb?: Callback<SetOperationalFee>): EventEmitter

        SetOperationalFeeRecipient(cb?: Callback<SetOperationalFeeRecipient>): EventEmitter
        SetOperationalFeeRecipient(options?: EventOptions, cb?: Callback<SetOperationalFeeRecipient>): EventEmitter

        SetProtocolFeeRecipient(cb?: Callback<SetProtocolFeeRecipient>): EventEmitter
        SetProtocolFeeRecipient(options?: EventOptions, cb?: Callback<SetProtocolFeeRecipient>): EventEmitter

        SetStrategyWhitelisted(cb?: Callback<SetStrategyWhitelisted>): EventEmitter
        SetStrategyWhitelisted(options?: EventOptions, cb?: Callback<SetStrategyWhitelisted>): EventEmitter

        UpgradeERC1155Exchange(cb?: Callback<UpgradeERC1155Exchange>): EventEmitter
        UpgradeERC1155Exchange(options?: EventOptions, cb?: Callback<UpgradeERC1155Exchange>): EventEmitter

        UpgradeERC721Exchange(cb?: Callback<UpgradeERC721Exchange>): EventEmitter
        UpgradeERC721Exchange(options?: EventOptions, cb?: Callback<UpgradeERC721Exchange>): EventEmitter

        UpgradeNFT1155(cb?: Callback<UpgradeNFT1155>): EventEmitter
        UpgradeNFT1155(options?: EventOptions, cb?: Callback<UpgradeNFT1155>): EventEmitter

        UpgradeNFT721(cb?: Callback<UpgradeNFT721>): EventEmitter
        UpgradeNFT721(options?: EventOptions, cb?: Callback<UpgradeNFT721>): EventEmitter

        UpgradeSocialToken(cb?: Callback<UpgradeSocialToken>): EventEmitter
        UpgradeSocialToken(options?: EventOptions, cb?: Callback<UpgradeSocialToken>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'DeployNFT1155AndMintBatch', cb: Callback<DeployNFT1155AndMintBatch>): void
    once(event: 'DeployNFT1155AndMintBatch', options: EventOptions, cb: Callback<DeployNFT1155AndMintBatch>): void

    once(event: 'DeployNFT721AndMintBatch', cb: Callback<DeployNFT721AndMintBatch>): void
    once(event: 'DeployNFT721AndMintBatch', options: EventOptions, cb: Callback<DeployNFT721AndMintBatch>): void

    once(event: 'DeployNFT721AndPark', cb: Callback<DeployNFT721AndPark>): void
    once(event: 'DeployNFT721AndPark', options: EventOptions, cb: Callback<DeployNFT721AndPark>): void

    once(event: 'DeploySocialToken', cb: Callback<DeploySocialToken>): void
    once(event: 'DeploySocialToken', options: EventOptions, cb: Callback<DeploySocialToken>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'SetBaseURI1155', cb: Callback<SetBaseURI1155>): void
    once(event: 'SetBaseURI1155', options: EventOptions, cb: Callback<SetBaseURI1155>): void

    once(event: 'SetBaseURI721', cb: Callback<SetBaseURI721>): void
    once(event: 'SetBaseURI721', options: EventOptions, cb: Callback<SetBaseURI721>): void

    once(event: 'SetDeployerWhitelisted', cb: Callback<SetDeployerWhitelisted>): void
    once(event: 'SetDeployerWhitelisted', options: EventOptions, cb: Callback<SetDeployerWhitelisted>): void

    once(event: 'SetOperationalFee', cb: Callback<SetOperationalFee>): void
    once(event: 'SetOperationalFee', options: EventOptions, cb: Callback<SetOperationalFee>): void

    once(event: 'SetOperationalFeeRecipient', cb: Callback<SetOperationalFeeRecipient>): void
    once(event: 'SetOperationalFeeRecipient', options: EventOptions, cb: Callback<SetOperationalFeeRecipient>): void

    once(event: 'SetProtocolFeeRecipient', cb: Callback<SetProtocolFeeRecipient>): void
    once(event: 'SetProtocolFeeRecipient', options: EventOptions, cb: Callback<SetProtocolFeeRecipient>): void

    once(event: 'SetStrategyWhitelisted', cb: Callback<SetStrategyWhitelisted>): void
    once(event: 'SetStrategyWhitelisted', options: EventOptions, cb: Callback<SetStrategyWhitelisted>): void

    once(event: 'UpgradeERC1155Exchange', cb: Callback<UpgradeERC1155Exchange>): void
    once(event: 'UpgradeERC1155Exchange', options: EventOptions, cb: Callback<UpgradeERC1155Exchange>): void

    once(event: 'UpgradeERC721Exchange', cb: Callback<UpgradeERC721Exchange>): void
    once(event: 'UpgradeERC721Exchange', options: EventOptions, cb: Callback<UpgradeERC721Exchange>): void

    once(event: 'UpgradeNFT1155', cb: Callback<UpgradeNFT1155>): void
    once(event: 'UpgradeNFT1155', options: EventOptions, cb: Callback<UpgradeNFT1155>): void

    once(event: 'UpgradeNFT721', cb: Callback<UpgradeNFT721>): void
    once(event: 'UpgradeNFT721', options: EventOptions, cb: Callback<UpgradeNFT721>): void

    once(event: 'UpgradeSocialToken', cb: Callback<UpgradeSocialToken>): void
    once(event: 'UpgradeSocialToken', options: EventOptions, cb: Callback<UpgradeSocialToken>): void
}
