/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AddCollateral = ContractEventLog<{
    id: string
    amount: string
    healthBefore: string
    healthAfter: string
    0: string
    1: string
    2: string
    3: string
}>
export type AddDebt = ContractEventLog<{
    id: string
    debtShare: string
    0: string
    1: string
}>
export type Approval = ContractEventLog<{
    owner: string
    spender: string
    value: string
    0: string
    1: string
    2: string
}>
export type Kill = ContractEventLog<{
    id: string
    killer: string
    owner: string
    posVal: string
    debt: string
    prize: string
    left: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type RemoveDebt = ContractEventLog<{
    id: string
    debtShare: string
    0: string
    1: string
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    value: string
    0: string
    1: string
    2: string
}>
export type Work = ContractEventLog<{
    id: string
    loan: string
    0: string
    1: string
}>

export interface AlpacaVault extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AlpacaVault
    clone(): AlpacaVault
    methods: {
        POSITION_ID(): NonPayableTransactionObject<string>

        STRATEGY(): NonPayableTransactionObject<string>

        _IN_EXEC_LOCK(): NonPayableTransactionObject<string>

        addCollateral(
            id: number | string | BN,
            amount: number | string | BN,
            goRogue: boolean,
            data: string | number[],
        ): PayableTransactionObject<void>

        allowance(owner: string, spender: string): NonPayableTransactionObject<string>

        approve(spender: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        balanceOf(account: string): NonPayableTransactionObject<string>

        config(): NonPayableTransactionObject<string>

        debtShareToVal(debtShare: number | string | BN): NonPayableTransactionObject<string>

        debtToken(): NonPayableTransactionObject<string>

        debtValToShare(debtVal: number | string | BN): NonPayableTransactionObject<string>

        decimals(): NonPayableTransactionObject<string>

        decreaseAllowance(spender: string, subtractedValue: number | string | BN): NonPayableTransactionObject<boolean>

        deposit(amountToken: number | string | BN): PayableTransactionObject<void>

        fairLaunchPoolId(): NonPayableTransactionObject<string>

        increaseAllowance(spender: string, addedValue: number | string | BN): NonPayableTransactionObject<boolean>

        initialize(
            _config: string,
            _token: string,
            _name: string,
            _symbol: string,
            _decimals: number | string | BN,
            _debtToken: string,
        ): NonPayableTransactionObject<void>

        kill(id: number | string | BN): NonPayableTransactionObject<void>

        lastAccrueTime(): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        nextPositionID(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        pendingInterest(value: number | string | BN): NonPayableTransactionObject<string>

        positionInfo(id: number | string | BN): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        positions(arg0: number | string | BN): NonPayableTransactionObject<{
            worker: string
            owner: string
            debtShare: string
            0: string
            1: string
            2: string
        }>

        reduceReserve(value: number | string | BN): NonPayableTransactionObject<void>

        renounceOwnership(): NonPayableTransactionObject<void>

        requestFunds(targetedToken: string, amount: number | string | BN): NonPayableTransactionObject<void>

        reservePool(): NonPayableTransactionObject<string>

        setFairLaunchPoolId(_poolId: number | string | BN): NonPayableTransactionObject<void>

        symbol(): NonPayableTransactionObject<string>

        token(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        totalToken(): NonPayableTransactionObject<string>

        transfer(recipient: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        transferFrom(
            sender: string,
            recipient: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        updateConfig(_config: string): NonPayableTransactionObject<void>

        vaultDebtShare(): NonPayableTransactionObject<string>

        vaultDebtVal(): NonPayableTransactionObject<string>

        withdraw(share: number | string | BN): NonPayableTransactionObject<void>

        withdrawReserve(to: string, value: number | string | BN): NonPayableTransactionObject<void>

        work(
            id: number | string | BN,
            worker: string,
            principalAmount: number | string | BN,
            borrowAmount: number | string | BN,
            maxReturn: number | string | BN,
            data: string | number[],
        ): PayableTransactionObject<void>
    }
    events: {
        AddCollateral(cb?: Callback<AddCollateral>): EventEmitter
        AddCollateral(options?: EventOptions, cb?: Callback<AddCollateral>): EventEmitter

        AddDebt(cb?: Callback<AddDebt>): EventEmitter
        AddDebt(options?: EventOptions, cb?: Callback<AddDebt>): EventEmitter

        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        Kill(cb?: Callback<Kill>): EventEmitter
        Kill(options?: EventOptions, cb?: Callback<Kill>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        RemoveDebt(cb?: Callback<RemoveDebt>): EventEmitter
        RemoveDebt(options?: EventOptions, cb?: Callback<RemoveDebt>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        Work(cb?: Callback<Work>): EventEmitter
        Work(options?: EventOptions, cb?: Callback<Work>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AddCollateral', cb: Callback<AddCollateral>): void
    once(event: 'AddCollateral', options: EventOptions, cb: Callback<AddCollateral>): void

    once(event: 'AddDebt', cb: Callback<AddDebt>): void
    once(event: 'AddDebt', options: EventOptions, cb: Callback<AddDebt>): void

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'Kill', cb: Callback<Kill>): void
    once(event: 'Kill', options: EventOptions, cb: Callback<Kill>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'RemoveDebt', cb: Callback<RemoveDebt>): void
    once(event: 'RemoveDebt', options: EventOptions, cb: Callback<RemoveDebt>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void

    once(event: 'Work', cb: Callback<Work>): void
    once(event: 'Work', options: EventOptions, cb: Callback<Work>): void
}
