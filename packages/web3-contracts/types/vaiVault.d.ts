/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AdminTransfered = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type Deposit = ContractEventLog<{
    user: string
    amount: string
    0: string
    1: string
}>
export type Withdraw = ContractEventLog<{
    user: string
    amount: string
    0: string
    1: string
}>

export interface VaiVault extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): VaiVault
    clone(): VaiVault
    methods: {
        _become(vaiVaultProxy: string): NonPayableTransactionObject<void>

        accXVSPerShare(): NonPayableTransactionObject<string>

        admin(): NonPayableTransactionObject<string>

        burnAdmin(): NonPayableTransactionObject<void>

        claim(): NonPayableTransactionObject<void>

        deposit(_amount: number | string | BN): NonPayableTransactionObject<void>

        getAdmin(): NonPayableTransactionObject<string>

        pendingAdmin(): NonPayableTransactionObject<string>

        pendingRewards(): NonPayableTransactionObject<string>

        pendingVAIVaultImplementation(): NonPayableTransactionObject<string>

        pendingXVS(_user: string): NonPayableTransactionObject<string>

        setNewAdmin(newAdmin: string): NonPayableTransactionObject<void>

        setVenusInfo(_xvs: string, _vai: string): NonPayableTransactionObject<void>

        updatePendingRewards(): NonPayableTransactionObject<void>

        userInfo(arg0: string): NonPayableTransactionObject<{
            amount: string
            rewardDebt: string
            0: string
            1: string
        }>

        vai(): NonPayableTransactionObject<string>

        vaiVaultImplementation(): NonPayableTransactionObject<string>

        withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>

        xvs(): NonPayableTransactionObject<string>

        xvsBalance(): NonPayableTransactionObject<string>
    }
    events: {
        AdminTransfered(cb?: Callback<AdminTransfered>): EventEmitter
        AdminTransfered(options?: EventOptions, cb?: Callback<AdminTransfered>): EventEmitter

        Deposit(cb?: Callback<Deposit>): EventEmitter
        Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

        Withdraw(cb?: Callback<Withdraw>): EventEmitter
        Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AdminTransfered', cb: Callback<AdminTransfered>): void
    once(event: 'AdminTransfered', options: EventOptions, cb: Callback<AdminTransfered>): void

    once(event: 'Deposit', cb: Callback<Deposit>): void
    once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

    once(event: 'Withdraw', cb: Callback<Withdraw>): void
    once(event: 'Withdraw', options: EventOptions, cb: Callback<Withdraw>): void
}
