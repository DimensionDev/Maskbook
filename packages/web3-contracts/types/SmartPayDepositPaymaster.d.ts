/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>

export interface SmartPayDepositPaymaster extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): SmartPayDepositPaymaster
    clone(): SmartPayDepositPaymaster
    methods: {
        COST_OF_POST(): NonPayableTransactionObject<string>

        PAYTOKEN_TO_ETH_RATIO(): NonPayableTransactionObject<string>

        addDepositFor(account: string, amount: number | string | BN): NonPayableTransactionObject<void>

        addStake(extraUnstakeDelaySec: number | string | BN): PayableTransactionObject<void>

        balances(arg0: string): NonPayableTransactionObject<string>

        deposit(): PayableTransactionObject<void>

        depositInfo(account: string): NonPayableTransactionObject<{
            amount: string
            _unlockBlock: string
            0: string
            1: string
        }>

        entryPoint(): NonPayableTransactionObject<string>

        estimateCost(
            userOp: [
                string,
                number | string | BN,
                string | number[],
                string | number[],
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                string,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<string>

        getDeposit(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        payToken(): NonPayableTransactionObject<string>

        postOp(
            mode: number | string | BN,
            context: string | number[],
            actualGasCost: number | string | BN,
        ): NonPayableTransactionObject<void>

        renounceOwnership(): NonPayableTransactionObject<void>

        setEntryPoint(_entryPoint: string): NonPayableTransactionObject<void>

        setMaskToEthRadio(radio: number | string | BN): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        unlockBlock(arg0: string): NonPayableTransactionObject<string>

        unlockStake(): NonPayableTransactionObject<void>

        validatePaymasterUserOp(
            userOp: [
                string,
                number | string | BN,
                string | number[],
                string | number[],
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                string,
                string | number[],
                string | number[],
            ],
            requestId: string | number[],
            maxCost: number | string | BN,
        ): NonPayableTransactionObject<string>

        withdrawStake(withdrawAddress: string): NonPayableTransactionObject<void>

        withdrawTo(withdrawAddress: string, amount: number | string | BN): NonPayableTransactionObject<void>

        withdrawTokensTo(target: string, amount: number | string | BN): NonPayableTransactionObject<void>
    }
    events: {
        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void
}
