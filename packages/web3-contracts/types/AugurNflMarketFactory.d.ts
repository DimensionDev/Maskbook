/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type LinkNodeChanged = ContractEventLog<{
    newLinkNode: string
    0: string
}>
export type MarketActivated = ContractEventLog<{
    id: string
    0: string
}>
export type MarketCreated = ContractEventLog<{
    id: string
    names: string[]
    initialOdds: string[]
    0: string
    1: string[]
    2: string[]
}>
export type MarketResolved = ContractEventLog<{
    id: string
    winner: string
    winnerIndex: string
    winnerName: string
    0: string
    1: string
    2: string
    3: string
}>
export type SharesBurned = ContractEventLog<{
    id: string
    amount: string
    receiver: string
    0: string
    1: string
    2: string
}>
export type SharesMinted = ContractEventLog<{
    id: string
    amount: string
    receiver: string
    0: string
    1: string
    2: string
}>
export type SportsEventCreated = ContractEventLog<{
    id: string
    markets: string[]
    lines: string[]
    homeTeamId: string
    awayTeamId: string
    homeTeamName: string
    awayTeamName: string
    estimatedStartTime: string
    0: string
    1: string[]
    2: string[]
    3: string
    4: string
    5: string
    6: string
    7: string
}>
export type WinningsClaimed = ContractEventLog<{
    id: string
    winningOutcome: string
    winningIndex: string
    winningName: string
    amount: string
    settlementFee: string
    payout: string
    receiver: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
}>

export interface AugurNflMarketFactory extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AugurNflMarketFactory
    clone(): AugurNflMarketFactory
    methods: {
        accumulatedProtocolFee(): NonPayableTransactionObject<string>

        accumulatedSettlementFees(arg0: string): NonPayableTransactionObject<string>

        burnShares(
            _id: number | string | BN,
            _sharesToBurn: number | string | BN,
            _receiver: string,
        ): NonPayableTransactionObject<string>

        calcCost(_shares: number | string | BN): NonPayableTransactionObject<string>

        calcShares(_collateralIn: number | string | BN): NonPayableTransactionObject<string>

        claimManyWinnings(_ids: (number | string | BN)[], _receiver: string): NonPayableTransactionObject<string>

        claimProtocolFees(): NonPayableTransactionObject<string>

        claimSettlementFees(_receiver: string): NonPayableTransactionObject<string>

        claimWinnings(_id: number | string | BN, _receiver: string): NonPayableTransactionObject<string>

        collateral(): NonPayableTransactionObject<string>

        createEvent(
            _eventId: number | string | BN,
            _homeTeamName: string,
            _homeTeamId: number | string | BN,
            _awayTeamName: string,
            _awayTeamId: number | string | BN,
            _startTimestamp: number | string | BN,
            _homeSpread: number | string | BN,
            _totalScore: number | string | BN,
            _moneylines: (number | string | BN)[],
        ): NonPayableTransactionObject<string[]>

        eventCount(): NonPayableTransactionObject<string>

        feePot(): NonPayableTransactionObject<string>

        getEventMarkets(_eventId: number | string | BN): NonPayableTransactionObject<string[]>

        getMarket(
            _id: number | string | BN,
        ): NonPayableTransactionObject<
            [string, string[], string, string, string, string, string, string, string[], boolean]
        >

        getOwner(): NonPayableTransactionObject<string>

        getSportsEvent(
            _eventId: number | string | BN,
        ): NonPayableTransactionObject<
            [string, string[], string[], string, string, string, string, string, string, string]
        >

        getSportsEventByIndex(_index: number | string | BN): NonPayableTransactionObject<{
            _event: [string, string[], string[], string, string, string, string, string, string, string]
            _eventId: string
            0: [string, string[], string[], string, string, string, string, string, string, string]
            1: string
        }>

        getVersion(): NonPayableTransactionObject<string>

        isMarketResolved(_id: number | string | BN): NonPayableTransactionObject<boolean>

        linkNode(): NonPayableTransactionObject<string>

        listOfSportsEvents(arg0: number | string | BN): NonPayableTransactionObject<string>

        listResolvableEvents(): NonPayableTransactionObject<string[]>

        marketCount(): NonPayableTransactionObject<string>

        mintShares(
            _id: number | string | BN,
            _shareToMint: number | string | BN,
            _receiver: string,
        ): NonPayableTransactionObject<void>

        protocol(): NonPayableTransactionObject<string>

        protocolFee(): NonPayableTransactionObject<string>

        resolveEvent(
            _eventId: number | string | BN,
            _eventStatus: number | string | BN,
            _homeTeamId: number | string | BN,
            _awayTeamId: number | string | BN,
            _homeScore: number | string | BN,
            _awayScore: number | string | BN,
        ): NonPayableTransactionObject<void>

        setLinkNode(_newLinkNode: string): NonPayableTransactionObject<void>

        setProtocol(_newProtocol: string, _claimFirst: boolean): NonPayableTransactionObject<void>

        setProtocolFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        setSettlementFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        setStakerFee(_newFee: number | string | BN): NonPayableTransactionObject<void>

        settlementFee(): NonPayableTransactionObject<string>

        shareFactor(): NonPayableTransactionObject<string>

        sportsEvents(arg0: number | string | BN): NonPayableTransactionObject<{
            status: string
            estimatedStartTime: string
            homeTeamId: string
            awayTeamId: string
            homeTeamName: string
            awayTeamName: string
            homeScore: string
            awayScore: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: string
            7: string
        }>

        stakerFee(): NonPayableTransactionObject<string>

        transferOwnership(_newOwner: string): NonPayableTransactionObject<boolean>
    }
    events: {
        LinkNodeChanged(cb?: Callback<LinkNodeChanged>): EventEmitter
        LinkNodeChanged(options?: EventOptions, cb?: Callback<LinkNodeChanged>): EventEmitter

        MarketActivated(cb?: Callback<MarketActivated>): EventEmitter
        MarketActivated(options?: EventOptions, cb?: Callback<MarketActivated>): EventEmitter

        MarketCreated(cb?: Callback<MarketCreated>): EventEmitter
        MarketCreated(options?: EventOptions, cb?: Callback<MarketCreated>): EventEmitter

        MarketResolved(cb?: Callback<MarketResolved>): EventEmitter
        MarketResolved(options?: EventOptions, cb?: Callback<MarketResolved>): EventEmitter

        SharesBurned(cb?: Callback<SharesBurned>): EventEmitter
        SharesBurned(options?: EventOptions, cb?: Callback<SharesBurned>): EventEmitter

        SharesMinted(cb?: Callback<SharesMinted>): EventEmitter
        SharesMinted(options?: EventOptions, cb?: Callback<SharesMinted>): EventEmitter

        SportsEventCreated(cb?: Callback<SportsEventCreated>): EventEmitter
        SportsEventCreated(options?: EventOptions, cb?: Callback<SportsEventCreated>): EventEmitter

        WinningsClaimed(cb?: Callback<WinningsClaimed>): EventEmitter
        WinningsClaimed(options?: EventOptions, cb?: Callback<WinningsClaimed>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'LinkNodeChanged', cb: Callback<LinkNodeChanged>): void
    once(event: 'LinkNodeChanged', options: EventOptions, cb: Callback<LinkNodeChanged>): void

    once(event: 'MarketActivated', cb: Callback<MarketActivated>): void
    once(event: 'MarketActivated', options: EventOptions, cb: Callback<MarketActivated>): void

    once(event: 'MarketCreated', cb: Callback<MarketCreated>): void
    once(event: 'MarketCreated', options: EventOptions, cb: Callback<MarketCreated>): void

    once(event: 'MarketResolved', cb: Callback<MarketResolved>): void
    once(event: 'MarketResolved', options: EventOptions, cb: Callback<MarketResolved>): void

    once(event: 'SharesBurned', cb: Callback<SharesBurned>): void
    once(event: 'SharesBurned', options: EventOptions, cb: Callback<SharesBurned>): void

    once(event: 'SharesMinted', cb: Callback<SharesMinted>): void
    once(event: 'SharesMinted', options: EventOptions, cb: Callback<SharesMinted>): void

    once(event: 'SportsEventCreated', cb: Callback<SportsEventCreated>): void
    once(event: 'SportsEventCreated', options: EventOptions, cb: Callback<SportsEventCreated>): void

    once(event: 'WinningsClaimed', cb: Callback<WinningsClaimed>): void
    once(event: 'WinningsClaimed', options: EventOptions, cb: Callback<WinningsClaimed>): void
}
