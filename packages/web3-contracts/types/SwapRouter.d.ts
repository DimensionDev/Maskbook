/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface SwapRouter extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): SwapRouter
    clone(): SwapRouter
    methods: {
        WETH9(): NonPayableTransactionObject<string>

        exactInput(
            params: [string | number[], string, number | string | BN, number | string | BN, number | string | BN],
        ): PayableTransactionObject<string>

        exactInputSingle(
            params: [
                string,
                string,
                number | string | BN,
                string,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
            ],
        ): PayableTransactionObject<string>

        exactOutput(
            params: [string | number[], string, number | string | BN, number | string | BN, number | string | BN],
        ): PayableTransactionObject<string>

        exactOutputSingle(
            params: [
                string,
                string,
                number | string | BN,
                string,
                number | string | BN,
                number | string | BN,
                number | string | BN,
                number | string | BN,
            ],
        ): PayableTransactionObject<string>

        factory(): NonPayableTransactionObject<string>

        multicall(data: (string | number[])[]): PayableTransactionObject<string[]>

        refundETH(): PayableTransactionObject<void>

        selfPermit(
            token: string,
            value: number | string | BN,
            deadline: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): PayableTransactionObject<void>

        selfPermitAllowed(
            token: string,
            nonce: number | string | BN,
            expiry: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): PayableTransactionObject<void>

        selfPermitAllowedIfNecessary(
            token: string,
            nonce: number | string | BN,
            expiry: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): PayableTransactionObject<void>

        selfPermitIfNecessary(
            token: string,
            value: number | string | BN,
            deadline: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): PayableTransactionObject<void>

        sweepToken(
            token: string,
            amountMinimum: number | string | BN,
            recipient: string,
        ): PayableTransactionObject<void>

        sweepTokenWithFee(
            token: string,
            amountMinimum: number | string | BN,
            recipient: string,
            feeBips: number | string | BN,
            feeRecipient: string,
        ): PayableTransactionObject<void>

        uniswapV3SwapCallback(
            amount0Delta: number | string | BN,
            amount1Delta: number | string | BN,
            _data: string | number[],
        ): NonPayableTransactionObject<void>

        unwrapWETH9(amountMinimum: number | string | BN, recipient: string): PayableTransactionObject<void>

        unwrapWETH9WithFee(
            amountMinimum: number | string | BN,
            recipient: string,
            feeBips: number | string | BN,
            feeRecipient: string,
        ): PayableTransactionObject<void>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
