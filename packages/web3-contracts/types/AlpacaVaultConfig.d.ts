/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type SetApprovedAddStrategy = ContractEventLog<{
    caller: string
    addStrat: string
    ok: boolean
    0: string
    1: string
    2: boolean
}>
export type SetMaxKillBps = ContractEventLog<{
    caller: string
    maxKillBps: string
    0: string
    1: string
}>
export type SetParams = ContractEventLog<{
    caller: string
    minDebtSize: string
    reservePoolBps: string
    killBps: string
    interestModel: string
    wrappedNative: string
    wNativeRelayer: string
    fairLaunch: string
    killTreasuryBps: string
    treasury: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
    8: string
    9: string
}>
export type SetWhitelistedCaller = ContractEventLog<{
    caller: string
    addr: string
    ok: boolean
    0: string
    1: string
    2: boolean
}>
export type SetWhitelistedLiquidator = ContractEventLog<{
    caller: string
    addr: string
    ok: boolean
    0: string
    1: string
    2: boolean
}>
export type SetWorkers = ContractEventLog<{
    caller: string
    worker: string
    workerConfig: string
    0: string
    1: string
    2: string
}>

export interface AlpacaVaultConfig extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AlpacaVaultConfig
    clone(): AlpacaVaultConfig
    methods: {
        acceptDebt(worker: string): NonPayableTransactionObject<boolean>

        approvedAddStrategies(arg0: string): NonPayableTransactionObject<boolean>

        getFairLaunchAddr(): NonPayableTransactionObject<string>

        getInterestRate(debt: number | string | BN, floating: number | string | BN): NonPayableTransactionObject<string>

        getKillBps(): NonPayableTransactionObject<string>

        getKillTreasuryBps(): NonPayableTransactionObject<string>

        getReservePoolBps(): NonPayableTransactionObject<string>

        getTreasuryAddr(): NonPayableTransactionObject<string>

        getWNativeRelayer(): NonPayableTransactionObject<string>

        getWrappedNativeAddr(): NonPayableTransactionObject<string>

        initialize(
            _minDebtSize: number | string | BN,
            _reservePoolBps: number | string | BN,
            _killBps: number | string | BN,
            _interestModel: string,
            _getWrappedNativeAddr: string,
            _getWNativeRelayer: string,
            _getFairLaunchAddr: string,
            _getKillTreasuryBps: number | string | BN,
            _treasury: string,
        ): NonPayableTransactionObject<void>

        interestModel(): NonPayableTransactionObject<string>

        isWorker(worker: string): NonPayableTransactionObject<boolean>

        isWorkerReserveConsistent(worker: string): NonPayableTransactionObject<boolean>

        isWorkerStable(worker: string): NonPayableTransactionObject<boolean>

        killFactor(worker: string, debt: number | string | BN): NonPayableTransactionObject<string>

        maxKillBps(): NonPayableTransactionObject<string>

        minDebtSize(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        rawKillFactor(worker: string, debt: number | string | BN): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        setApprovedAddStrategy(addStrats: string[], ok: boolean): NonPayableTransactionObject<void>

        setMaxKillBps(_maxKillBps: number | string | BN): NonPayableTransactionObject<void>

        setParams(
            _minDebtSize: number | string | BN,
            _reservePoolBps: number | string | BN,
            _killBps: number | string | BN,
            _interestModel: string,
            _getWrappedNativeAddr: string,
            _getWNativeRelayer: string,
            _getFairLaunchAddr: string,
            _getKillTreasuryBps: number | string | BN,
            _treasury: string,
        ): NonPayableTransactionObject<void>

        setWhitelistedCallers(callers: string[], ok: boolean): NonPayableTransactionObject<void>

        setWhitelistedLiquidators(callers: string[], ok: boolean): NonPayableTransactionObject<void>

        setWorkers(addrs: string[], configs: string[]): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        treasury(): NonPayableTransactionObject<string>

        whitelistedCallers(arg0: string): NonPayableTransactionObject<boolean>

        whitelistedLiquidators(arg0: string): NonPayableTransactionObject<boolean>

        workFactor(worker: string, debt: number | string | BN): NonPayableTransactionObject<string>

        workers(arg0: string): NonPayableTransactionObject<string>
    }
    events: {
        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        SetApprovedAddStrategy(cb?: Callback<SetApprovedAddStrategy>): EventEmitter
        SetApprovedAddStrategy(options?: EventOptions, cb?: Callback<SetApprovedAddStrategy>): EventEmitter

        SetMaxKillBps(cb?: Callback<SetMaxKillBps>): EventEmitter
        SetMaxKillBps(options?: EventOptions, cb?: Callback<SetMaxKillBps>): EventEmitter

        SetParams(cb?: Callback<SetParams>): EventEmitter
        SetParams(options?: EventOptions, cb?: Callback<SetParams>): EventEmitter

        SetWhitelistedCaller(cb?: Callback<SetWhitelistedCaller>): EventEmitter
        SetWhitelistedCaller(options?: EventOptions, cb?: Callback<SetWhitelistedCaller>): EventEmitter

        SetWhitelistedLiquidator(cb?: Callback<SetWhitelistedLiquidator>): EventEmitter
        SetWhitelistedLiquidator(options?: EventOptions, cb?: Callback<SetWhitelistedLiquidator>): EventEmitter

        SetWorkers(cb?: Callback<SetWorkers>): EventEmitter
        SetWorkers(options?: EventOptions, cb?: Callback<SetWorkers>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'SetApprovedAddStrategy', cb: Callback<SetApprovedAddStrategy>): void
    once(event: 'SetApprovedAddStrategy', options: EventOptions, cb: Callback<SetApprovedAddStrategy>): void

    once(event: 'SetMaxKillBps', cb: Callback<SetMaxKillBps>): void
    once(event: 'SetMaxKillBps', options: EventOptions, cb: Callback<SetMaxKillBps>): void

    once(event: 'SetParams', cb: Callback<SetParams>): void
    once(event: 'SetParams', options: EventOptions, cb: Callback<SetParams>): void

    once(event: 'SetWhitelistedCaller', cb: Callback<SetWhitelistedCaller>): void
    once(event: 'SetWhitelistedCaller', options: EventOptions, cb: Callback<SetWhitelistedCaller>): void

    once(event: 'SetWhitelistedLiquidator', cb: Callback<SetWhitelistedLiquidator>): void
    once(event: 'SetWhitelistedLiquidator', options: EventOptions, cb: Callback<SetWhitelistedLiquidator>): void

    once(event: 'SetWorkers', cb: Callback<SetWorkers>): void
    once(event: 'SetWorkers', options: EventOptions, cb: Callback<SetWorkers>): void
}
