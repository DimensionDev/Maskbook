/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface Quoter extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Quoter
    clone(): Quoter
    methods: {
        WETH9(): NonPayableTransactionObject<string>

        factory(): NonPayableTransactionObject<string>

        quoteExactInput(path: string | number[], amountIn: number | string | BN): NonPayableTransactionObject<string>

        quoteExactInputSingle(
            tokenIn: string,
            tokenOut: string,
            fee: number | string | BN,
            amountIn: number | string | BN,
            sqrtPriceLimitX96: number | string | BN,
        ): NonPayableTransactionObject<string>

        quoteExactOutput(path: string | number[], amountOut: number | string | BN): NonPayableTransactionObject<string>

        quoteExactOutputSingle(
            tokenIn: string,
            tokenOut: string,
            fee: number | string | BN,
            amountOut: number | string | BN,
            sqrtPriceLimitX96: number | string | BN,
        ): NonPayableTransactionObject<string>

        uniswapV3SwapCallback(
            amount0Delta: number | string | BN,
            amount1Delta: number | string | BN,
            path: string | number[],
        ): NonPayableTransactionObject<void>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
