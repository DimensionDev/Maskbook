/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js'
import type { ContractOptions } from 'web3-eth-contract'
import type { EventLog } from 'web3-core'
import type { EventEmitter } from 'events'
import type {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types.js'

export interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AddressSet = ContractEventLog<{
    id: string
    newAddress: string
    hasProxy: boolean
    0: string
    1: string
    2: boolean
}>
export type ConfigurationAdminUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type EmergencyAdminUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type LendingPoolCollateralManagerUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type LendingPoolConfiguratorUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type LendingPoolUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type LendingRateOracleUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type MarketIdSet = ContractEventLog<{
    newMarketId: string
    0: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type PriceOracleUpdated = ContractEventLog<{
    newAddress: string
    0: string
}>
export type ProxyCreated = ContractEventLog<{
    id: string
    newAddress: string
    0: string
    1: string
}>

export interface AaveLendingPoolAddressProvider extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AaveLendingPoolAddressProvider
    clone(): AaveLendingPoolAddressProvider
    methods: {
        getAddress(id: string | number[]): NonPayableTransactionObject<string>

        getEmergencyAdmin(): NonPayableTransactionObject<string>

        getLendingPool(): NonPayableTransactionObject<string>

        getLendingPoolCollateralManager(): NonPayableTransactionObject<string>

        getLendingPoolConfigurator(): NonPayableTransactionObject<string>

        getLendingRateOracle(): NonPayableTransactionObject<string>

        getMarketId(): NonPayableTransactionObject<string>

        getPoolAdmin(): NonPayableTransactionObject<string>

        getPriceOracle(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        setAddress(id: string | number[], newAddress: string): NonPayableTransactionObject<void>

        setAddressAsProxy(id: string | number[], implementationAddress: string): NonPayableTransactionObject<void>

        setEmergencyAdmin(emergencyAdmin: string): NonPayableTransactionObject<void>

        setLendingPoolCollateralManager(manager: string): NonPayableTransactionObject<void>

        setLendingPoolConfiguratorImpl(configurator: string): NonPayableTransactionObject<void>

        setLendingPoolImpl(pool: string): NonPayableTransactionObject<void>

        setLendingRateOracle(lendingRateOracle: string): NonPayableTransactionObject<void>

        setMarketId(marketId: string): NonPayableTransactionObject<void>

        setPoolAdmin(admin: string): NonPayableTransactionObject<void>

        setPriceOracle(priceOracle: string): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>
    }
    events: {
        AddressSet(cb?: Callback<AddressSet>): EventEmitter
        AddressSet(options?: EventOptions, cb?: Callback<AddressSet>): EventEmitter

        ConfigurationAdminUpdated(cb?: Callback<ConfigurationAdminUpdated>): EventEmitter
        ConfigurationAdminUpdated(options?: EventOptions, cb?: Callback<ConfigurationAdminUpdated>): EventEmitter

        EmergencyAdminUpdated(cb?: Callback<EmergencyAdminUpdated>): EventEmitter
        EmergencyAdminUpdated(options?: EventOptions, cb?: Callback<EmergencyAdminUpdated>): EventEmitter

        LendingPoolCollateralManagerUpdated(cb?: Callback<LendingPoolCollateralManagerUpdated>): EventEmitter
        LendingPoolCollateralManagerUpdated(
            options?: EventOptions,
            cb?: Callback<LendingPoolCollateralManagerUpdated>,
        ): EventEmitter

        LendingPoolConfiguratorUpdated(cb?: Callback<LendingPoolConfiguratorUpdated>): EventEmitter
        LendingPoolConfiguratorUpdated(
            options?: EventOptions,
            cb?: Callback<LendingPoolConfiguratorUpdated>,
        ): EventEmitter

        LendingPoolUpdated(cb?: Callback<LendingPoolUpdated>): EventEmitter
        LendingPoolUpdated(options?: EventOptions, cb?: Callback<LendingPoolUpdated>): EventEmitter

        LendingRateOracleUpdated(cb?: Callback<LendingRateOracleUpdated>): EventEmitter
        LendingRateOracleUpdated(options?: EventOptions, cb?: Callback<LendingRateOracleUpdated>): EventEmitter

        MarketIdSet(cb?: Callback<MarketIdSet>): EventEmitter
        MarketIdSet(options?: EventOptions, cb?: Callback<MarketIdSet>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        PriceOracleUpdated(cb?: Callback<PriceOracleUpdated>): EventEmitter
        PriceOracleUpdated(options?: EventOptions, cb?: Callback<PriceOracleUpdated>): EventEmitter

        ProxyCreated(cb?: Callback<ProxyCreated>): EventEmitter
        ProxyCreated(options?: EventOptions, cb?: Callback<ProxyCreated>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AddressSet', cb: Callback<AddressSet>): void
    once(event: 'AddressSet', options: EventOptions, cb: Callback<AddressSet>): void

    once(event: 'ConfigurationAdminUpdated', cb: Callback<ConfigurationAdminUpdated>): void
    once(event: 'ConfigurationAdminUpdated', options: EventOptions, cb: Callback<ConfigurationAdminUpdated>): void

    once(event: 'EmergencyAdminUpdated', cb: Callback<EmergencyAdminUpdated>): void
    once(event: 'EmergencyAdminUpdated', options: EventOptions, cb: Callback<EmergencyAdminUpdated>): void

    once(event: 'LendingPoolCollateralManagerUpdated', cb: Callback<LendingPoolCollateralManagerUpdated>): void
    once(
        event: 'LendingPoolCollateralManagerUpdated',
        options: EventOptions,
        cb: Callback<LendingPoolCollateralManagerUpdated>,
    ): void

    once(event: 'LendingPoolConfiguratorUpdated', cb: Callback<LendingPoolConfiguratorUpdated>): void
    once(
        event: 'LendingPoolConfiguratorUpdated',
        options: EventOptions,
        cb: Callback<LendingPoolConfiguratorUpdated>,
    ): void

    once(event: 'LendingPoolUpdated', cb: Callback<LendingPoolUpdated>): void
    once(event: 'LendingPoolUpdated', options: EventOptions, cb: Callback<LendingPoolUpdated>): void

    once(event: 'LendingRateOracleUpdated', cb: Callback<LendingRateOracleUpdated>): void
    once(event: 'LendingRateOracleUpdated', options: EventOptions, cb: Callback<LendingRateOracleUpdated>): void

    once(event: 'MarketIdSet', cb: Callback<MarketIdSet>): void
    once(event: 'MarketIdSet', options: EventOptions, cb: Callback<MarketIdSet>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'PriceOracleUpdated', cb: Callback<PriceOracleUpdated>): void
    once(event: 'PriceOracleUpdated', options: EventOptions, cb: Callback<PriceOracleUpdated>): void

    once(event: 'ProxyCreated', cb: Callback<ProxyCreated>): void
    once(event: 'ProxyCreated', options: EventOptions, cb: Callback<ProxyCreated>): void
}
