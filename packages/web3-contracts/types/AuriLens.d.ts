/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface AuriLens extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): AuriLens
    clone(): AuriLens
    methods: {
        auTokenUnderlyingPrice(auToken: string): NonPayableTransactionObject<[string, string]>

        getAddresses(comptroller: string): NonPayableTransactionObject<{
            ply: string
            aurora: string
            tokenLock: string
            0: string
            1: string
            2: string
        }>

        getRewardSpeeds(
            comptroller: string,
            auToken: string,
        ): NonPayableTransactionObject<[string, string, string, string]>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
