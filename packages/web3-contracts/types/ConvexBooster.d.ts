/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Deposited = ContractEventLog<{
    user: string
    poolid: string
    amount: string
    0: string
    1: string
    2: string
}>
export type Withdrawn = ContractEventLog<{
    user: string
    poolid: string
    amount: string
    0: string
    1: string
    2: string
}>

export interface ConvexBooster extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ConvexBooster
    clone(): ConvexBooster
    methods: {
        FEE_DENOMINATOR(): NonPayableTransactionObject<string>

        MaxFees(): NonPayableTransactionObject<string>

        addPool(
            _lptoken: string,
            _gauge: string,
            _stashVersion: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        claimRewards(_pid: number | string | BN, _gauge: string): NonPayableTransactionObject<boolean>

        crv(): NonPayableTransactionObject<string>

        deposit(
            _pid: number | string | BN,
            _amount: number | string | BN,
            _stake: boolean,
        ): NonPayableTransactionObject<boolean>

        depositAll(_pid: number | string | BN, _stake: boolean): NonPayableTransactionObject<boolean>

        distributionAddressId(): NonPayableTransactionObject<string>

        earmarkFees(): NonPayableTransactionObject<boolean>

        earmarkIncentive(): NonPayableTransactionObject<string>

        earmarkRewards(_pid: number | string | BN): NonPayableTransactionObject<boolean>

        feeDistro(): NonPayableTransactionObject<string>

        feeManager(): NonPayableTransactionObject<string>

        feeToken(): NonPayableTransactionObject<string>

        gaugeMap(arg0: string): NonPayableTransactionObject<boolean>

        isShutdown(): NonPayableTransactionObject<boolean>

        lockFees(): NonPayableTransactionObject<string>

        lockIncentive(): NonPayableTransactionObject<string>

        lockRewards(): NonPayableTransactionObject<string>

        minter(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        platformFee(): NonPayableTransactionObject<string>

        poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
            lptoken: string
            token: string
            gauge: string
            crvRewards: string
            stash: string
            shutdown: boolean
            0: string
            1: string
            2: string
            3: string
            4: string
            5: boolean
        }>

        poolLength(): NonPayableTransactionObject<string>

        poolManager(): NonPayableTransactionObject<string>

        registry(): NonPayableTransactionObject<string>

        rewardArbitrator(): NonPayableTransactionObject<string>

        rewardClaimed(
            _pid: number | string | BN,
            _address: string,
            _amount: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        rewardFactory(): NonPayableTransactionObject<string>

        setArbitrator(_arb: string): NonPayableTransactionObject<void>

        setFactories(_rfactory: string, _sfactory: string, _tfactory: string): NonPayableTransactionObject<void>

        setFeeInfo(): NonPayableTransactionObject<void>

        setFeeManager(_feeM: string): NonPayableTransactionObject<void>

        setFees(
            _lockFees: number | string | BN,
            _stakerFees: number | string | BN,
            _callerFees: number | string | BN,
            _platform: number | string | BN,
        ): NonPayableTransactionObject<void>

        setGaugeRedirect(_pid: number | string | BN): NonPayableTransactionObject<boolean>

        setOwner(_owner: string): NonPayableTransactionObject<void>

        setPoolManager(_poolM: string): NonPayableTransactionObject<void>

        setRewardContracts(_rewards: string, _stakerRewards: string): NonPayableTransactionObject<void>

        setTreasury(_treasury: string): NonPayableTransactionObject<void>

        setVoteDelegate(_voteDelegate: string): NonPayableTransactionObject<void>

        shutdownPool(_pid: number | string | BN): NonPayableTransactionObject<boolean>

        shutdownSystem(): NonPayableTransactionObject<void>

        staker(): NonPayableTransactionObject<string>

        stakerIncentive(): NonPayableTransactionObject<string>

        stakerRewards(): NonPayableTransactionObject<string>

        stashFactory(): NonPayableTransactionObject<string>

        tokenFactory(): NonPayableTransactionObject<string>

        treasury(): NonPayableTransactionObject<string>

        vote(
            _voteId: number | string | BN,
            _votingAddress: string,
            _support: boolean,
        ): NonPayableTransactionObject<boolean>

        voteDelegate(): NonPayableTransactionObject<string>

        voteGaugeWeight(_gauge: string[], _weight: (number | string | BN)[]): NonPayableTransactionObject<boolean>

        voteOwnership(): NonPayableTransactionObject<string>

        voteParameter(): NonPayableTransactionObject<string>

        withdraw(_pid: number | string | BN, _amount: number | string | BN): NonPayableTransactionObject<boolean>

        withdrawAll(_pid: number | string | BN): NonPayableTransactionObject<boolean>

        withdrawTo(
            _pid: number | string | BN,
            _amount: number | string | BN,
            _to: string,
        ): NonPayableTransactionObject<boolean>
    }
    events: {
        Deposited(cb?: Callback<Deposited>): EventEmitter
        Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter

        Withdrawn(cb?: Callback<Withdrawn>): EventEmitter
        Withdrawn(options?: EventOptions, cb?: Callback<Withdrawn>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Deposited', cb: Callback<Deposited>): void
    once(event: 'Deposited', options: EventOptions, cb: Callback<Deposited>): void

    once(event: 'Withdrawn', cb: Callback<Withdrawn>): void
    once(event: 'Withdrawn', options: EventOptions, cb: Callback<Withdrawn>): void
}
