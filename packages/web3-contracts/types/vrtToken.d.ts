/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Approval = ContractEventLog<{
    owner: string
    spender: string
    amount: string
    0: string
    1: string
    2: string
}>
export type DelegateChanged = ContractEventLog<{
    delegator: string
    fromDelegate: string
    toDelegate: string
    0: string
    1: string
    2: string
}>
export type DelegateVotesChanged = ContractEventLog<{
    delegate: string
    previousBalance: string
    newBalance: string
    0: string
    1: string
    2: string
}>
export type Freezed = ContractEventLog<{}>
export type OwnershipTransferred = ContractEventLog<{
    _from: string
    _to: string
    0: string
    1: string
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    amount: string
    0: string
    1: string
    2: string
}>
export type UnFreezed = ContractEventLog<{}>

export interface VrtToken extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): VrtToken
    clone(): VrtToken
    methods: {
        DELEGATION_TYPEHASH(): NonPayableTransactionObject<string>

        DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>

        allowance(account: string, spender: string): NonPayableTransactionObject<string>

        approve(spender: string, rawAmount: number | string | BN): NonPayableTransactionObject<boolean>

        balanceOf(account: string): NonPayableTransactionObject<string>

        checkpoints(
            arg0: string,
            arg1: number | string | BN,
        ): NonPayableTransactionObject<{
            fromBlock: string
            votes: string
            0: string
            1: string
        }>

        decimals(): NonPayableTransactionObject<string>

        delegate(delegatee: string): NonPayableTransactionObject<void>

        delegateBySig(
            delegatee: string,
            nonce: number | string | BN,
            expiry: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        delegates(arg0: string): NonPayableTransactionObject<string>

        freeze(): NonPayableTransactionObject<void>

        getCurrentVotes(account: string): NonPayableTransactionObject<string>

        getPriorVotes(account: string, blockNumber: number | string | BN): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        nonces(arg0: string): NonPayableTransactionObject<string>

        numCheckpoints(arg0: string): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        symbol(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        transfer(dst: string, rawAmount: number | string | BN): NonPayableTransactionObject<boolean>

        transferFrom(src: string, dst: string, rawAmount: number | string | BN): NonPayableTransactionObject<boolean>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        unfreeze(): NonPayableTransactionObject<void>
    }
    events: {
        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        DelegateChanged(cb?: Callback<DelegateChanged>): EventEmitter
        DelegateChanged(options?: EventOptions, cb?: Callback<DelegateChanged>): EventEmitter

        DelegateVotesChanged(cb?: Callback<DelegateVotesChanged>): EventEmitter
        DelegateVotesChanged(options?: EventOptions, cb?: Callback<DelegateVotesChanged>): EventEmitter

        Freezed(cb?: Callback<Freezed>): EventEmitter
        Freezed(options?: EventOptions, cb?: Callback<Freezed>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        UnFreezed(cb?: Callback<UnFreezed>): EventEmitter
        UnFreezed(options?: EventOptions, cb?: Callback<UnFreezed>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'DelegateChanged', cb: Callback<DelegateChanged>): void
    once(event: 'DelegateChanged', options: EventOptions, cb: Callback<DelegateChanged>): void

    once(event: 'DelegateVotesChanged', cb: Callback<DelegateVotesChanged>): void
    once(event: 'DelegateVotesChanged', options: EventOptions, cb: Callback<DelegateVotesChanged>): void

    once(event: 'Freezed', cb: Callback<Freezed>): void
    once(event: 'Freezed', options: EventOptions, cb: Callback<Freezed>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void

    once(event: 'UnFreezed', cb: Callback<UnFreezed>): void
    once(event: 'UnFreezed', options: EventOptions, cb: Callback<UnFreezed>): void
}
