/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export interface VenusLens extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): VenusLens
    clone(): VenusLens
    methods: {
        getAccountLimits(comptroller: string, account: string): NonPayableTransactionObject<[string[], string, string]>

        getGovProposals(
            governor: string,
            proposalIds: (number | string | BN)[],
        ): NonPayableTransactionObject<
            [
                string,
                string,
                string,
                string[],
                string[],
                string[],
                string[],
                string,
                string,
                string,
                string,
                boolean,
                boolean,
            ][]
        >

        getGovReceipts(
            governor: string,
            voter: string,
            proposalIds: (number | string | BN)[],
        ): NonPayableTransactionObject<[string, boolean, boolean, string][]>

        getVenusVotes(
            xvs: string,
            account: string,
            blockNumbers: (number | string | BN)[],
        ): NonPayableTransactionObject<[string, string][]>

        getXVSBalanceMetadata(xvs: string, account: string): NonPayableTransactionObject<[string, string, string]>

        getXVSBalanceMetadataExt(
            xvs: string,
            comptroller: string,
            account: string,
        ): NonPayableTransactionObject<[string, string, string, string]>

        vTokenBalances(
            vToken: string,
            account: string,
        ): NonPayableTransactionObject<[string, string, string, string, string, string]>

        vTokenBalancesAll(
            vTokens: string[],
            account: string,
        ): NonPayableTransactionObject<[string, string, string, string, string, string][]>

        vTokenMetadata(
            vToken: string,
        ): NonPayableTransactionObject<
            [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                boolean,
                string,
                string,
                string,
                string,
            ]
        >

        vTokenMetadataAll(
            vTokens: string[],
        ): NonPayableTransactionObject<
            [
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                string,
                boolean,
                string,
                string,
                string,
                string,
            ][]
        >

        vTokenUnderlyingPrice(vToken: string): NonPayableTransactionObject<[string, string]>

        vTokenUnderlyingPriceAll(vTokens: string[]): NonPayableTransactionObject<[string, string][]>
    }
    events: {
        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }
}
