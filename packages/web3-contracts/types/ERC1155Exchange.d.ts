/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Bid = ContractEventLog<{
    hash: string
    bidder: string
    amount: string
    price: string
    recipient: string
    referrer: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type Cancel = ContractEventLog<{
    hash: string
    0: string
}>
export type Claim = ContractEventLog<{
    hash: string
    bidder: string
    amount: string
    price: string
    recipient: string
    referrer: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type UpdateApprovedBidHash = ContractEventLog<{
    proxy: string
    askHash: string
    bidder: string
    bidHash: string
    0: string
    1: string
    2: string
    3: string
}>

export interface ERC1155Exchange extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ERC1155Exchange
    clone(): ERC1155Exchange
    methods: {
        DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>

        amountFilled(arg0: string | number[]): NonPayableTransactionObject<string>

        approvedBidHash(proxy: string, askHash: string | number[], bidder: string): NonPayableTransactionObject<string>

        bestBid(arg0: string | number[]): NonPayableTransactionObject<{
            bidder: string
            amount: string
            price: string
            recipient: string
            referrer: string
            timestamp: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
        }>

        'bid((address,address,address,uint256,uint256,address,address,address,uint256,bytes,uint8,bytes32,bytes32),uint256,uint256,address,address)'(
            askOrder: [
                string,
                string,
                string,
                number | string | BN,
                number | string | BN,
                string,
                string,
                string,
                number | string | BN,
                string | number[],
                number | string | BN,
                string | number[],
                string | number[],
            ],
            bidAmount: number | string | BN,
            bidPrice: number | string | BN,
            bidRecipient: string,
            bidReferrer: string,
        ): NonPayableTransactionObject<boolean>

        'bid((address,address,address,uint256,uint256,address,address,address,uint256,bytes,uint8,bytes32,bytes32),(bytes32,address,uint256,uint256,address,address,uint8,bytes32,bytes32))'(
            askOrder: [
                string,
                string,
                string,
                number | string | BN,
                number | string | BN,
                string,
                string,
                string,
                number | string | BN,
                string | number[],
                number | string | BN,
                string | number[],
                string | number[],
            ],
            bidOrder: [
                string | number[],
                string,
                number | string | BN,
                number | string | BN,
                string,
                string,
                number | string | BN,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<boolean>

        canTrade(nft: string): NonPayableTransactionObject<boolean>

        cancel(
            order: [
                string,
                string,
                string,
                number | string | BN,
                number | string | BN,
                string,
                string,
                string,
                number | string | BN,
                string | number[],
                number | string | BN,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<void>

        claim(
            askOrder: [
                string,
                string,
                string,
                number | string | BN,
                number | string | BN,
                string,
                string,
                string,
                number | string | BN,
                string | number[],
                number | string | BN,
                string | number[],
                string | number[],
            ],
        ): NonPayableTransactionObject<void>

        factory(): NonPayableTransactionObject<string>

        isCancelledOrClaimed(arg0: string | number[]): NonPayableTransactionObject<boolean>

        updateApprovedBidHash(
            askHash: string | number[],
            bidder: string,
            bidHash: string | number[],
        ): NonPayableTransactionObject<void>
    }
    events: {
        Bid(cb?: Callback<Bid>): EventEmitter
        Bid(options?: EventOptions, cb?: Callback<Bid>): EventEmitter

        Cancel(cb?: Callback<Cancel>): EventEmitter
        Cancel(options?: EventOptions, cb?: Callback<Cancel>): EventEmitter

        Claim(cb?: Callback<Claim>): EventEmitter
        Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter

        UpdateApprovedBidHash(cb?: Callback<UpdateApprovedBidHash>): EventEmitter
        UpdateApprovedBidHash(options?: EventOptions, cb?: Callback<UpdateApprovedBidHash>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Bid', cb: Callback<Bid>): void
    once(event: 'Bid', options: EventOptions, cb: Callback<Bid>): void

    once(event: 'Cancel', cb: Callback<Cancel>): void
    once(event: 'Cancel', options: EventOptions, cb: Callback<Cancel>): void

    once(event: 'Claim', cb: Callback<Claim>): void
    once(event: 'Claim', options: EventOptions, cb: Callback<Claim>): void

    once(event: 'UpdateApprovedBidHash', cb: Callback<UpdateApprovedBidHash>): void
    once(event: 'UpdateApprovedBidHash', options: EventOptions, cb: Callback<UpdateApprovedBidHash>): void
}
