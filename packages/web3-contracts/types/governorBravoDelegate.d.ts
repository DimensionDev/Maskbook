/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type NewAdmin = ContractEventLog<{
    oldAdmin: string
    newAdmin: string
    0: string
    1: string
}>
export type NewGuardian = ContractEventLog<{
    oldGuardian: string
    newGuardian: string
    0: string
    1: string
}>
export type NewImplementation = ContractEventLog<{
    oldImplementation: string
    newImplementation: string
    0: string
    1: string
}>
export type NewPendingAdmin = ContractEventLog<{
    oldPendingAdmin: string
    newPendingAdmin: string
    0: string
    1: string
}>
export type ProposalCanceled = ContractEventLog<{
    id: string
    0: string
}>
export type ProposalCreated = ContractEventLog<{
    id: string
    proposer: string
    targets: string[]
    values: string[]
    signatures: string[]
    calldatas: string[]
    startBlock: string
    endBlock: string
    description: string
    0: string
    1: string
    2: string[]
    3: string[]
    4: string[]
    5: string[]
    6: string
    7: string
    8: string
}>
export type ProposalExecuted = ContractEventLog<{
    id: string
    0: string
}>
export type ProposalQueued = ContractEventLog<{
    id: string
    eta: string
    0: string
    1: string
}>
export type ProposalThresholdSet = ContractEventLog<{
    oldProposalThreshold: string
    newProposalThreshold: string
    0: string
    1: string
}>
export type VoteCast = ContractEventLog<{
    voter: string
    proposalId: string
    support: string
    votes: string
    reason: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type VotingDelaySet = ContractEventLog<{
    oldVotingDelay: string
    newVotingDelay: string
    0: string
    1: string
}>
export type VotingPeriodSet = ContractEventLog<{
    oldVotingPeriod: string
    newVotingPeriod: string
    0: string
    1: string
}>

export interface GovernorBravoDelegate extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): GovernorBravoDelegate
    clone(): GovernorBravoDelegate
    methods: {
        BALLOT_TYPEHASH(): NonPayableTransactionObject<string>

        DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>

        MAX_PROPOSAL_THRESHOLD(): NonPayableTransactionObject<string>

        MAX_VOTING_DELAY(): NonPayableTransactionObject<string>

        MAX_VOTING_PERIOD(): NonPayableTransactionObject<string>

        MIN_PROPOSAL_THRESHOLD(): NonPayableTransactionObject<string>

        MIN_VOTING_DELAY(): NonPayableTransactionObject<string>

        MIN_VOTING_PERIOD(): NonPayableTransactionObject<string>

        _acceptAdmin(): NonPayableTransactionObject<void>

        _initiate(governorAlpha: string): NonPayableTransactionObject<void>

        _setGuardian(newGuardian: string): NonPayableTransactionObject<void>

        _setPendingAdmin(newPendingAdmin: string): NonPayableTransactionObject<void>

        _setProposalMaxOperations(proposalMaxOperations_: number | string | BN): NonPayableTransactionObject<void>

        _setProposalThreshold(newProposalThreshold: number | string | BN): NonPayableTransactionObject<void>

        _setVotingDelay(newVotingDelay: number | string | BN): NonPayableTransactionObject<void>

        _setVotingPeriod(newVotingPeriod: number | string | BN): NonPayableTransactionObject<void>

        admin(): NonPayableTransactionObject<string>

        cancel(proposalId: number | string | BN): NonPayableTransactionObject<void>

        castVote(proposalId: number | string | BN, support: number | string | BN): NonPayableTransactionObject<void>

        castVoteBySig(
            proposalId: number | string | BN,
            support: number | string | BN,
            v: number | string | BN,
            r: string | number[],
            s: string | number[],
        ): NonPayableTransactionObject<void>

        castVoteWithReason(
            proposalId: number | string | BN,
            support: number | string | BN,
            reason: string,
        ): NonPayableTransactionObject<void>

        execute(proposalId: number | string | BN): PayableTransactionObject<void>

        getActions(proposalId: number | string | BN): NonPayableTransactionObject<{
            targets: string[]
            values: string[]
            signatures: string[]
            calldatas: string[]
            0: string[]
            1: string[]
            2: string[]
            3: string[]
        }>

        getReceipt(
            proposalId: number | string | BN,
            voter: string,
        ): NonPayableTransactionObject<[boolean, string, string]>

        guardian(): NonPayableTransactionObject<string>

        implementation(): NonPayableTransactionObject<string>

        initialProposalId(): NonPayableTransactionObject<string>

        initialize(
            timelock_: string,
            xvsVault_: string,
            votingPeriod_: number | string | BN,
            votingDelay_: number | string | BN,
            proposalThreshold_: number | string | BN,
            guardian_: string,
        ): NonPayableTransactionObject<void>

        latestProposalIds(arg0: string): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        pendingAdmin(): NonPayableTransactionObject<string>

        proposalCount(): NonPayableTransactionObject<string>

        proposalMaxOperations(): NonPayableTransactionObject<string>

        proposalThreshold(): NonPayableTransactionObject<string>

        proposals(arg0: number | string | BN): NonPayableTransactionObject<{
            id: string
            proposer: string
            eta: string
            startBlock: string
            endBlock: string
            forVotes: string
            againstVotes: string
            abstainVotes: string
            canceled: boolean
            executed: boolean
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: string
            7: string
            8: boolean
            9: boolean
        }>

        propose(
            targets: string[],
            values: (number | string | BN)[],
            signatures: string[],
            calldatas: (string | number[])[],
            description: string,
        ): NonPayableTransactionObject<string>

        queue(proposalId: number | string | BN): NonPayableTransactionObject<void>

        quorumVotes(): NonPayableTransactionObject<string>

        state(proposalId: number | string | BN): NonPayableTransactionObject<string>

        timelock(): NonPayableTransactionObject<string>

        votingDelay(): NonPayableTransactionObject<string>

        votingPeriod(): NonPayableTransactionObject<string>

        xvsVault(): NonPayableTransactionObject<string>
    }
    events: {
        NewAdmin(cb?: Callback<NewAdmin>): EventEmitter
        NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter

        NewGuardian(cb?: Callback<NewGuardian>): EventEmitter
        NewGuardian(options?: EventOptions, cb?: Callback<NewGuardian>): EventEmitter

        NewImplementation(cb?: Callback<NewImplementation>): EventEmitter
        NewImplementation(options?: EventOptions, cb?: Callback<NewImplementation>): EventEmitter

        NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter
        NewPendingAdmin(options?: EventOptions, cb?: Callback<NewPendingAdmin>): EventEmitter

        ProposalCanceled(cb?: Callback<ProposalCanceled>): EventEmitter
        ProposalCanceled(options?: EventOptions, cb?: Callback<ProposalCanceled>): EventEmitter

        ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter
        ProposalCreated(options?: EventOptions, cb?: Callback<ProposalCreated>): EventEmitter

        ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter
        ProposalExecuted(options?: EventOptions, cb?: Callback<ProposalExecuted>): EventEmitter

        ProposalQueued(cb?: Callback<ProposalQueued>): EventEmitter
        ProposalQueued(options?: EventOptions, cb?: Callback<ProposalQueued>): EventEmitter

        ProposalThresholdSet(cb?: Callback<ProposalThresholdSet>): EventEmitter
        ProposalThresholdSet(options?: EventOptions, cb?: Callback<ProposalThresholdSet>): EventEmitter

        VoteCast(cb?: Callback<VoteCast>): EventEmitter
        VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter

        VotingDelaySet(cb?: Callback<VotingDelaySet>): EventEmitter
        VotingDelaySet(options?: EventOptions, cb?: Callback<VotingDelaySet>): EventEmitter

        VotingPeriodSet(cb?: Callback<VotingPeriodSet>): EventEmitter
        VotingPeriodSet(options?: EventOptions, cb?: Callback<VotingPeriodSet>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'NewAdmin', cb: Callback<NewAdmin>): void
    once(event: 'NewAdmin', options: EventOptions, cb: Callback<NewAdmin>): void

    once(event: 'NewGuardian', cb: Callback<NewGuardian>): void
    once(event: 'NewGuardian', options: EventOptions, cb: Callback<NewGuardian>): void

    once(event: 'NewImplementation', cb: Callback<NewImplementation>): void
    once(event: 'NewImplementation', options: EventOptions, cb: Callback<NewImplementation>): void

    once(event: 'NewPendingAdmin', cb: Callback<NewPendingAdmin>): void
    once(event: 'NewPendingAdmin', options: EventOptions, cb: Callback<NewPendingAdmin>): void

    once(event: 'ProposalCanceled', cb: Callback<ProposalCanceled>): void
    once(event: 'ProposalCanceled', options: EventOptions, cb: Callback<ProposalCanceled>): void

    once(event: 'ProposalCreated', cb: Callback<ProposalCreated>): void
    once(event: 'ProposalCreated', options: EventOptions, cb: Callback<ProposalCreated>): void

    once(event: 'ProposalExecuted', cb: Callback<ProposalExecuted>): void
    once(event: 'ProposalExecuted', options: EventOptions, cb: Callback<ProposalExecuted>): void

    once(event: 'ProposalQueued', cb: Callback<ProposalQueued>): void
    once(event: 'ProposalQueued', options: EventOptions, cb: Callback<ProposalQueued>): void

    once(event: 'ProposalThresholdSet', cb: Callback<ProposalThresholdSet>): void
    once(event: 'ProposalThresholdSet', options: EventOptions, cb: Callback<ProposalThresholdSet>): void

    once(event: 'VoteCast', cb: Callback<VoteCast>): void
    once(event: 'VoteCast', options: EventOptions, cb: Callback<VoteCast>): void

    once(event: 'VotingDelaySet', cb: Callback<VotingDelaySet>): void
    once(event: 'VotingDelaySet', options: EventOptions, cb: Callback<VotingDelaySet>): void

    once(event: 'VotingPeriodSet', cb: Callback<VotingPeriodSet>): void
    once(event: 'VotingPeriodSet', options: EventOptions, cb: Callback<VotingPeriodSet>): void
}
