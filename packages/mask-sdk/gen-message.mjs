import { readFile, writeFile } from 'node:fs/promises'
import { snakeCase } from 'lodash-es'

const message = await readFile(new URL('./shared/messages.txt', import.meta.url), 'utf-8')

let templateFile = `// This file is generated by ./messages.txt with ../gen-message.mjs. DO NOT EDIT this file.
import { MaskEthereumProviderRpcError, type MaskEthereumProviderRpcErrorOptions } from './error.js'
// prettier-ignore
export function fromMessage(message: string, options?: MaskEthereumProviderRpcErrorOptions): MaskEthereumProviderRpcError | undefined
// prettier-ignore
export function fromMessage(message: ErrorMessages, options?: MaskEthereumProviderRpcErrorOptions): MaskEthereumProviderRpcError
// prettier-ignore
export function fromMessage(message: string | ErrorMessages, options: MaskEthereumProviderRpcErrorOptions = {}): MaskEthereumProviderRpcError | undefined {
    // prettier-ignore
    return message in codeMap ? new MaskEthereumProviderRpcError((codeMap as any)[message], message, options) : undefined
}
`

let err = `// prettier-ignore
export const err = {
`
let messages = `// prettier-ignore
export enum ErrorMessages {
`
let codeMap = `// prettier-ignore
const codeMap = {
`

const format = /(?<code>-?\d+)\s+(?<method>\w+_\w+)?\s+(?<message>.+)/g
const interpolation = /\$\{(?<interpolation>\w+)\}/g
let lastTopic = undefined
for (const line of message.split('\n').sort()) {
    if (line === '' || line.startsWith('#')) continue
    format.lastIndex = 0
    const match = format.exec(line)
    if (!match) console.log(line)
    const { code, method, message } = match?.groups
    if (lastTopic !== method) {
        if (lastTopic) err += `    },\n`
        if (method) err += `    ${method}: {\n`
        lastTopic = method
    }
    const interpolations = []
    for (const i of String(message).matchAll(interpolation)) {
        interpolations.push(i.groups.interpolation)
    }

    const arg0 =
        interpolations.length ?
            `{ ${interpolations.join(', ')} }: Record<${interpolations.map(JSON.stringify).join(' | ')}, string>,`
        :   ''
    const messageArg = arg0 ? `\`${message}\`` : JSON.stringify(message)
    let indent = method ? `        ` : `    `
    err += `${indent}${snakeCase(message)}(${arg0}options: MaskEthereumProviderRpcErrorOptions = {}) {\n`
    err += `${indent}    return new MaskEthereumProviderRpcError(${code}, ${messageArg}, options)\n`
    err += `${indent}},\n`

    if (interpolations.length === 0) {
        const k = snakeCase(method ? `${method}_${message}` : message)
        const v = JSON.stringify(message)
        messages += `    ${k} = ${v},\n`
        codeMap += `    ${v}: ${code},\n`
    }
}
err += `}\n`
messages += `}\n`
codeMap += `}\n`

templateFile += messages + codeMap + err

await writeFile(new URL('./shared/error-generated.ts', import.meta.url), templateFile)
