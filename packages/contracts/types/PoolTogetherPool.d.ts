/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type AwardCaptured = ContractEventLog<{
    amount: string
    0: string
}>
export type Awarded = ContractEventLog<{
    winner: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>
export type AwardedExternalERC20 = ContractEventLog<{
    winner: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>
export type AwardedExternalERC721 = ContractEventLog<{
    winner: string
    token: string
    tokenIds: string[]
    0: string
    1: string
    2: string[]
}>
export type CompoundPrizePoolInitialized = ContractEventLog<{
    cToken: string
    0: string
}>
export type ControlledTokenAdded = ContractEventLog<{
    token: string
    0: string
}>
export type CreditBurned = ContractEventLog<{
    user: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>
export type CreditMinted = ContractEventLog<{
    user: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>
export type CreditPlanSet = ContractEventLog<{
    token: string
    creditLimitMantissa: string
    creditRateMantissa: string
    0: string
    1: string
    2: string
}>
export type Deposited = ContractEventLog<{
    operator: string
    to: string
    token: string
    amount: string
    referrer: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type Initialized = ContractEventLog<{
    trustedForwarder: string
    reserveRegistry: string
    maxExitFeeMantissa: string
    maxTimelockDuration: string
    0: string
    1: string
    2: string
    3: string
}>
export type InstantWithdrawal = ContractEventLog<{
    operator: string
    from: string
    token: string
    amount: string
    redeemed: string
    exitFee: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type LiquidityCapSet = ContractEventLog<{
    liquidityCap: string
    0: string
}>
export type OwnershipTransferred = ContractEventLog<{
    previousOwner: string
    newOwner: string
    0: string
    1: string
}>
export type PrizeStrategySet = ContractEventLog<{
    prizeStrategy: string
    0: string
}>
export type ReserveFeeCaptured = ContractEventLog<{
    amount: string
    0: string
}>
export type ReserveWithdrawal = ContractEventLog<{
    to: string
    amount: string
    0: string
    1: string
}>
export type TimelockDeposited = ContractEventLog<{
    operator: string
    to: string
    token: string
    amount: string
    0: string
    1: string
    2: string
    3: string
}>
export type TimelockedWithdrawal = ContractEventLog<{
    operator: string
    from: string
    token: string
    amount: string
    unlockTimestamp: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type TimelockedWithdrawalSwept = ContractEventLog<{
    operator: string
    from: string
    amount: string
    redeemed: string
    0: string
    1: string
    2: string
    3: string
}>
export type TransferredExternalERC20 = ContractEventLog<{
    to: string
    token: string
    amount: string
    0: string
    1: string
    2: string
}>

export interface PoolTogetherPool extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): PoolTogetherPool
    clone(): PoolTogetherPool
    methods: {
        accountedBalance(): NonPayableTransactionObject<string>

        addControlledToken(_controlledToken: string): NonPayableTransactionObject<void>

        award(to: string, amount: number | string | BN, controlledToken: string): NonPayableTransactionObject<void>

        awardBalance(): NonPayableTransactionObject<string>

        awardExternalERC20(
            to: string,
            externalToken: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        awardExternalERC721(
            to: string,
            externalToken: string,
            tokenIds: (number | string | BN)[],
        ): NonPayableTransactionObject<void>

        balance(): NonPayableTransactionObject<string>

        balanceOfCredit(user: string, controlledToken: string): NonPayableTransactionObject<string>

        beforeTokenTransfer(from: string, to: string, amount: number | string | BN): NonPayableTransactionObject<void>

        cToken(): NonPayableTransactionObject<string>

        calculateEarlyExitFee(
            from: string,
            controlledToken: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<{
            exitFee: string
            burnedCredit: string
            0: string
            1: string
        }>

        calculateReserveFee(amount: number | string | BN): NonPayableTransactionObject<string>

        calculateTimelockDuration(
            from: string,
            controlledToken: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<{
            durationSeconds: string
            burnedCredit: string
            0: string
            1: string
        }>

        canAwardExternal(_externalToken: string): NonPayableTransactionObject<boolean>

        captureAwardBalance(): NonPayableTransactionObject<string>

        creditPlanOf(controlledToken: string): NonPayableTransactionObject<{
            creditLimitMantissa: string
            creditRateMantissa: string
            0: string
            1: string
        }>

        depositTo(
            to: string,
            amount: number | string | BN,
            controlledToken: string,
            referrer: string,
        ): NonPayableTransactionObject<void>

        estimateCreditAccrualTime(
            _controlledToken: string,
            _principal: number | string | BN,
            _interest: number | string | BN,
        ): NonPayableTransactionObject<string>

        'initialize(address,address,address[],uint256,uint256)'(
            _trustedForwarder: string,
            _reserveRegistry: string,
            _controlledTokens: string[],
            _maxExitFeeMantissa: number | string | BN,
            _maxTimelockDuration: number | string | BN,
        ): NonPayableTransactionObject<void>

        'initialize(address,address,address[],uint256,uint256,address)'(
            _trustedForwarder: string,
            _reserveRegistry: string,
            _controlledTokens: string[],
            _maxExitFeeMantissa: number | string | BN,
            _maxTimelockDuration: number | string | BN,
            _cToken: string,
        ): NonPayableTransactionObject<void>

        isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>

        liquidityCap(): NonPayableTransactionObject<string>

        maxExitFeeMantissa(): NonPayableTransactionObject<string>

        maxTimelockDuration(): NonPayableTransactionObject<string>

        owner(): NonPayableTransactionObject<string>

        prizeStrategy(): NonPayableTransactionObject<string>

        renounceOwnership(): NonPayableTransactionObject<void>

        reserveRegistry(): NonPayableTransactionObject<string>

        reserveTotalSupply(): NonPayableTransactionObject<string>

        setCreditPlanOf(
            _controlledToken: string,
            _creditRateMantissa: number | string | BN,
            _creditLimitMantissa: number | string | BN,
        ): NonPayableTransactionObject<void>

        setLiquidityCap(_liquidityCap: number | string | BN): NonPayableTransactionObject<void>

        setPrizeStrategy(_prizeStrategy: string): NonPayableTransactionObject<void>

        sweepTimelockBalances(users: string[]): NonPayableTransactionObject<string>

        timelockBalanceAvailableAt(user: string): NonPayableTransactionObject<string>

        timelockBalanceOf(user: string): NonPayableTransactionObject<string>

        timelockDepositTo(
            to: string,
            amount: number | string | BN,
            controlledToken: string,
        ): NonPayableTransactionObject<void>

        timelockTotalSupply(): NonPayableTransactionObject<string>

        token(): NonPayableTransactionObject<string>

        tokens(): NonPayableTransactionObject<string[]>

        transferExternalERC20(
            to: string,
            externalToken: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<void>

        transferOwnership(newOwner: string): NonPayableTransactionObject<void>

        trustedForwarder(): NonPayableTransactionObject<string>

        versionRecipient(): NonPayableTransactionObject<string>

        withdrawInstantlyFrom(
            from: string,
            amount: number | string | BN,
            controlledToken: string,
            maximumExitFee: number | string | BN,
        ): NonPayableTransactionObject<string>

        withdrawReserve(to: string): NonPayableTransactionObject<string>

        withdrawWithTimelockFrom(
            from: string,
            amount: number | string | BN,
            controlledToken: string,
        ): NonPayableTransactionObject<string>
    }
    events: {
        AwardCaptured(cb?: Callback<AwardCaptured>): EventEmitter
        AwardCaptured(options?: EventOptions, cb?: Callback<AwardCaptured>): EventEmitter

        Awarded(cb?: Callback<Awarded>): EventEmitter
        Awarded(options?: EventOptions, cb?: Callback<Awarded>): EventEmitter

        AwardedExternalERC20(cb?: Callback<AwardedExternalERC20>): EventEmitter
        AwardedExternalERC20(options?: EventOptions, cb?: Callback<AwardedExternalERC20>): EventEmitter

        AwardedExternalERC721(cb?: Callback<AwardedExternalERC721>): EventEmitter
        AwardedExternalERC721(options?: EventOptions, cb?: Callback<AwardedExternalERC721>): EventEmitter

        CompoundPrizePoolInitialized(cb?: Callback<CompoundPrizePoolInitialized>): EventEmitter
        CompoundPrizePoolInitialized(options?: EventOptions, cb?: Callback<CompoundPrizePoolInitialized>): EventEmitter

        ControlledTokenAdded(cb?: Callback<ControlledTokenAdded>): EventEmitter
        ControlledTokenAdded(options?: EventOptions, cb?: Callback<ControlledTokenAdded>): EventEmitter

        CreditBurned(cb?: Callback<CreditBurned>): EventEmitter
        CreditBurned(options?: EventOptions, cb?: Callback<CreditBurned>): EventEmitter

        CreditMinted(cb?: Callback<CreditMinted>): EventEmitter
        CreditMinted(options?: EventOptions, cb?: Callback<CreditMinted>): EventEmitter

        CreditPlanSet(cb?: Callback<CreditPlanSet>): EventEmitter
        CreditPlanSet(options?: EventOptions, cb?: Callback<CreditPlanSet>): EventEmitter

        Deposited(cb?: Callback<Deposited>): EventEmitter
        Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter

        Initialized(cb?: Callback<Initialized>): EventEmitter
        Initialized(options?: EventOptions, cb?: Callback<Initialized>): EventEmitter

        InstantWithdrawal(cb?: Callback<InstantWithdrawal>): EventEmitter
        InstantWithdrawal(options?: EventOptions, cb?: Callback<InstantWithdrawal>): EventEmitter

        LiquidityCapSet(cb?: Callback<LiquidityCapSet>): EventEmitter
        LiquidityCapSet(options?: EventOptions, cb?: Callback<LiquidityCapSet>): EventEmitter

        OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
        OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter

        PrizeStrategySet(cb?: Callback<PrizeStrategySet>): EventEmitter
        PrizeStrategySet(options?: EventOptions, cb?: Callback<PrizeStrategySet>): EventEmitter

        ReserveFeeCaptured(cb?: Callback<ReserveFeeCaptured>): EventEmitter
        ReserveFeeCaptured(options?: EventOptions, cb?: Callback<ReserveFeeCaptured>): EventEmitter

        ReserveWithdrawal(cb?: Callback<ReserveWithdrawal>): EventEmitter
        ReserveWithdrawal(options?: EventOptions, cb?: Callback<ReserveWithdrawal>): EventEmitter

        TimelockDeposited(cb?: Callback<TimelockDeposited>): EventEmitter
        TimelockDeposited(options?: EventOptions, cb?: Callback<TimelockDeposited>): EventEmitter

        TimelockedWithdrawal(cb?: Callback<TimelockedWithdrawal>): EventEmitter
        TimelockedWithdrawal(options?: EventOptions, cb?: Callback<TimelockedWithdrawal>): EventEmitter

        TimelockedWithdrawalSwept(cb?: Callback<TimelockedWithdrawalSwept>): EventEmitter
        TimelockedWithdrawalSwept(options?: EventOptions, cb?: Callback<TimelockedWithdrawalSwept>): EventEmitter

        TransferredExternalERC20(cb?: Callback<TransferredExternalERC20>): EventEmitter
        TransferredExternalERC20(options?: EventOptions, cb?: Callback<TransferredExternalERC20>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'AwardCaptured', cb: Callback<AwardCaptured>): void
    once(event: 'AwardCaptured', options: EventOptions, cb: Callback<AwardCaptured>): void

    once(event: 'Awarded', cb: Callback<Awarded>): void
    once(event: 'Awarded', options: EventOptions, cb: Callback<Awarded>): void

    once(event: 'AwardedExternalERC20', cb: Callback<AwardedExternalERC20>): void
    once(event: 'AwardedExternalERC20', options: EventOptions, cb: Callback<AwardedExternalERC20>): void

    once(event: 'AwardedExternalERC721', cb: Callback<AwardedExternalERC721>): void
    once(event: 'AwardedExternalERC721', options: EventOptions, cb: Callback<AwardedExternalERC721>): void

    once(event: 'CompoundPrizePoolInitialized', cb: Callback<CompoundPrizePoolInitialized>): void
    once(event: 'CompoundPrizePoolInitialized', options: EventOptions, cb: Callback<CompoundPrizePoolInitialized>): void

    once(event: 'ControlledTokenAdded', cb: Callback<ControlledTokenAdded>): void
    once(event: 'ControlledTokenAdded', options: EventOptions, cb: Callback<ControlledTokenAdded>): void

    once(event: 'CreditBurned', cb: Callback<CreditBurned>): void
    once(event: 'CreditBurned', options: EventOptions, cb: Callback<CreditBurned>): void

    once(event: 'CreditMinted', cb: Callback<CreditMinted>): void
    once(event: 'CreditMinted', options: EventOptions, cb: Callback<CreditMinted>): void

    once(event: 'CreditPlanSet', cb: Callback<CreditPlanSet>): void
    once(event: 'CreditPlanSet', options: EventOptions, cb: Callback<CreditPlanSet>): void

    once(event: 'Deposited', cb: Callback<Deposited>): void
    once(event: 'Deposited', options: EventOptions, cb: Callback<Deposited>): void

    once(event: 'Initialized', cb: Callback<Initialized>): void
    once(event: 'Initialized', options: EventOptions, cb: Callback<Initialized>): void

    once(event: 'InstantWithdrawal', cb: Callback<InstantWithdrawal>): void
    once(event: 'InstantWithdrawal', options: EventOptions, cb: Callback<InstantWithdrawal>): void

    once(event: 'LiquidityCapSet', cb: Callback<LiquidityCapSet>): void
    once(event: 'LiquidityCapSet', options: EventOptions, cb: Callback<LiquidityCapSet>): void

    once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
    once(event: 'OwnershipTransferred', options: EventOptions, cb: Callback<OwnershipTransferred>): void

    once(event: 'PrizeStrategySet', cb: Callback<PrizeStrategySet>): void
    once(event: 'PrizeStrategySet', options: EventOptions, cb: Callback<PrizeStrategySet>): void

    once(event: 'ReserveFeeCaptured', cb: Callback<ReserveFeeCaptured>): void
    once(event: 'ReserveFeeCaptured', options: EventOptions, cb: Callback<ReserveFeeCaptured>): void

    once(event: 'ReserveWithdrawal', cb: Callback<ReserveWithdrawal>): void
    once(event: 'ReserveWithdrawal', options: EventOptions, cb: Callback<ReserveWithdrawal>): void

    once(event: 'TimelockDeposited', cb: Callback<TimelockDeposited>): void
    once(event: 'TimelockDeposited', options: EventOptions, cb: Callback<TimelockDeposited>): void

    once(event: 'TimelockedWithdrawal', cb: Callback<TimelockedWithdrawal>): void
    once(event: 'TimelockedWithdrawal', options: EventOptions, cb: Callback<TimelockedWithdrawal>): void

    once(event: 'TimelockedWithdrawalSwept', cb: Callback<TimelockedWithdrawalSwept>): void
    once(event: 'TimelockedWithdrawalSwept', options: EventOptions, cb: Callback<TimelockedWithdrawalSwept>): void

    once(event: 'TransferredExternalERC20', cb: Callback<TransferredExternalERC20>): void
    once(event: 'TransferredExternalERC20', options: EventOptions, cb: Callback<TransferredExternalERC20>): void
}
