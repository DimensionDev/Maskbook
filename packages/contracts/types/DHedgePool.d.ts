/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
    Callback,
    PayableTransactionObject,
    NonPayableTransactionObject,
    BlockType,
    ContractEventLog,
    BaseContract,
} from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type Approval = ContractEventLog<{
    owner: string
    spender: string
    value: string
    0: string
    1: string
    2: string
}>
export type AssetAdded = ContractEventLog<{
    fundAddress: string
    manager: string
    assetKey: string
    0: string
    1: string
    2: string
}>
export type AssetRemoved = ContractEventLog<{
    fundAddress: string
    manager: string
    assetKey: string
    0: string
    1: string
    2: string
}>
export type Deposit = ContractEventLog<{
    fundAddress: string
    investor: string
    valueDeposited: string
    fundTokensReceived: string
    totalInvestorFundTokens: string
    fundValue: string
    totalSupply: string
    time: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
}>
export type Exchange = ContractEventLog<{
    fundAddress: string
    manager: string
    sourceKey: string
    sourceAmount: string
    destinationKey: string
    destinationAmount: string
    time: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
}>
export type ManagerFeeMinted = ContractEventLog<{
    pool: string
    manager: string
    available: string
    daoFee: string
    managerFee: string
    tokenPriceAtLastFeeMint: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
}>
export type ManagerFeeSet = ContractEventLog<{
    fundAddress: string
    manager: string
    numerator: string
    denominator: string
    0: string
    1: string
    2: string
    3: string
}>
export type ManagerUpdated = ContractEventLog<{
    newManager: string
    newManagerName: string
    0: string
    1: string
}>
export type PoolPrivacyUpdated = ContractEventLog<{
    isPoolPrivate: boolean
    0: boolean
}>
export type Transfer = ContractEventLog<{
    from: string
    to: string
    value: string
    0: string
    1: string
    2: string
}>
export type Withdrawal = ContractEventLog<{
    fundAddress: string
    investor: string
    valueWithdrawn: string
    fundTokensWithdrawn: string
    totalInvestorFundTokens: string
    fundValue: string
    totalSupply: string
    time: string
    0: string
    1: string
    2: string
    3: string
    4: string
    5: string
    6: string
    7: string
}>

export interface DHedgePool extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): DHedgePool
    clone(): DHedgePool
    methods: {
        addMember(member: string): NonPayableTransactionObject<void>

        addMembers(members: string[]): NonPayableTransactionObject<void>

        addressResolver(): NonPayableTransactionObject<string>

        allowance(owner: string, spender: string): NonPayableTransactionObject<string>

        approve(spender: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        assetPosition(arg0: string | number[]): NonPayableTransactionObject<string>

        balanceOf(account: string): NonPayableTransactionObject<string>

        changeManager(newManager: string, newManagerName: string): NonPayableTransactionObject<void>

        creationTime(): NonPayableTransactionObject<string>

        creator(): NonPayableTransactionObject<string>

        decimals(): NonPayableTransactionObject<string>

        decreaseAllowance(spender: string, subtractedValue: number | string | BN): NonPayableTransactionObject<boolean>

        factory(): NonPayableTransactionObject<string>

        getMembers(): NonPayableTransactionObject<string[]>

        increaseAllowance(spender: string, addedValue: number | string | BN): NonPayableTransactionObject<boolean>

        isMemberAllowed(member: string): NonPayableTransactionObject<boolean>

        lastDeposit(arg0: string): NonPayableTransactionObject<string>

        manager(): NonPayableTransactionObject<string>

        managerName(): NonPayableTransactionObject<string>

        name(): NonPayableTransactionObject<string>

        numberOfMembers(): NonPayableTransactionObject<string>

        persistentAsset(arg0: string | number[]): NonPayableTransactionObject<boolean>

        privatePool(): NonPayableTransactionObject<boolean>

        removeMember(member: string): NonPayableTransactionObject<void>

        removeMembers(members: string[]): NonPayableTransactionObject<void>

        supportedAssets(arg0: number | string | BN): NonPayableTransactionObject<string>

        symbol(): NonPayableTransactionObject<string>

        tokenPriceAtLastFeeMint(): NonPayableTransactionObject<string>

        totalSupply(): NonPayableTransactionObject<string>

        transfer(recipient: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

        transferFrom(
            sender: string,
            recipient: string,
            amount: number | string | BN,
        ): NonPayableTransactionObject<boolean>

        initialize(
            _factory: string,
            _privatePool: boolean,
            _manager: string,
            _managerName: string,
            _fundName: string,
            _addressResolver: string,
            _supportedAssets: (string | number[])[],
        ): NonPayableTransactionObject<void>

        setPoolPrivate(_privatePool: boolean): NonPayableTransactionObject<void>

        getAssetProxy(key: string | number[]): NonPayableTransactionObject<string>

        isAssetSupported(key: string | number[]): NonPayableTransactionObject<boolean>

        validateAsset(key: string | number[]): NonPayableTransactionObject<boolean>

        addToSupportedAssets(key: string | number[]): NonPayableTransactionObject<void>

        removeFromSupportedAssets(key: string | number[]): NonPayableTransactionObject<void>

        numberOfSupportedAssets(): NonPayableTransactionObject<string>

        exchange(
            sourceKey: string | number[],
            sourceAmount: number | string | BN,
            destinationKey: string | number[],
        ): NonPayableTransactionObject<void>

        totalFundValue(): NonPayableTransactionObject<string>

        assetValue(key: string | number[]): NonPayableTransactionObject<string>

        deposit(_susdAmount: number | string | BN): NonPayableTransactionObject<string>

        withdraw(_fundTokenAmount: number | string | BN): NonPayableTransactionObject<void>

        forfeitSuspendedSynthsAndWithdraw(_fundTokenAmount: number | string | BN): NonPayableTransactionObject<void>

        getFundSummary(): NonPayableTransactionObject<{
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: boolean
            7: string
            8: string
            9: string
            10: string
        }>

        getSupportedAssets(): NonPayableTransactionObject<string[]>

        getFundComposition(): NonPayableTransactionObject<{
            0: string[]
            1: string[]
            2: string[]
        }>

        getWaitingPeriods(): NonPayableTransactionObject<{
            0: string[]
            1: string[]
        }>

        getSuspendedAssets(): NonPayableTransactionObject<{
            0: string[]
            1: boolean[]
        }>

        tokenPrice(): NonPayableTransactionObject<string>

        availableManagerFee(): NonPayableTransactionObject<string>

        mintManagerFee(): NonPayableTransactionObject<void>

        getManagerFee(): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        setManagerFeeNumerator(numerator: number | string | BN): NonPayableTransactionObject<void>

        getExitFee(): NonPayableTransactionObject<{
            0: string
            1: string
        }>

        getExitFeeCooldown(): NonPayableTransactionObject<string>

        getExitFeeRemainingCooldown(sender: string): NonPayableTransactionObject<string>
    }
    events: {
        Approval(cb?: Callback<Approval>): EventEmitter
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter

        AssetAdded(cb?: Callback<AssetAdded>): EventEmitter
        AssetAdded(options?: EventOptions, cb?: Callback<AssetAdded>): EventEmitter

        AssetRemoved(cb?: Callback<AssetRemoved>): EventEmitter
        AssetRemoved(options?: EventOptions, cb?: Callback<AssetRemoved>): EventEmitter

        Deposit(cb?: Callback<Deposit>): EventEmitter
        Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

        Exchange(cb?: Callback<Exchange>): EventEmitter
        Exchange(options?: EventOptions, cb?: Callback<Exchange>): EventEmitter

        ManagerFeeMinted(cb?: Callback<ManagerFeeMinted>): EventEmitter
        ManagerFeeMinted(options?: EventOptions, cb?: Callback<ManagerFeeMinted>): EventEmitter

        ManagerFeeSet(cb?: Callback<ManagerFeeSet>): EventEmitter
        ManagerFeeSet(options?: EventOptions, cb?: Callback<ManagerFeeSet>): EventEmitter

        ManagerUpdated(cb?: Callback<ManagerUpdated>): EventEmitter
        ManagerUpdated(options?: EventOptions, cb?: Callback<ManagerUpdated>): EventEmitter

        PoolPrivacyUpdated(cb?: Callback<PoolPrivacyUpdated>): EventEmitter
        PoolPrivacyUpdated(options?: EventOptions, cb?: Callback<PoolPrivacyUpdated>): EventEmitter

        Transfer(cb?: Callback<Transfer>): EventEmitter
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter

        Withdrawal(cb?: Callback<Withdrawal>): EventEmitter
        Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'Approval', cb: Callback<Approval>): void
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void

    once(event: 'AssetAdded', cb: Callback<AssetAdded>): void
    once(event: 'AssetAdded', options: EventOptions, cb: Callback<AssetAdded>): void

    once(event: 'AssetRemoved', cb: Callback<AssetRemoved>): void
    once(event: 'AssetRemoved', options: EventOptions, cb: Callback<AssetRemoved>): void

    once(event: 'Deposit', cb: Callback<Deposit>): void
    once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

    once(event: 'Exchange', cb: Callback<Exchange>): void
    once(event: 'Exchange', options: EventOptions, cb: Callback<Exchange>): void

    once(event: 'ManagerFeeMinted', cb: Callback<ManagerFeeMinted>): void
    once(event: 'ManagerFeeMinted', options: EventOptions, cb: Callback<ManagerFeeMinted>): void

    once(event: 'ManagerFeeSet', cb: Callback<ManagerFeeSet>): void
    once(event: 'ManagerFeeSet', options: EventOptions, cb: Callback<ManagerFeeSet>): void

    once(event: 'ManagerUpdated', cb: Callback<ManagerUpdated>): void
    once(event: 'ManagerUpdated', options: EventOptions, cb: Callback<ManagerUpdated>): void

    once(event: 'PoolPrivacyUpdated', cb: Callback<PoolPrivacyUpdated>): void
    once(event: 'PoolPrivacyUpdated', options: EventOptions, cb: Callback<PoolPrivacyUpdated>): void

    once(event: 'Transfer', cb: Callback<Transfer>): void
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void

    once(event: 'Withdrawal', cb: Callback<Withdrawal>): void
    once(event: 'Withdrawal', options: EventOptions, cb: Callback<Withdrawal>): void
}
