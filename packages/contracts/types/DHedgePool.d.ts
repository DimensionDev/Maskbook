/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export class DHedgePool extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
    clone(): DHedgePool
    methods: {
        addMember(member: string): TransactionObject<void>

        addMembers(members: string[]): TransactionObject<void>

        addressResolver(): TransactionObject<string>

        allowance(owner: string, spender: string): TransactionObject<string>

        approve(spender: string, amount: number | string): TransactionObject<boolean>

        assetPosition(arg0: string | number[]): TransactionObject<string>

        balanceOf(account: string): TransactionObject<string>

        changeManager(newManager: string, newManagerName: string): TransactionObject<void>

        creationTime(): TransactionObject<string>

        creator(): TransactionObject<string>

        decimals(): TransactionObject<string>

        decreaseAllowance(spender: string, subtractedValue: number | string): TransactionObject<boolean>

        factory(): TransactionObject<string>

        getMembers(): TransactionObject<string[]>

        increaseAllowance(spender: string, addedValue: number | string): TransactionObject<boolean>

        isMemberAllowed(member: string): TransactionObject<boolean>

        lastDeposit(arg0: string): TransactionObject<string>

        manager(): TransactionObject<string>

        managerName(): TransactionObject<string>

        name(): TransactionObject<string>

        numberOfMembers(): TransactionObject<string>

        persistentAsset(arg0: string | number[]): TransactionObject<boolean>

        privatePool(): TransactionObject<boolean>

        removeMember(member: string): TransactionObject<void>

        removeMembers(members: string[]): TransactionObject<void>

        supportedAssets(arg0: number | string): TransactionObject<string>

        symbol(): TransactionObject<string>

        tokenPriceAtLastFeeMint(): TransactionObject<string>

        totalSupply(): TransactionObject<string>

        transfer(recipient: string, amount: number | string): TransactionObject<boolean>

        transferFrom(sender: string, recipient: string, amount: number | string): TransactionObject<boolean>

        initialize(
            _factory: string,
            _privatePool: boolean,
            _manager: string,
            _managerName: string,
            _fundName: string,
            _addressResolver: string,
            _supportedAssets: (string | number[])[],
        ): TransactionObject<void>

        setPoolPrivate(_privatePool: boolean): TransactionObject<void>

        getAssetProxy(key: string | number[]): TransactionObject<string>

        isAssetSupported(key: string | number[]): TransactionObject<boolean>

        validateAsset(key: string | number[]): TransactionObject<boolean>

        addToSupportedAssets(key: string | number[]): TransactionObject<void>

        removeFromSupportedAssets(key: string | number[]): TransactionObject<void>

        numberOfSupportedAssets(): TransactionObject<string>

        exchange(
            sourceKey: string | number[],
            sourceAmount: number | string,
            destinationKey: string | number[],
        ): TransactionObject<void>

        totalFundValue(): TransactionObject<string>

        assetValue(key: string | number[]): TransactionObject<string>

        deposit(_susdAmount: number | string): TransactionObject<string>

        withdraw(_fundTokenAmount: number | string): TransactionObject<void>

        forfeitSuspendedSynthsAndWithdraw(_fundTokenAmount: number | string): TransactionObject<void>

        getFundSummary(): TransactionObject<{
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: boolean
            7: string
            8: string
            9: string
            10: string
        }>

        getSupportedAssets(): TransactionObject<string[]>

        getFundComposition(): TransactionObject<{
            0: string[]
            1: string[]
            2: string[]
        }>

        getWaitingPeriods(): TransactionObject<{
            0: string[]
            1: string[]
        }>

        getSuspendedAssets(): TransactionObject<{
            0: string[]
            1: boolean[]
        }>

        tokenPrice(): TransactionObject<string>

        availableManagerFee(): TransactionObject<string>

        mintManagerFee(): TransactionObject<void>

        getManagerFee(): TransactionObject<{
            0: string
            1: string
        }>

        setManagerFeeNumerator(numerator: number | string): TransactionObject<void>

        getExitFee(): TransactionObject<{
            0: string
            1: string
        }>

        getExitFeeCooldown(): TransactionObject<string>

        getExitFeeRemainingCooldown(sender: string): TransactionObject<string>
    }
    events: {
        Approval: ContractEvent<{
            owner: string
            spender: string
            value: string
            0: string
            1: string
            2: string
        }>
        AssetAdded: ContractEvent<{
            fundAddress: string
            manager: string
            assetKey: string
            0: string
            1: string
            2: string
        }>
        AssetRemoved: ContractEvent<{
            fundAddress: string
            manager: string
            assetKey: string
            0: string
            1: string
            2: string
        }>
        Deposit: ContractEvent<{
            fundAddress: string
            investor: string
            valueDeposited: string
            fundTokensReceived: string
            totalInvestorFundTokens: string
            fundValue: string
            totalSupply: string
            time: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: string
            7: string
        }>
        Exchange: ContractEvent<{
            fundAddress: string
            manager: string
            sourceKey: string
            sourceAmount: string
            destinationKey: string
            destinationAmount: string
            time: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: string
        }>
        ManagerFeeMinted: ContractEvent<{
            pool: string
            manager: string
            available: string
            daoFee: string
            managerFee: string
            tokenPriceAtLastFeeMint: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
        }>
        ManagerFeeSet: ContractEvent<{
            fundAddress: string
            manager: string
            numerator: string
            denominator: string
            0: string
            1: string
            2: string
            3: string
        }>
        ManagerUpdated: ContractEvent<{
            newManager: string
            newManagerName: string
            0: string
            1: string
        }>
        PoolPrivacyUpdated: ContractEvent<boolean>
        Transfer: ContractEvent<{
            from: string
            to: string
            value: string
            0: string
            1: string
            2: string
        }>
        Withdrawal: ContractEvent<{
            fundAddress: string
            investor: string
            valueWithdrawn: string
            fundTokensWithdrawn: string
            totalInvestorFundTokens: string
            fundValue: string
            totalSupply: string
            time: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
            6: string
            7: string
        }>
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
    }
}
