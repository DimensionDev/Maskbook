/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export class Qualification extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
    clone(): Qualification
    methods: {
        get_creation_time(): TransactionObject<string>

        get_name(): TransactionObject<string>

        get_start_time(): TransactionObject<string>

        ifQualified(arg0: string): TransactionObject<boolean>

        logQualified(account: string, ito_start_time: number | string): TransactionObject<boolean>

        set_start_time(_start_time: number | string): TransactionObject<void>

        supportsInterface(interfaceId: string | number[]): TransactionObject<boolean>
    }
    events: {
        Qualification: ContractEvent<{
            account: string
            qualified: boolean
            blockNumber: string
            timestamp: string
            0: string
            1: boolean
            2: string
            3: string
        }>
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
    }
}
