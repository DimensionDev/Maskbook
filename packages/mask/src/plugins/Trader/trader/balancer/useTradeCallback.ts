import { useAsyncFn } from 'react-use'
import { toHex } from 'web3-utils'
import type { ExchangeProxy } from '@masknet/web3-contracts/types/ExchangeProxy.js'
import { type GasConfig, useTraderConstants, ContractTransaction } from '@masknet/web3-shared-evm'
import { useChainContext, useNetworkContext, useWeb3Others } from '@masknet/web3-hooks-base'
import { NetworkPluginID } from '@masknet/shared-base'
import { Web3 } from '@masknet/web3-providers'
import { SLIPPAGE_DEFAULT } from '../../constants/index.js'
import { type SwapResponse, type TradeComputed, TradeStrategy } from '../../types/index.js'
import { useTradeAmount } from './useTradeAmount.js'
import { useSwapErrorCallback } from '../../SNSAdaptor/trader/hooks/useSwapErrorCallback.js'

export function useTradeCallback(
    trade: TradeComputed<SwapResponse> | null,
    exchangeProxyContract: ExchangeProxy | null,
    allowedSlippage = SLIPPAGE_DEFAULT,
    gasConfig?: GasConfig,
) {
    const notifyError = useSwapErrorCallback()
    const { account, chainId } = useChainContext<NetworkPluginID.PLUGIN_EVM>()
    const { pluginID } = useNetworkContext()
    const Others = useWeb3Others()
    const { BALANCER_ETH_ADDRESS } = useTraderConstants(chainId)
    const tradeAmount = useTradeAmount(trade, allowedSlippage)

    return useAsyncFn(async () => {
        if (
            !trade?.inputToken ||
            !trade?.outputToken ||
            !exchangeProxyContract ||
            !BALANCER_ETH_ADDRESS ||
            pluginID !== NetworkPluginID.PLUGIN_EVM
        ) {
            return
        }

        const {
            swaps: [swaps],
        } = trade.trade_ as SwapResponse

        // cast the type to ignore the different type which was generated by typechain
        const swap_: Parameters<ExchangeProxy['methods']['multihopBatchSwapExactIn']>[0] = swaps.map((x) =>
            x.map(
                (y) =>
                    [
                        y.pool,
                        y.tokenIn,
                        y.tokenOut,
                        y.swapAmount,
                        y.limitReturnAmount,
                        y.maxPrice, // uint maxPrice
                    ] as [string, string, string, string, string, string],
            ),
        )

        // balancer use a different address for the native token
        const inputTokenAddress = Others.isNativeTokenSchemaType(trade.inputToken.schema)
            ? BALANCER_ETH_ADDRESS
            : trade.inputToken.address
        const outputTokenAddress = Others.isNativeTokenSchemaType(trade.outputToken.schema)
            ? BALANCER_ETH_ADDRESS
            : trade.outputToken.address

        // trade with the native token
        let transactionValue = '0'
        if (trade.strategy === TradeStrategy.ExactIn && Others.isNativeTokenSchemaType(trade.inputToken.schema))
            transactionValue = trade.inputAmount.toFixed()
        else if (trade.strategy === TradeStrategy.ExactOut && Others.isNativeTokenSchemaType(trade.outputToken.schema))
            transactionValue = trade.outputAmount.toFixed()

        try {
            // send transaction and wait for hash
            const tx = await new ContractTransaction(exchangeProxyContract).fillAll(
                trade.strategy === TradeStrategy.ExactIn
                    ? exchangeProxyContract.methods.multihopBatchSwapExactIn(
                          swap_,
                          inputTokenAddress,
                          outputTokenAddress,
                          trade.inputAmount.toFixed(),
                          tradeAmount.toFixed(),
                      )
                    : exchangeProxyContract.methods.multihopBatchSwapExactOut(
                          swap_,
                          inputTokenAddress,
                          outputTokenAddress,
                          tradeAmount.toFixed(),
                      ),
                {
                    from: account,
                    value: toHex(transactionValue),
                    ...gasConfig,
                },
            )
            // send transaction and wait for hash
            const hash = await Web3.sendTransaction(tx, { chainId, overrides: { ...gasConfig } })
            const receipt = await Web3.getTransactionReceipt(hash)

            if (!receipt?.status) return
            return receipt?.transactionHash
        } catch (error) {
            if (error instanceof Error) {
                notifyError(error.message)
            }
            return
        }
    }, [chainId, trade, tradeAmount, exchangeProxyContract, BALANCER_ETH_ADDRESS, pluginID, notifyError, Others])
}
