import type { ExchangeProxy } from '@masknet/web3-contracts/types/ExchangeProxy'
import type { PayableTx } from '@masknet/web3-contracts/types/types'
import { SchemaType, GasOptionConfig, TransactionEventType, useTraderConstants } from '@masknet/web3-shared-evm'
import { useAsyncFn } from 'react-use'
import { SLIPPAGE_DEFAULT } from '../../constants'
import { SwapResponse, TradeComputed, TradeStrategy } from '../../types'
import { TargetChainIdContext } from '@masknet/plugin-infra/web3-evm'
import { useAccount } from '@masknet/plugin-infra/web3'
import { NetworkPluginID } from '@masknet/web3-shared-base'
import { useTradeAmount } from './useTradeAmount'

export function useTradeCallback(
    trade: TradeComputed<SwapResponse> | null,
    exchangeProxyContract: ExchangeProxy | null,
    allowedSlippage = SLIPPAGE_DEFAULT,
    gasConfig?: GasOptionConfig,
) {
    const account = useAccount(NetworkPluginID.PLUGIN_EVM)
    const { targetChainId: chainId } = TargetChainIdContext.useContainer()
    const { BALANCER_ETH_ADDRESS } = useTraderConstants(chainId)

    const tradeAmount = useTradeAmount(trade, allowedSlippage)

    return useAsyncFn(async () => {
        if (!trade || !trade.inputToken || !trade.outputToken || !exchangeProxyContract || !BALANCER_ETH_ADDRESS) {
            return
        }

        const {
            swaps: [swaps],
        } = trade.trade_ as SwapResponse

        // cast the type to ignore the different type which was generated by typechain
        const swap_: Parameters<ExchangeProxy['methods']['multihopBatchSwapExactIn']>[0] = swaps.map((x) =>
            x.map(
                (y) =>
                    [
                        y.pool, // address pool
                        y.tokenIn, // address tokenIn
                        y.tokenOut, // address tokenOut
                        y.swapAmount, // uint swapAmount
                        y.limitReturnAmount, // uint limitReturnAmount
                        y.maxPrice, // uint maxPrice
                    ] as [string, string, string, string, string, string],
            ),
        )

        // balancer use a different address for the native token
        const inputTokenAddress =
            trade.inputToken.schema === SchemaType.Native ? BALANCER_ETH_ADDRESS : trade.inputToken.address
        const outputTokenAddress =
            trade.outputToken.schema === SchemaType.Native ? BALANCER_ETH_ADDRESS : trade.outputToken.address

        const tx =
            trade.strategy === TradeStrategy.ExactIn
                ? exchangeProxyContract.methods.multihopBatchSwapExactIn(
                      swap_,
                      inputTokenAddress,
                      outputTokenAddress,
                      trade.inputAmount.toFixed(),
                      tradeAmount.toFixed(),
                  )
                : exchangeProxyContract.methods.multihopBatchSwapExactOut(
                      swap_,
                      inputTokenAddress,
                      outputTokenAddress,
                      tradeAmount.toFixed(),
                  )

        // trade with the native token
        let transactionValue = '0'
        if (trade.strategy === TradeStrategy.ExactIn && trade.inputToken.schema === SchemaType.Native)
            transactionValue = trade.inputAmount.toFixed()
        else if (trade.strategy === TradeStrategy.ExactOut && trade.outputToken.schema === SchemaType.Native)
            transactionValue = trade.outputAmount.toFixed()

        // send transaction and wait for hash
        const config = {
            from: account,
            gas: await tx
                .estimateGas({
                    from: account,
                    value: transactionValue,
                })
                .catch((error: Error) => {
                    throw error
                }),
            value: transactionValue,
            ...gasConfig,
        }

        // send transaction and wait for hash
        return new Promise<string>((resolve, reject) => {
            tx.send(config as PayableTx)
                .on(TransactionEventType.CONFIRMATION, (_, receipt) => {
                    resolve(receipt.transactionHash)
                })
                .on(TransactionEventType.ERROR, (error) => {
                    reject(error)
                })
        })
    }, [chainId, trade, tradeAmount, exchangeProxyContract, BALANCER_ETH_ADDRESS])
}
