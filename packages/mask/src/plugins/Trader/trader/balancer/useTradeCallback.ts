import type { ExchangeProxy } from '@masknet/web3-contracts/types/ExchangeProxy'
import { SchemaType, GasOptionConfig, useTraderConstants, encodeContractTransaction } from '@masknet/web3-shared-evm'
import { useAsyncFn } from 'react-use'
import { SLIPPAGE_DEFAULT } from '../../constants/index.js'
import { SwapResponse, TradeComputed, TradeStrategy } from '../../types/index.js'
import { useAccount, useChainId, useWeb3Connection } from '@masknet/plugin-infra/web3'
import { NetworkPluginID } from '@masknet/web3-shared-base'
import { useTradeAmount } from './useTradeAmount.js'

export function useTradeCallback(
    trade: TradeComputed<SwapResponse> | null,
    exchangeProxyContract: ExchangeProxy | null,
    allowedSlippage = SLIPPAGE_DEFAULT,
    gasConfig?: GasOptionConfig,
) {
    const account = useAccount(NetworkPluginID.PLUGIN_EVM)
    const chainId = useChainId(NetworkPluginID.PLUGIN_EVM)
    const { BALANCER_ETH_ADDRESS } = useTraderConstants(chainId)
    const connection = useWeb3Connection()
    const tradeAmount = useTradeAmount(trade, allowedSlippage)

    return useAsyncFn(async () => {
        if (
            !connection ||
            !trade ||
            !trade.inputToken ||
            !trade.outputToken ||
            !exchangeProxyContract ||
            !BALANCER_ETH_ADDRESS
        ) {
            return
        }

        const {
            swaps: [swaps],
        } = trade.trade_ as SwapResponse

        // cast the type to ignore the different type which was generated by typechain
        const swap_: Parameters<ExchangeProxy['methods']['multihopBatchSwapExactIn']>[0] = swaps.map((x) =>
            x.map(
                (y) =>
                    [
                        y.pool,
                        y.tokenIn,
                        y.tokenOut,
                        y.swapAmount,
                        y.limitReturnAmount,
                        y.maxPrice, // uint maxPrice
                    ] as [string, string, string, string, string, string],
            ),
        )

        // balancer use a different address for the native token
        const inputTokenAddress =
            trade.inputToken.schema === SchemaType.Native ? BALANCER_ETH_ADDRESS : trade.inputToken.address
        const outputTokenAddress =
            trade.outputToken.schema === SchemaType.Native ? BALANCER_ETH_ADDRESS : trade.outputToken.address

        // trade with the native token
        let transactionValue = '0'
        if (trade.strategy === TradeStrategy.ExactIn && trade.inputToken.schema === SchemaType.Native)
            transactionValue = trade.inputAmount.toFixed()
        else if (trade.strategy === TradeStrategy.ExactOut && trade.outputToken.schema === SchemaType.Native)
            transactionValue = trade.outputAmount.toFixed()

        // send transaction and wait for hash
        const config = {
            from: account,
            value: transactionValue,
            ...gasConfig,
        }

        const tx = await encodeContractTransaction(
            exchangeProxyContract,
            trade.strategy === TradeStrategy.ExactIn
                ? exchangeProxyContract.methods.multihopBatchSwapExactIn(
                      swap_,
                      inputTokenAddress,
                      outputTokenAddress,
                      trade.inputAmount.toFixed(),
                      tradeAmount.toFixed(),
                  )
                : exchangeProxyContract.methods.multihopBatchSwapExactOut(
                      swap_,
                      inputTokenAddress,
                      outputTokenAddress,
                      tradeAmount.toFixed(),
                  ),
            config,
        )

        // send transaction and wait for hash
        const hash = await connection.sendTransaction(tx)
        const receipt = await connection.getTransactionReceipt(hash)

        return receipt?.transactionHash
    }, [chainId, trade, tradeAmount, exchangeProxyContract, BALANCER_ETH_ADDRESS, connection])
}
