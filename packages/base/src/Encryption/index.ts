export enum DecryptProgressKind {
    Success = 'success',
    Error = 'error',
    Info = 'info',
    Progress = 'progress',
}

// TODO: rename as DecryptErrorReasons
export enum DecryptErrorReasons {
    PayloadBroken = '[@masknet/encryption] Payload is broken.',
    PayloadDecryptedButTypedMessageBroken = "[@masknet/encryption] Payload decrypted, but it's inner TypedMessage is broken.",
    CannotDecryptAsAuthor = '[@masknet/encryption] Failed decrypt as the author of this payload.',
    DecryptFailed = '[@masknet/encryption] Post key found, but decryption failed.',
    AuthorPublicKeyNotFound = "[@masknet/encryption] Cannot found author's public key",
    PrivateKeyNotFound = '[@masknet/encryption] Cannot continue to decrypt because there is no private key found.',
    NotShareTarget = '[@masknet/encryption] No valid key is found. Likely this post is not shared with you',
    // Not used in this library.
    UnrecognizedAuthor = '[@masknet/encryption] No author is recognized which is required for the image steganography decoding.',
    CurrentProfileDoesNotConnectedToPersona = '[@masknet/encryption] Cannot decrypt by E2E because no persona is linked with the current profile.',
    NoPayloadFound = '[@masknet/encryption] No payload found in this material.',
}
export class DecryptError extends Error {
    static Reasons = DecryptErrorReasons
    readonly type = DecryptProgressKind.Error
    constructor(
        public override message: DecryptErrorReasons,
        cause: any,
        public recoverable = false,
    ) {
        super(message, { cause })
    }
}

export enum EncryptErrorReasons {
    ComplexTypedMessageNotSupportedInPayload38 = '[@masknet/encryption] Complex TypedMessage is not supported in payload v38.',
    PublicKeyNotFound = '[@masknet/encryption] Target public key not found.',
    AESKeyUsageError = "[@masknet/encryption] AES key generated by IO doesn't have the correct usages or extractable property.",
}

export class EncryptError extends Error {
    static Reasons = EncryptErrorReasons
    constructor(
        public override message: EncryptErrorReasons,
        cause?: any,
    ) {
        super(message, { cause })
    }
}
