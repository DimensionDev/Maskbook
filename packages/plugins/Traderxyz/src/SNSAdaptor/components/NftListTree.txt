// /* eslint-disable no-restricted-imports */
// /* eslint-disable spaced-comment */
// /* eslint-disable eqeqeq */
// /* eslint-disable @typescript-eslint/no-explicit-any */
import { alpha } from '@mui/material/styles'
import { styled } from '@mui/material/styles'
import TreeItem, { TreeItemProps, treeItemClasses } from '@mui/lab/TreeItem'
import TreeChildContent from './TreeChildContent'
import TreeChildItemContent from './TreeChildItemContent'
import TreeParentContent from './TreeParentContent'
import type { TreeNftData } from '../../types'


export const CustomTreeParent = styled(
    (props: TreeItemProps & { ContentProps?: { previewImages: string[] | null | undefined } }) => (
        <TreeItem {...props} ContentComponent={TreeParentContent} />
    ),
)(({ theme }) => ({
    [`& .${treeItemClasses.label}`]: {
        paddingLeft: 15,
    },
    [`& .${treeItemClasses.iconContainer}`]: {
        '& .close': {
            opacity: 0.3,
        },
    },
    [`& .${treeItemClasses.group}`]: {
        marginLeft: 15,
        paddingLeft: 18,
        borderLeft: `1px solid ${alpha(theme.palette.text.primary, 0.4)}`,
    },
}))

export const CustomTreeChild = styled((props: TreeItemProps & { ContentProps?: { collectionImage: string } }) => (
    <TreeItem {...props} ContentComponent={TreeChildContent} />
))(({ theme }) => ({
    [`& .${treeItemClasses.iconContainer}`]: {
        '& .close': {
            opacity: 0.3,
        },
    },
    [`& .${treeItemClasses.group}`]: {
        marginLeft: 15,
        paddingLeft: 18,
        borderLeft: `1px solid ${alpha(theme.palette.text.primary, 0.4)}`,
    },
}))

export const MyComponent = styled('div')({
    color: 'darkslategray',
    backgroundColor: 'aliceblue',
    padding: 8,
    borderRadius: 4,
})

export const CustomTreeChildItem = styled(
    (
        props: TreeItemProps & {
            ContentProps?: {
                // nftData?: TreeNftData
                // handleSelection(collection_index: number, item_index: number): void
                nftData?: TreeNftData
                handleSelection?(collection_index: number, item_index: number, type: string): void
            }
            className: string
        },
    ) => <TreeItem {...props} className={props.className} ContentComponent={TreeChildItemContent} />,
)(({ theme }) => ({
    [`& .${treeItemClasses.iconContainer}`]: {
        '& .close': {
            opacity: 0.3,
        },
    },
    [`& .${treeItemClasses.group}`]: {
        marginLeft: 15,
        paddingLeft: 18,
        borderLeft: `1px solid ${alpha(theme.palette.text.primary, 0.4)}`,
    },
}))
