/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { Callback, PayableTransactionObject, NonPayableTransactionObject, BlockType, ContractEventLog } from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export type CreationSuccess = ContractEventLog<{
    total_token: string
    id: string
    creator: string
    creation_time: string
    token_address: string
    0: string
    1: string
    2: string
    3: string
    4: string
}>
export type DrawSuccess = ContractEventLog<{
    id: string
    remaining_tokens: string
    claimed_winner: string
    winner: [string, string][]
    prize_class: [string, string, string][]
    token_address: string
    0: string
    1: string
    2: string
    3: [string, string][]
    4: [string, string, string][]
    5: string
}>
export type ParticipateSuccess = ContractEventLog<{
    id: string
    participator: string
    token_address: string
    0: string
    1: string
    2: string
}>
export type RefundSuccess = ContractEventLog<{
    id: string
    token_address: string
    remaining_balance: string
    0: string
    1: string
    2: string
}>

export interface LuckyLottery extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): LuckyLottery
    clone(): LuckyLottery
    methods: {
        contract_creator(): NonPayableTransactionObject<string>

        /**
         * @param _prize_class { uint[2][] }  example: [ [1, 10], [2, 5], [token_number, winner_number], [10,3].... ]
         */
        create_prize_class(_prize_class: (number | string)[][]): NonPayableTransactionObject<[string, string, string][]>

        get_total_token(pc: [number | string, number | string, number | string][]): NonPayableTransactionObject<string>

        get_total_winner(pc: [number | string, number | string, number | string][]): NonPayableTransactionObject<string>

        if_can_draw(id: string | number[]): NonPayableTransactionObject<boolean>

        /**
         * Inits new lottery instance _token_type:  0 - ETH  1 - ERC20 2 - ERC721
         */
        create_lottery(
            _hash: string | number[],
            _duration: number | string,
            _if_draw_at_time: boolean,
            _draw_at_time: number | string,
            _draw_at_number: number | string,
            _seed: string | number[],
            _message: string,
            _name: string,
            _token_type: number | string,
            _token_addr: string,
            _prize_class: (number | string)[][],
        ): PayableTransactionObject<void>

        transfer_token(
            token_type: number | string,
            token_address: string,
            sender_address: string,
            recipient_address: string,
            amount: number | string,
        ): PayableTransactionObject<void>

        toBytes(a: string): NonPayableTransactionObject<string>

        participate(
            id: string | number[],
            password: string,
            _recipient: string,
            validation: string | number[],
        ): NonPayableTransactionObject<void>

        draw(id: string | number[]): NonPayableTransactionObject<void>

        check_my_lottery(
            _id: string | number[],
        ): NonPayableTransactionObject<{
            is_participated: boolean
            is_win: boolean
            0: boolean
            1: boolean
        }>

        check_prize_class(_id: string | number[]): NonPayableTransactionObject<[string, string, string][]>

        check_participator(_id: string | number[]): NonPayableTransactionObject<string[]>

        check_lottery_basic_info(
            _id: string | number[],
        ): NonPayableTransactionObject<{
            total_token: string
            total_winner: string
            draw_at_time: string
            draw_at_number: string
            remaining_tokens: string
            claimed_winner: string
            0: string
            1: string
            2: string
            3: string
            4: string
            5: string
        }>

        check_lottery_state(
            _id: string | number[],
        ): NonPayableTransactionObject<{
            is_finished: boolean
            if_draw_at_time: boolean
            is_expired: boolean
            0: boolean
            1: boolean
            2: boolean
        }>

        check_winner_list(_id: string | number[]): NonPayableTransactionObject<[string, string][]>

        refund(id: string | number[]): NonPayableTransactionObject<void>

        _transfer_prize_pool(
            _token_type: number | string,
            _token_addr: string,
            _total_token: number | string,
        ): PayableTransactionObject<void>
    }
    events: {
        CreationSuccess(cb?: Callback<CreationSuccess>): EventEmitter
        CreationSuccess(options?: EventOptions, cb?: Callback<CreationSuccess>): EventEmitter

        DrawSuccess(cb?: Callback<DrawSuccess>): EventEmitter
        DrawSuccess(options?: EventOptions, cb?: Callback<DrawSuccess>): EventEmitter

        ParticipateSuccess(cb?: Callback<ParticipateSuccess>): EventEmitter
        ParticipateSuccess(options?: EventOptions, cb?: Callback<ParticipateSuccess>): EventEmitter

        RefundSuccess(cb?: Callback<RefundSuccess>): EventEmitter
        RefundSuccess(options?: EventOptions, cb?: Callback<RefundSuccess>): EventEmitter

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
    }

    once(event: 'CreationSuccess', cb: Callback<CreationSuccess>): void
    once(event: 'CreationSuccess', options: EventOptions, cb: Callback<CreationSuccess>): void

    once(event: 'DrawSuccess', cb: Callback<DrawSuccess>): void
    once(event: 'DrawSuccess', options: EventOptions, cb: Callback<DrawSuccess>): void

    once(event: 'ParticipateSuccess', cb: Callback<ParticipateSuccess>): void
    once(event: 'ParticipateSuccess', options: EventOptions, cb: Callback<ParticipateSuccess>): void

    once(event: 'RefundSuccess', cb: Callback<RefundSuccess>): void
    once(event: 'RefundSuccess', options: EventOptions, cb: Callback<RefundSuccess>): void
}
