/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export class Airdrop extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
    clone(): Airdrop
    methods: {
        check(claimer: string, amount: number | string, merkleProof: (string | number[])[]): TransactionObject<boolean>

        claim(
            index: number | string,
            amount: number | string,
            merkleProof: (string | number[])[],
        ): TransactionObject<void>

        recharge(_total: number | string): TransactionObject<void>

        withdraw(): TransactionObject<void>
    }
    events: {
        Claimed: ContractEvent<{
            amount: string
            timestamp: string
            0: string
            1: string
        }>
        Recharged: ContractEvent<{
            total: string
            timestamp: string
            0: string
            1: string
        }>
        Withdrawed: ContractEvent<{
            left: string
            timestamp: string
            0: string
            1: string
        }>
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
    }
}
