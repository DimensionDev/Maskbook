# generated by patch-package 6.4.7 on 2021-06-12 01:44:38
#
# command:
#   npx patch-package @material-ui/system
#
# declared package:
#   @material-ui/system: 5.0.0-alpha.34
#
diff --git a/node_modules/@material-ui/system/createStyled.d.ts b/node_modules/@material-ui/system/createStyled.d.ts
new file mode 100644
index 0000000..ffe8283
--- /dev/null
+++ b/node_modules/@material-ui/system/createStyled.d.ts
@@ -0,0 +1,244 @@
+import * as React from 'react';
+import * as CSS from 'csstype';
+import { SxProps } from './styleFunctionSx';
+import { Theme as DefaultTheme } from './createTheme';
+
+export interface SerializedStyles {
+  name: string;
+  styles: string;
+  map?: string;
+  next?: SerializedStyles;
+}
+
+export type CSSProperties = CSS.PropertiesFallback<number | string>;
+export type CSSPropertiesWithMultiValues = {
+  [K in keyof CSSProperties]: CSSProperties[K] | Array<Extract<CSSProperties[K], string>>;
+};
+export type CSSPseudos = { [K in CSS.Pseudos]?: unknown | CSSObject };
+
+export interface CSSOthersObject {
+  [propertiesName: string]: unknown | CSSInterpolation;
+}
+export type CSSPseudosForCSSObject = { [K in CSS.Pseudos]?: CSSObject };
+
+export interface ArrayCSSInterpolation extends Array<CSSInterpolation> {}
+
+export interface CSSOthersObjectForCSSObject {
+  [propertiesName: string]: CSSInterpolation;
+}
+
+export interface CSSObject extends CSSPropertiesWithMultiValues, CSSPseudos, CSSOthersObject {}
+
+export interface ComponentSelector {
+  __emotion_styles: any;
+}
+
+export type Keyframes = {
+  name: string;
+  styles: string;
+  anim: number;
+  toString: () => string;
+} & string;
+
+export type Equal<A, B, T, F> = A extends B ? (B extends A ? T : F) : F;
+
+export type InterpolationPrimitive =
+  | null
+  | undefined
+  | boolean
+  | number
+  | string
+  | ComponentSelector
+  | Keyframes
+  | SerializedStyles
+  | CSSObject;
+
+export type CSSInterpolation = InterpolationPrimitive | ArrayCSSInterpolation;
+
+export interface FunctionInterpolation<Props> {
+  (props: Props): Interpolation<Props>;
+}
+
+export interface ArrayInterpolation<Props> extends Array<Interpolation<Props>> {}
+
+export type Interpolation<Props> =
+  | InterpolationPrimitive
+  | ArrayInterpolation<Props>
+  | FunctionInterpolation<Props>;
+
+/**
+ * @desc Utility type for getting props type of React component.
+ * It takes `defaultProps` into an account - making props with defaults optional.
+ */
+export type PropsOf<C extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> =
+  JSX.LibraryManagedAttributes<C, React.ComponentProps<C>>;
+
+export type Overwrapped<T, U> = Pick<T, Extract<keyof T, keyof U>>;
+
+export interface StyledComponent<InnerProps, StyleProps, Theme extends object>
+  extends React.FunctionComponent<InnerProps & StyleProps & { theme?: Theme }>,
+    ComponentSelector {
+  /**
+   * @desc this method is type-unsafe
+   */
+  withComponent<NewTag extends keyof JSX.IntrinsicElements>(
+    tag: NewTag,
+  ): StyledComponent<JSX.IntrinsicElements[NewTag], StyleProps, Theme>;
+  withComponent<Tag extends React.JSXElementConstructor<any>>(
+    tag: Tag,
+  ): StyledComponent<PropsOf<Tag>, StyleProps, Theme>;
+}
+
+export interface StyledOptions {
+  label?: string;
+  shouldForwardProp?(propName: PropertyKey): boolean;
+  target?: string;
+}
+
+export interface MuiStyledOptions {
+  name?: string;
+  slot?: string;
+  overridesResolver?: (props: any, styles: Record<string, any>) => Record<string, any>;
+  skipVariantsResolver?: boolean;
+  skipSx?: boolean;
+}
+
+/** Same as StyledOptions but shouldForwardProp must be a type guard */
+export interface FilteringStyledOptions<Props, ForwardedProps extends keyof Props = keyof Props> {
+  label?: string;
+  shouldForwardProp?(propName: PropertyKey): propName is ForwardedProps;
+  target?: string;
+}
+
+/**
+ * @typeparam ComponentProps  Props which will be included when withComponent is called
+ * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
+ */
+export interface CreateStyledComponent<
+  ComponentProps extends {},
+  SpecificComponentProps extends {} = {},
+  JSXProps extends {} = {},
+> {
+  /**
+   * @typeparam AdditionalProps  Additional props to add to your styled component
+   */
+  <AdditionalProps extends {} = {}>(
+    ...styles: Array<
+      Interpolation<
+        ComponentProps & SpecificComponentProps & AdditionalProps & { theme: DefaultTheme }
+      >
+    >
+  ): StyledComponent<ComponentProps & AdditionalProps, SpecificComponentProps, JSXProps>;
+
+  (
+    template: TemplateStringsArray,
+    ...styles: Array<
+      Interpolation<ComponentProps & SpecificComponentProps & { theme: DefaultTheme }>
+    >
+  ): StyledComponent<ComponentProps, SpecificComponentProps, JSXProps>;
+
+  /**
+   * @typeparam AdditionalProps  Additional props to add to your styled component
+   */
+  <AdditionalProps extends {}>(
+    template: TemplateStringsArray,
+    ...styles: Array<
+      Interpolation<
+        ComponentProps & SpecificComponentProps & AdditionalProps & { theme: DefaultTheme }
+      >
+    >
+  ): StyledComponent<ComponentProps & AdditionalProps, SpecificComponentProps, JSXProps>;
+}
+
+export interface CreateMUIStyled<Theme extends object = DefaultTheme> {
+  <
+    C extends React.ComponentClass<React.ComponentProps<C>>,
+    ForwardedProps extends keyof React.ComponentProps<C> = keyof React.ComponentProps<C>,
+  >(
+    component: C,
+    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps> & MuiStyledOptions,
+  ): CreateStyledComponent<
+    Pick<PropsOf<C>, ForwardedProps> & {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    },
+    {},
+    {
+      ref?: React.Ref<InstanceType<C>>;
+    }
+  >;
+
+  <C extends React.ComponentClass<React.ComponentProps<C>>>(
+    component: C,
+    options?: StyledOptions & MuiStyledOptions,
+  ): CreateStyledComponent<
+    PropsOf<C> & {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    },
+    {},
+    {
+      ref?: React.Ref<InstanceType<C>>;
+    }
+  >;
+
+  <
+    C extends React.JSXElementConstructor<React.ComponentProps<C>>,
+    ForwardedProps extends keyof React.ComponentProps<C> = keyof React.ComponentProps<C>,
+  >(
+    component: C,
+    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps> & MuiStyledOptions,
+  ): CreateStyledComponent<
+    Pick<PropsOf<C>, ForwardedProps> & {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    }
+  >;
+
+  <C extends React.JSXElementConstructor<React.ComponentProps<C>>>(
+    component: C,
+    options?: StyledOptions & MuiStyledOptions,
+  ): CreateStyledComponent<
+    PropsOf<C> & {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    }
+  >;
+
+  <
+    Tag extends keyof JSX.IntrinsicElements,
+    ForwardedProps extends keyof JSX.IntrinsicElements[Tag] = keyof JSX.IntrinsicElements[Tag],
+  >(
+    tag: Tag,
+    options: FilteringStyledOptions<JSX.IntrinsicElements[Tag], ForwardedProps> & MuiStyledOptions,
+  ): CreateStyledComponent<
+    {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    },
+    Pick<JSX.IntrinsicElements[Tag], ForwardedProps>
+  >;
+
+  <Tag extends keyof JSX.IntrinsicElements>(
+    tag: Tag,
+    options?: StyledOptions & MuiStyledOptions,
+  ): CreateStyledComponent<
+    {
+      theme?: Theme;
+      as?: React.ElementType;
+      sx?: SxProps<Theme>;
+    },
+    JSX.IntrinsicElements[Tag]
+  >;
+}
+
+export default function createStyled<T extends object = DefaultTheme>(options?: {
+  defaultTheme?: T;
+  rootShouldForwardProp?: (prop: string) => boolean;
+  slotShouldForwardProp?: (prop: string) => boolean;
+}): CreateMUIStyled<T>;
diff --git a/node_modules/@material-ui/system/createStyled.js b/node_modules/@material-ui/system/createStyled.js
new file mode 100644
index 0000000..923a28b
--- /dev/null
+++ b/node_modules/@material-ui/system/createStyled.js
@@ -0,0 +1,195 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = createStyled;
+exports.systemDefaultTheme = exports.shouldForwardProp = void 0;
+
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
+
+var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+
+var _styledEngine = _interopRequireDefault(require("@material-ui/styled-engine"));
+
+var _createTheme = _interopRequireDefault(require("./createTheme"));
+
+var _styleFunctionSx = _interopRequireDefault(require("./styleFunctionSx"));
+
+var _propsToClassKey = _interopRequireDefault(require("./propsToClassKey"));
+
+function isEmpty(obj) {
+  return Object.keys(obj).length === 0;
+}
+
+const getStyleOverrides = (name, theme) => {
+  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+    return theme.components[name].styleOverrides;
+  }
+
+  return null;
+};
+
+const getVariantStyles = (name, theme) => {
+  let variants = [];
+
+  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+    variants = theme.components[name].variants;
+  }
+
+  const variantsStyles = {};
+  variants.forEach(definition => {
+    const key = (0, _propsToClassKey.default)(definition.props);
+    variantsStyles[key] = definition.style;
+  });
+  return variantsStyles;
+};
+
+const variantsResolver = (props, styles, theme, name) => {
+  var _theme$components, _theme$components$nam;
+
+  const {
+    styleProps = {}
+  } = props;
+  let variantsStyles = {};
+  const themeVariants = theme === null || theme === void 0 ? void 0 : (_theme$components = theme.components) === null || _theme$components === void 0 ? void 0 : (_theme$components$nam = _theme$components[name]) === null || _theme$components$nam === void 0 ? void 0 : _theme$components$nam.variants;
+
+  if (themeVariants) {
+    themeVariants.forEach(themeVariant => {
+      let isMatch = true;
+      Object.keys(themeVariant.props).forEach(key => {
+        if (styleProps[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
+          isMatch = false;
+        }
+      });
+
+      if (isMatch) {
+        variantsStyles = (0, _extends2.default)({}, variantsStyles, styles[(0, _propsToClassKey.default)(themeVariant.props)]);
+      }
+    });
+  }
+
+  return variantsStyles;
+};
+
+const shouldForwardProp = prop => prop !== 'styleProps' && prop !== 'theme' && prop !== 'isRtl' && prop !== 'sx' && prop !== 'as';
+
+exports.shouldForwardProp = shouldForwardProp;
+const systemDefaultTheme = (0, _createTheme.default)();
+exports.systemDefaultTheme = systemDefaultTheme;
+
+const lowercaseFirstLetter = string => {
+  return string.charAt(0).toLowerCase() + string.slice(1);
+};
+
+function createStyled(input = {}) {
+  const {
+    defaultTheme = systemDefaultTheme,
+    rootShouldForwardProp = shouldForwardProp,
+    slotShouldForwardProp = shouldForwardProp
+  } = input;
+  return (tag, inputOptions = {}) => {
+    const {
+      name: componentName,
+      slot: componentSlot,
+      skipVariantsResolver: inputSkipVariantsResolver,
+      skipSx: inputSkipSx,
+      overridesResolver
+    } = inputOptions,
+          options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"]); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
+
+    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
+    const skipSx = inputSkipSx || false;
+    let displayName;
+    let className;
+
+    if (componentName) {
+      displayName = `${componentName}${componentSlot || ''}`;
+      className = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
+    }
+
+    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({}, !componentSlot || componentSlot === 'Root' ? {
+      shouldForwardProp: rootShouldForwardProp
+    } : {
+      shouldForwardProp: slotShouldForwardProp
+    }, {
+      label: className || componentName || ''
+    }, options));
+
+    const muiStyledResolver = (styleArg, ...expressions) => {
+      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
+        return typeof stylesArg === 'function' ? (_ref) => {
+          let {
+            theme: themeInput
+          } = _ref,
+              other = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["theme"]);
+          return stylesArg((0, _extends2.default)({
+            theme: isEmpty(themeInput) ? defaultTheme : themeInput
+          }, other));
+        } : stylesArg;
+      }) : [];
+      let transformedStyleArg = styleArg;
+
+      if (componentName && overridesResolver) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          const styleOverrides = getStyleOverrides(componentName, theme);
+
+          if (styleOverrides) {
+            return overridesResolver(props, styleOverrides);
+          }
+
+          return null;
+        });
+      }
+
+      if (componentName && overridesResolver && !skipVariantsResolver) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        });
+      }
+
+      if (!skipSx) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
+            theme
+          }));
+        });
+      }
+
+      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+
+      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
+        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
+
+        transformedStyleArg = [...styleArg, ...placeholders];
+        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
+      } else if (typeof styleArg === 'function') {
+        // If the type is function, we need to define the default theme.
+        transformedStyleArg = (_ref2) => {
+          let {
+            theme: themeInput
+          } = _ref2,
+              other = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["theme"]);
+          return styleArg((0, _extends2.default)({
+            theme: isEmpty(themeInput) ? defaultTheme : themeInput
+          }, other));
+        };
+      }
+
+      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
+
+      if (displayName) {
+        Component.displayName = displayName;
+      }
+
+      return Component;
+    };
+
+    return muiStyledResolver;
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/createTheme/createBreakpoints.d.ts b/node_modules/@material-ui/system/createTheme/createBreakpoints.d.ts
new file mode 100644
index 0000000..6389985
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createBreakpoints.d.ts
@@ -0,0 +1,28 @@
+import { OverridableStringUnion } from '@material-ui/types';
+
+export interface BreakpointOverrides {}
+
+export type Breakpoint = OverridableStringUnion<
+  'xs' | 'sm' | 'md' | 'lg' | 'xl',
+  BreakpointOverrides
+>;
+export type BreakpointValues = { [key in Breakpoint]: number };
+export const keys: Breakpoint[];
+
+export interface Breakpoints {
+  keys: Breakpoint[];
+  values: BreakpointValues;
+  up: (key: Breakpoint | number) => string;
+  down: (key: Breakpoint | number) => string;
+  between: (start: Breakpoint | number, end: Breakpoint | number) => string;
+  only: (key: Breakpoint) => string;
+}
+
+export type BreakpointsOptions = Partial<
+  {
+    unit: string;
+    step: number;
+  } & Breakpoints
+>;
+
+export default function createBreakpoints(options: BreakpointsOptions): Breakpoints;
diff --git a/node_modules/@material-ui/system/createTheme/createBreakpoints.js b/node_modules/@material-ui/system/createTheme/createBreakpoints.js
new file mode 100644
index 0000000..02638e7
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createBreakpoints.js
@@ -0,0 +1,70 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = createBreakpoints;
+exports.breakpointKeys = void 0;
+
+var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
+
+// Sorted ASC by size. That's important.
+// It can't be configured as it's used statically for propTypes.
+const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.
+
+exports.breakpointKeys = breakpointKeys;
+
+function createBreakpoints(breakpoints) {
+  const {
+    // The breakpoint **start** at this value.
+    // For instance with the first breakpoint xs: [xs, sm).
+    values = {
+      xs: 0,
+      sm: 600,
+      md: 960,
+      lg: 1280,
+      xl: 1920
+    },
+    unit = 'px',
+    step = 5
+  } = breakpoints,
+        other = (0, _objectWithoutPropertiesLoose2.default)(breakpoints, ["values", "unit", "step"]);
+  const keys = Object.keys(values);
+
+  function up(key) {
+    const value = typeof values[key] === 'number' ? values[key] : key;
+    return `@media (min-width:${value}${unit})`;
+  }
+
+  function down(key) {
+    const value = typeof values[key] === 'number' ? values[key] : key;
+    return `@media (max-width:${value - step / 100}${unit})`;
+  }
+
+  function between(start, end) {
+    const endIndex = keys.indexOf(end);
+    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
+  }
+
+  function only(key) {
+    if (keys.indexOf(key) + 1 < keys.length) {
+      return between(key, keys[keys.indexOf(key) + 1]);
+    }
+
+    return up(key);
+  }
+
+  return (0, _extends2.default)({
+    keys,
+    values,
+    up,
+    down,
+    between,
+    only,
+    unit
+  }, other);
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/createTheme/createSpacing.d.ts b/node_modules/@material-ui/system/createTheme/createSpacing.d.ts
new file mode 100644
index 0000000..e754383
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createSpacing.d.ts
@@ -0,0 +1,10 @@
+export declare type SpacingOptions = number | Spacing | ((abs: number) => number | string) | ((abs: number | string) => number | string) | ReadonlyArray<string | number>;
+export declare type SpacingArgument = number | string;
+export interface Spacing {
+    (): string;
+    (value: number): string;
+    (topBottom: SpacingArgument, rightLeft: SpacingArgument): string;
+    (top: SpacingArgument, rightLeft: SpacingArgument, bottom: SpacingArgument): string;
+    (top: SpacingArgument, right: SpacingArgument, bottom: SpacingArgument, left: SpacingArgument): string;
+}
+export default function createSpacing(spacingInput?: SpacingOptions): Spacing;
diff --git a/node_modules/@material-ui/system/createTheme/createSpacing.js b/node_modules/@material-ui/system/createTheme/createSpacing.js
new file mode 100644
index 0000000..44dcb89
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createSpacing.js
@@ -0,0 +1,40 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = createSpacing;
+
+var _spacing = require("../spacing");
+
+/* tslint:enable:unified-signatures */
+function createSpacing(spacingInput = 8) {
+  // Already transformed.
+  if (spacingInput.mui) {
+    return spacingInput;
+  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
+  // Smaller components, such as icons, can align to a 4dp grid.
+  // https://material.io/design/layout/understanding-layout.html#usage
+
+
+  const transform = (0, _spacing.createUnarySpacing)({
+    spacing: spacingInput
+  });
+
+  const spacing = (...argsInput) => {
+    if (process.env.NODE_ENV !== 'production') {
+      if (!(argsInput.length <= 4)) {
+        console.error(`Material-UI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
+      }
+    }
+
+    const args = argsInput.length === 0 ? [1] : argsInput;
+    return args.map(argument => {
+      const output = transform(argument);
+      return typeof output === 'number' ? `${output}px` : output;
+    }).join(' ');
+  };
+
+  spacing.mui = true;
+  return spacing;
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/createTheme/createTheme.d.ts b/node_modules/@material-ui/system/createTheme/createTheme.d.ts
new file mode 100644
index 0000000..9b9d1c2
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createTheme.d.ts
@@ -0,0 +1,43 @@
+import { Breakpoints, BreakpointsOptions } from './createBreakpoints';
+import { Shape, ShapeOptions } from './shape';
+import { Spacing, SpacingOptions } from './createSpacing';
+
+export { Breakpoint, BreakpointOverrides } from './createBreakpoints';
+
+export type Direction = 'ltr' | 'rtl';
+
+export interface ThemeOptions {
+  shape?: ShapeOptions;
+  breakpoints?: BreakpointsOptions;
+  direction?: Direction;
+  mixins?: unknown;
+  palette?: Record<string, any>;
+  shadows?: unknown;
+  spacing?: SpacingOptions;
+  transitions?: unknown;
+  components?: Record<string, any>;
+  typography?: unknown;
+  zIndex?: Record<string, number>;
+}
+
+export interface Theme {
+  shape: Shape;
+  breakpoints: Breakpoints;
+  direction: Direction;
+  palette: Record<string, any> & { mode: 'light' | 'dark' };
+  shadows?: unknown;
+  spacing: Spacing;
+  transitions?: unknown;
+  components?: Record<string, any>;
+  mixins?: unknown;
+  typography?: unknown;
+  zIndex?: unknown;
+}
+
+/**
+ * Generate a theme base on the options received.
+ * @param options Takes an incomplete theme object and adds the missing parts.
+ * @param args Deep merge the arguments with the about to be returned theme.
+ * @returns A complete, ready to use theme object.
+ */
+export default function createTheme(options?: ThemeOptions, ...args: object[]): Theme;
diff --git a/node_modules/@material-ui/system/createTheme/createTheme.js b/node_modules/@material-ui/system/createTheme/createTheme.js
new file mode 100644
index 0000000..2caf071
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/createTheme.js
@@ -0,0 +1,50 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+
+var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
+
+var _utils = require("@material-ui/utils");
+
+var _createBreakpoints = _interopRequireDefault(require("./createBreakpoints"));
+
+var _shape = _interopRequireDefault(require("./shape"));
+
+var _createSpacing = _interopRequireDefault(require("./createSpacing"));
+
+function createTheme(options = {}, ...args) {
+  const {
+    breakpoints: breakpointsInput = {},
+    palette: paletteInput = {},
+    spacing: spacingInput,
+    shape: shapeInput = {}
+  } = options,
+        other = (0, _objectWithoutPropertiesLoose2.default)(options, ["breakpoints", "palette", "spacing", "shape"]);
+  const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
+  const spacing = (0, _createSpacing.default)(spacingInput);
+  let muiTheme = (0, _utils.deepmerge)({
+    breakpoints,
+    direction: 'ltr',
+    components: {},
+    // Inject component definitions.
+    palette: (0, _extends2.default)({
+      mode: 'light'
+    }, paletteInput),
+    spacing,
+    shape: (0, _extends2.default)({}, _shape.default, {
+      shapeInput
+    })
+  }, other);
+  muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
+  return muiTheme;
+}
+
+var _default = createTheme;
+exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/createTheme/index.d.ts b/node_modules/@material-ui/system/createTheme/index.d.ts
new file mode 100644
index 0000000..def7508
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/index.d.ts
@@ -0,0 +1,2 @@
+export { default } from './createTheme';
+export * from './createTheme';
diff --git a/node_modules/@material-ui/system/createTheme/index.js b/node_modules/@material-ui/system/createTheme/index.js
new file mode 100644
index 0000000..fc2a1ef
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/index.js
@@ -0,0 +1,15 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+Object.defineProperty(exports, "default", {
+  enumerable: true,
+  get: function () {
+    return _createTheme.default;
+  }
+});
+
+var _createTheme = _interopRequireDefault(require("./createTheme"));
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/createTheme/shape.d.ts b/node_modules/@material-ui/system/createTheme/shape.d.ts
new file mode 100644
index 0000000..073fb7b
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/shape.d.ts
@@ -0,0 +1,9 @@
+export interface Shape {
+  borderRadius: number | string;
+}
+
+export type ShapeOptions = Partial<Shape>;
+
+declare const shape: Shape;
+
+export default shape;
diff --git a/node_modules/@material-ui/system/createTheme/shape.js b/node_modules/@material-ui/system/createTheme/shape.js
new file mode 100644
index 0000000..c2352f1
--- /dev/null
+++ b/node_modules/@material-ui/system/createTheme/shape.js
@@ -0,0 +1,11 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+const shape = {
+  borderRadius: 4
+};
+var _default = shape;
+exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createStyled.js b/node_modules/@material-ui/system/esm/createStyled.js
new file mode 100644
index 0000000..1cb2ca1
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createStyled.js
@@ -0,0 +1,180 @@
+import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
+import _extends from "@babel/runtime/helpers/esm/extends";
+import styledEngineStyled from '@material-ui/styled-engine';
+import createTheme from './createTheme';
+import styleFunctionSx from './styleFunctionSx';
+import propsToClassKey from './propsToClassKey';
+
+function isEmpty(obj) {
+  return Object.keys(obj).length === 0;
+}
+
+const getStyleOverrides = (name, theme) => {
+  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
+    return theme.components[name].styleOverrides;
+  }
+
+  return null;
+};
+
+const getVariantStyles = (name, theme) => {
+  let variants = [];
+
+  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
+    variants = theme.components[name].variants;
+  }
+
+  const variantsStyles = {};
+  variants.forEach(definition => {
+    const key = propsToClassKey(definition.props);
+    variantsStyles[key] = definition.style;
+  });
+  return variantsStyles;
+};
+
+const variantsResolver = (props, styles, theme, name) => {
+  var _theme$components, _theme$components$nam;
+
+  const {
+    styleProps = {}
+  } = props;
+  let variantsStyles = {};
+  const themeVariants = theme === null || theme === void 0 ? void 0 : (_theme$components = theme.components) === null || _theme$components === void 0 ? void 0 : (_theme$components$nam = _theme$components[name]) === null || _theme$components$nam === void 0 ? void 0 : _theme$components$nam.variants;
+
+  if (themeVariants) {
+    themeVariants.forEach(themeVariant => {
+      let isMatch = true;
+      Object.keys(themeVariant.props).forEach(key => {
+        if (styleProps[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
+          isMatch = false;
+        }
+      });
+
+      if (isMatch) {
+        variantsStyles = _extends({}, variantsStyles, styles[propsToClassKey(themeVariant.props)]);
+      }
+    });
+  }
+
+  return variantsStyles;
+};
+
+export const shouldForwardProp = prop => prop !== 'styleProps' && prop !== 'theme' && prop !== 'isRtl' && prop !== 'sx' && prop !== 'as';
+export const systemDefaultTheme = createTheme();
+
+const lowercaseFirstLetter = string => {
+  return string.charAt(0).toLowerCase() + string.slice(1);
+};
+
+export default function createStyled(input = {}) {
+  const {
+    defaultTheme = systemDefaultTheme,
+    rootShouldForwardProp = shouldForwardProp,
+    slotShouldForwardProp = shouldForwardProp
+  } = input;
+  return (tag, inputOptions = {}) => {
+    const {
+      name: componentName,
+      slot: componentSlot,
+      skipVariantsResolver: inputSkipVariantsResolver,
+      skipSx: inputSkipSx,
+      overridesResolver
+    } = inputOptions,
+          options = _objectWithoutPropertiesLoose(inputOptions, ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"]); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
+
+
+    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
+    const skipSx = inputSkipSx || false;
+    let displayName;
+    let className;
+
+    if (componentName) {
+      displayName = `${componentName}${componentSlot || ''}`;
+      className = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
+    }
+
+    const defaultStyledResolver = styledEngineStyled(tag, _extends({}, !componentSlot || componentSlot === 'Root' ? {
+      shouldForwardProp: rootShouldForwardProp
+    } : {
+      shouldForwardProp: slotShouldForwardProp
+    }, {
+      label: className || componentName || ''
+    }, options));
+
+    const muiStyledResolver = (styleArg, ...expressions) => {
+      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
+        return typeof stylesArg === 'function' ? (_ref) => {
+          let {
+            theme: themeInput
+          } = _ref,
+              other = _objectWithoutPropertiesLoose(_ref, ["theme"]);
+
+          return stylesArg(_extends({
+            theme: isEmpty(themeInput) ? defaultTheme : themeInput
+          }, other));
+        } : stylesArg;
+      }) : [];
+      let transformedStyleArg = styleArg;
+
+      if (componentName && overridesResolver) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          const styleOverrides = getStyleOverrides(componentName, theme);
+
+          if (styleOverrides) {
+            return overridesResolver(props, styleOverrides);
+          }
+
+          return null;
+        });
+      }
+
+      if (componentName && overridesResolver && !skipVariantsResolver) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
+        });
+      }
+
+      if (!skipSx) {
+        expressionsWithDefaultTheme.push(props => {
+          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
+          return styleFunctionSx(_extends({}, props, {
+            theme
+          }));
+        });
+      }
+
+      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
+
+      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
+        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
+
+        transformedStyleArg = [...styleArg, ...placeholders];
+        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
+      } else if (typeof styleArg === 'function') {
+        // If the type is function, we need to define the default theme.
+        transformedStyleArg = (_ref2) => {
+          let {
+            theme: themeInput
+          } = _ref2,
+              other = _objectWithoutPropertiesLoose(_ref2, ["theme"]);
+
+          return styleArg(_extends({
+            theme: isEmpty(themeInput) ? defaultTheme : themeInput
+          }, other));
+        };
+      }
+
+      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
+
+      if (displayName) {
+        Component.displayName = displayName;
+      }
+
+      return Component;
+    };
+
+    return muiStyledResolver;
+  };
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createTheme/createBreakpoints.js b/node_modules/@material-ui/system/esm/createTheme/createBreakpoints.js
new file mode 100644
index 0000000..0429a59
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createTheme/createBreakpoints.js
@@ -0,0 +1,57 @@
+import _extends from "@babel/runtime/helpers/esm/extends";
+import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
+// Sorted ASC by size. That's important.
+// It can't be configured as it's used statically for propTypes.
+export const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.
+
+export default function createBreakpoints(breakpoints) {
+  const {
+    // The breakpoint **start** at this value.
+    // For instance with the first breakpoint xs: [xs, sm).
+    values = {
+      xs: 0,
+      sm: 600,
+      md: 960,
+      lg: 1280,
+      xl: 1920
+    },
+    unit = 'px',
+    step = 5
+  } = breakpoints,
+        other = _objectWithoutPropertiesLoose(breakpoints, ["values", "unit", "step"]);
+
+  const keys = Object.keys(values);
+
+  function up(key) {
+    const value = typeof values[key] === 'number' ? values[key] : key;
+    return `@media (min-width:${value}${unit})`;
+  }
+
+  function down(key) {
+    const value = typeof values[key] === 'number' ? values[key] : key;
+    return `@media (max-width:${value - step / 100}${unit})`;
+  }
+
+  function between(start, end) {
+    const endIndex = keys.indexOf(end);
+    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
+  }
+
+  function only(key) {
+    if (keys.indexOf(key) + 1 < keys.length) {
+      return between(key, keys[keys.indexOf(key) + 1]);
+    }
+
+    return up(key);
+  }
+
+  return _extends({
+    keys,
+    values,
+    up,
+    down,
+    between,
+    only,
+    unit
+  }, other);
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createTheme/createSpacing.js b/node_modules/@material-ui/system/esm/createTheme/createSpacing.js
new file mode 100644
index 0000000..02d7944
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createTheme/createSpacing.js
@@ -0,0 +1,33 @@
+import { createUnarySpacing } from '../spacing';
+
+/* tslint:enable:unified-signatures */
+export default function createSpacing(spacingInput = 8) {
+  // Already transformed.
+  if (spacingInput.mui) {
+    return spacingInput;
+  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
+  // Smaller components, such as icons, can align to a 4dp grid.
+  // https://material.io/design/layout/understanding-layout.html#usage
+
+
+  const transform = createUnarySpacing({
+    spacing: spacingInput
+  });
+
+  const spacing = (...argsInput) => {
+    if (process.env.NODE_ENV !== 'production') {
+      if (!(argsInput.length <= 4)) {
+        console.error(`Material-UI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
+      }
+    }
+
+    const args = argsInput.length === 0 ? [1] : argsInput;
+    return args.map(argument => {
+      const output = transform(argument);
+      return typeof output === 'number' ? `${output}px` : output;
+    }).join(' ');
+  };
+
+  spacing.mui = true;
+  return spacing;
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createTheme/createTheme.js b/node_modules/@material-ui/system/esm/createTheme/createTheme.js
new file mode 100644
index 0000000..de2dbe9
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createTheme/createTheme.js
@@ -0,0 +1,36 @@
+import _extends from "@babel/runtime/helpers/esm/extends";
+import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
+import { deepmerge } from '@material-ui/utils';
+import createBreakpoints from './createBreakpoints';
+import shape from './shape';
+import createSpacing from './createSpacing';
+
+function createTheme(options = {}, ...args) {
+  const {
+    breakpoints: breakpointsInput = {},
+    palette: paletteInput = {},
+    spacing: spacingInput,
+    shape: shapeInput = {}
+  } = options,
+        other = _objectWithoutPropertiesLoose(options, ["breakpoints", "palette", "spacing", "shape"]);
+
+  const breakpoints = createBreakpoints(breakpointsInput);
+  const spacing = createSpacing(spacingInput);
+  let muiTheme = deepmerge({
+    breakpoints,
+    direction: 'ltr',
+    components: {},
+    // Inject component definitions.
+    palette: _extends({
+      mode: 'light'
+    }, paletteInput),
+    spacing,
+    shape: _extends({}, shape, {
+      shapeInput
+    })
+  }, other);
+  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
+  return muiTheme;
+}
+
+export default createTheme;
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createTheme/index.js b/node_modules/@material-ui/system/esm/createTheme/index.js
new file mode 100644
index 0000000..0676d84
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createTheme/index.js
@@ -0,0 +1 @@
+export { default } from './createTheme';
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/createTheme/shape.js b/node_modules/@material-ui/system/esm/createTheme/shape.js
new file mode 100644
index 0000000..d781443
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/createTheme/shape.js
@@ -0,0 +1,4 @@
+const shape = {
+  borderRadius: 4
+};
+export default shape;
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/index.js b/node_modules/@material-ui/system/esm/index.js
index f08c267..7c39854 100644
--- a/node_modules/@material-ui/system/esm/index.js
+++ b/node_modules/@material-ui/system/esm/index.js
@@ -22,3 +22,9 @@ export { default as typography } from './typography';
 export * from './typography';
 export { default as unstable_styleFunctionSx, extendSxProp as unstable_extendSxProp } from './styleFunctionSx';
 export { default as unstable_getThemeValue } from './getThemeValue';
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+export { default as styled } from './styled';
+export { default as createTheme } from './createTheme';
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export { default as shape } from './createTheme/shape';
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/propsToClassKey.js b/node_modules/@material-ui/system/esm/propsToClassKey.js
new file mode 100644
index 0000000..af9b2ea
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/propsToClassKey.js
@@ -0,0 +1,29 @@
+import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
+import { unstable_capitalize as capitalize } from '@material-ui/utils';
+
+function isEmpty(string) {
+  return string.length === 0;
+}
+/**
+ * Generates string classKey based on the properties provided. It starts with the
+ * variant if defined, and then it appends all other properties in alphabetical order.
+ * @param {object} props - the properties for which the classKey should be created.
+ */
+
+
+export default function propsToClassKey(props) {
+  const {
+    variant
+  } = props,
+        other = _objectWithoutPropertiesLoose(props, ["variant"]);
+
+  let classKey = variant || '';
+  Object.keys(other).sort().forEach(key => {
+    if (key === 'color') {
+      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);
+    } else {
+      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
+    }
+  });
+  return classKey;
+}
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/esm/styled.js b/node_modules/@material-ui/system/esm/styled.js
new file mode 100644
index 0000000..c7f670e
--- /dev/null
+++ b/node_modules/@material-ui/system/esm/styled.js
@@ -0,0 +1,3 @@
+import createStyled from './createStyled';
+const styled = createStyled();
+export default styled;
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/index.d.ts b/node_modules/@material-ui/system/index.d.ts
index 15c2d5c..7ba099f 100644
--- a/node_modules/@material-ui/system/index.d.ts
+++ b/node_modules/@material-ui/system/index.d.ts
@@ -329,3 +329,37 @@ export {
   extendSxProp as unstable_extendSxProp,
 } from './styleFunctionSx';
 export * from './styleFunctionSx';
+
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+
+export { default as styled } from './styled';
+export * from './styled';
+
+export { default as createTheme } from './createTheme';
+export * from './createTheme';
+
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export * from './createTheme/createBreakpoints';
+
+export { SpacingOptions, Spacing } from './createTheme/createSpacing';
+
+export { default as shape } from './createTheme/shape';
+export * from './createTheme/shape';
+
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+
+export { default as styled } from './styled';
+export * from './styled';
+
+export { default as createTheme } from './createTheme';
+export * from './createTheme';
+
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export * from './createTheme/createBreakpoints';
+
+export { SpacingOptions, Spacing } from './createTheme/createSpacing';
+
+export { default as shape } from './createTheme/shape';
+export * from './createTheme/shape';
diff --git a/node_modules/@material-ui/system/index.js b/node_modules/@material-ui/system/index.js
index 3a0bf51..d254250 100644
--- a/node_modules/@material-ui/system/index.js
+++ b/node_modules/@material-ui/system/index.js
@@ -266,3 +266,49 @@ Object.keys(_typography).forEach(function (key) {
 var _styleFunctionSx = _interopRequireWildcard(require("./styleFunctionSx"));
 
 var _getThemeValue = _interopRequireDefault(require("./getThemeValue"));
+
+
+var _createStyled = _interopRequireWildcard(require("./createStyled"));
+
+Object.keys(_createStyled).forEach(function (key) {
+    if (key === "default" || key === "__esModule") return;
+    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+    if (key in exports && exports[key] === _createStyled[key]) return;
+    Object.defineProperty(exports, key, {
+        enumerable: true,
+        get: function () {
+            return _createStyled[key];
+        }
+    });
+});
+
+var _styled = _interopRequireDefault(require("./styled"));
+
+var _createTheme = _interopRequireDefault(require("./createTheme"));
+
+var _createBreakpoints = _interopRequireDefault(require("./createTheme/createBreakpoints"));
+
+var _shape = _interopRequireDefault(require("./createTheme/shape"));
+
+
+var _createStyled = _interopRequireWildcard(require("./createStyled"));
+
+Object.keys(_createStyled).forEach(function (key) {
+    if (key === "default" || key === "__esModule") return;
+    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+    if (key in exports && exports[key] === _createStyled[key]) return;
+    Object.defineProperty(exports, key, {
+        enumerable: true,
+        get: function () {
+            return _createStyled[key];
+        }
+    });
+});
+
+var _styled = _interopRequireDefault(require("./styled"));
+
+var _createTheme = _interopRequireDefault(require("./createTheme"));
+
+var _createBreakpoints = _interopRequireDefault(require("./createTheme/createBreakpoints"));
+
+var _shape = _interopRequireDefault(require("./createTheme/shape"));
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/legacy/index.js b/node_modules/@material-ui/system/legacy/index.js
index 4aa9104..7bc288c 100644
--- a/node_modules/@material-ui/system/legacy/index.js
+++ b/node_modules/@material-ui/system/legacy/index.js
@@ -27,3 +27,15 @@ export { default as typography } from './typography';
 export * from './typography';
 export { default as unstable_styleFunctionSx, extendSxProp as unstable_extendSxProp } from './styleFunctionSx';
 export { default as unstable_getThemeValue } from './getThemeValue';
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+export { default as styled } from './styled';
+export { default as createTheme } from './createTheme';
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export { default as shape } from './createTheme/shape';
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+export { default as styled } from './styled';
+export { default as createTheme } from './createTheme';
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export { default as shape } from './createTheme/shape';
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/modern/index.js b/node_modules/@material-ui/system/modern/index.js
index 4aa9104..7bc288c 100644
--- a/node_modules/@material-ui/system/modern/index.js
+++ b/node_modules/@material-ui/system/modern/index.js
@@ -27,3 +27,15 @@ export { default as typography } from './typography';
 export * from './typography';
 export { default as unstable_styleFunctionSx, extendSxProp as unstable_extendSxProp } from './styleFunctionSx';
 export { default as unstable_getThemeValue } from './getThemeValue';
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+export { default as styled } from './styled';
+export { default as createTheme } from './createTheme';
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export { default as shape } from './createTheme/shape';
+export { default as createStyled } from './createStyled';
+export * from './createStyled';
+export { default as styled } from './styled';
+export { default as createTheme } from './createTheme';
+export { default as createBreakpoints } from './createTheme/createBreakpoints';
+export { default as shape } from './createTheme/shape';
\ No newline at end of file
diff --git a/node_modules/@material-ui/system/styled.d.ts b/node_modules/@material-ui/system/styled.d.ts
new file mode 100644
index 0000000..164bc4b
--- /dev/null
+++ b/node_modules/@material-ui/system/styled.d.ts
@@ -0,0 +1,5 @@
+import { CreateMUIStyled } from './createStyled';
+
+declare const styled: CreateMUIStyled;
+
+export default styled;
diff --git a/node_modules/@material-ui/system/styled.js b/node_modules/@material-ui/system/styled.js
new file mode 100644
index 0000000..94bd7f0
--- /dev/null
+++ b/node_modules/@material-ui/system/styled.js
@@ -0,0 +1,14 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+
+var _createStyled = _interopRequireDefault(require("./createStyled"));
+
+const styled = (0, _createStyled.default)();
+var _default = styled;
+exports.default = _default;
\ No newline at end of file
