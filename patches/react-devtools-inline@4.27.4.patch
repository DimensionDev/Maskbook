diff --git a/dist/backend.js b/dist/backend.js
index 4606e675187427998a9d1c0b6463e31889cce923..b9e992a49606189d90cb2ef7a4311ec9f916c8dc 100644
--- a/dist/backend.js
+++ b/dist/backend.js
@@ -2339,7 +2339,7 @@ function setupHighlighter(bridge, agent) {
       window.addEventListener('mouseover', onMouseEvent, true);
       window.addEventListener('mouseup', onMouseEvent, true);
       window.addEventListener('pointerdown', onPointerDown, true);
-      window.addEventListener('pointerover', onPointerOver, true);
+      window.addEventListener('pointermove', onPointerMove, true);
       window.addEventListener('pointerup', onPointerUp, true);
     } else {
       agent.emit('startInspectingNative');
@@ -2366,7 +2366,7 @@ function setupHighlighter(bridge, agent) {
       window.removeEventListener('mouseover', onMouseEvent, true);
       window.removeEventListener('mouseup', onMouseEvent, true);
       window.removeEventListener('pointerdown', onPointerDown, true);
-      window.removeEventListener('pointerover', onPointerOver, true);
+      window.removeEventListener('pointermove', onPointerMove, true);
       window.removeEventListener('pointerup', onPointerUp, true);
     } else {
       agent.emit('stopInspectingNative');
@@ -2435,13 +2435,15 @@ function setupHighlighter(bridge, agent) {
   function onPointerDown(event) {
     event.preventDefault();
     event.stopPropagation();
-    selectFiberForNode(event.target);
+    selectFiberForNode(event.composed ? event.composedPath()[0] : event.target);
   }
 
-  function onPointerOver(event) {
+  let lastHoveredNode = null;
+  function onPointerMove(event) {
     event.preventDefault();
     event.stopPropagation();
-    const target = event.target;
+    const target = event.composed ? event.composedPath()[0] : event.target;
+    if (lastHoveredNode === target) return;
 
     if (target.tagName === 'IFRAME') {
       const iframe = target;
@@ -6733,7 +6735,7 @@ class Bridge extends _events__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
     } // Queue the shutdown outgoing message for subscribers.
 
 
-    this.send('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.
+    this.emit('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.
 
     this._isShutdown = true; // Disable the API inherited from EventEmitter that can add more listeners and send more messages.
     // $FlowFixMe This property is not writable.
diff --git a/dist/frontend.js b/dist/frontend.js
index c01455f59c22ea7342257de470ff981c1208799b..557dca684b5d450e5023fd19c988b86d95c26c10 100644
--- a/dist/frontend.js
+++ b/dist/frontend.js
@@ -3530,7 +3530,7 @@ class Bridge extends _events__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
     } // Queue the shutdown outgoing message for subscribers.
 
 
-    this.send('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.
+    this.emit('shutdown'); // Mark this bridge as destroyed, i.e. disable its public API.
 
     this._isShutdown = true; // Disable the API inherited from EventEmitter that can add more listeners and send more messages.
     // $FlowFixMe This property is not writable.