diff --git a/ClickAwayListener/ClickAwayListener.d.ts b/ClickAwayListener/ClickAwayListener.d.ts
index 477ee12c6af5be2a4dcfcf7e732906381e24ae17..26dbd33e759f941d9a9ccc398093c1f34cfcabd3 100644
--- a/ClickAwayListener/ClickAwayListener.d.ts
+++ b/ClickAwayListener/ClickAwayListener.d.ts
@@ -26,6 +26,11 @@ export interface ClickAwayListenerProps {
      * @default 'onTouchEnd'
      */
     touchEvent?: ClickAwayTouchEventHandler | false;
+    /**
+     * Patched 
+     * @default false
+     */
+    useCapture?: boolean;
 }
 /**
  * Listen for click events that occur somewhere in the document, outside of the element itself.
diff --git a/ClickAwayListener/ClickAwayListener.js b/ClickAwayListener/ClickAwayListener.js
index f8abfb89d9371bd5f7cb7850be7aec1a4d82bb44..130ac2a14ed73a9b3a02e78cce5cd787381e882b 100644
--- a/ClickAwayListener/ClickAwayListener.js
+++ b/ClickAwayListener/ClickAwayListener.js
@@ -30,6 +30,7 @@ function ClickAwayListener(props) {
     disableReactTree = false,
     mouseEvent = 'onClick',
     onClickAway,
+    useCapture = false,
     touchEvent = 'onTouchEnd'
   } = props;
   const movedRef = React.useRef(false);
@@ -57,6 +58,7 @@ function ClickAwayListener(props) {
   // and hitting left arrow to move the cursor in a text input etc.
   // Only special HTML elements have these default behaviors.
   const handleClickAway = useEventCallback(event => {
+    const check = () => {
     // Given developers can stop the propagation of the synthetic event,
     // we can only be confident with a positive value.
     const insideReactTree = syntheticEventRef.current;
@@ -90,7 +92,12 @@ function ClickAwayListener(props) {
     if (!insideDOM && (disableReactTree || !insideReactTree)) {
       onClickAway(event);
     }
+    }
+    // If useCapture is true, `childrenPropsHandler` created by `createHandleSynthetic` will fire after `handleClickAway`, `syntheticEventRef.current` (or `insideReactTree`) will always be false at the first checking
+    if (useCapture) setTimeout(check);
+    else check();
   });
+  
 
   // Keep track of mouse/touch events that bubbled up through the portal.
   const createHandleSynthetic = handlerName => event => {
@@ -113,15 +120,15 @@ function ClickAwayListener(props) {
       const handleTouchMove = () => {
         movedRef.current = true;
       };
-      doc.addEventListener(mappedTouchEvent, handleClickAway);
-      doc.addEventListener('touchmove', handleTouchMove);
+      doc.addEventListener(mappedTouchEvent, handleClickAway, useCapture);
+      doc.addEventListener('touchmove', handleTouchMove, useCapture);
       return () => {
-        doc.removeEventListener(mappedTouchEvent, handleClickAway);
-        doc.removeEventListener('touchmove', handleTouchMove);
+        doc.removeEventListener(mappedTouchEvent, handleClickAway, useCapture);
+        doc.removeEventListener('touchmove', handleTouchMove, useCapture);
       };
     }
     return undefined;
-  }, [handleClickAway, touchEvent]);
+  }, [handleClickAway, touchEvent, useCapture]);
   if (mouseEvent !== false) {
     childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
   }
@@ -129,49 +136,16 @@ function ClickAwayListener(props) {
     if (mouseEvent !== false) {
       const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
       const doc = ownerDocument(nodeRef.current);
-      doc.addEventListener(mappedMouseEvent, handleClickAway);
+      doc.addEventListener(mappedMouseEvent, handleClickAway, useCapture);
       return () => {
-        doc.removeEventListener(mappedMouseEvent, handleClickAway);
+        doc.removeEventListener(mappedMouseEvent, handleClickAway, useCapture);
       };
     }
     return undefined;
-  }, [handleClickAway, mouseEvent]);
+  }, [handleClickAway, mouseEvent, useCapture]);
   return /*#__PURE__*/_jsx(React.Fragment, {
     children: /*#__PURE__*/React.cloneElement(children, childrenProps)
   });
 }
-process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes /* remove-proptypes */ = {
-  // ┌────────────────────────────── Warning ──────────────────────────────┐
-  // │ These PropTypes are generated from the TypeScript type definitions. │
-  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
-  // └─────────────────────────────────────────────────────────────────────┘
-  /**
-   * The wrapped element.
-   */
-  children: elementAcceptingRef.isRequired,
-  /**
-   * If `true`, the React tree is ignored and only the DOM tree is considered.
-   * This prop changes how portaled elements are handled.
-   * @default false
-   */
-  disableReactTree: PropTypes.bool,
-  /**
-   * The mouse event to listen to. You can disable the listener by providing `false`.
-   * @default 'onClick'
-   */
-  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),
-  /**
-   * Callback fired when a "click away" event is detected.
-   */
-  onClickAway: PropTypes.func.isRequired,
-  /**
-   * The touch event to listen to. You can disable the listener by providing `false`.
-   * @default 'onTouchEnd'
-   */
-  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])
-} : void 0;
-if (process.env.NODE_ENV !== 'production') {
-  // eslint-disable-next-line
-  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);
-}
+
 export { ClickAwayListener };
\ No newline at end of file
diff --git a/Modal/Modal.js b/Modal/Modal.js
index 507fb16dca9257e308e7a03a1618ddc0802292f7..8a4943ba44a800b546fbc940452ef6f3d733ec45 100644
--- a/Modal/Modal.js
+++ b/Modal/Modal.js
@@ -2,7 +2,7 @@
 
 import _extends from "@babel/runtime/helpers/esm/extends";
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
-const _excluded = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
+const _excluded = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "classes", "component", "components", "componentsProps", "scrollContainer", "manager"];
 import * as React from 'react';
 import PropTypes from 'prop-types';
 import { elementAcceptingRef, HTMLElementType } from '@mui/utils';
@@ -60,6 +60,7 @@ const Modal = /*#__PURE__*/React.forwardRef(function Modal(props, forwardedRef)
       disablePortal = false,
       disableRestoreFocus = false,
       disableScrollLock = false,
+      scrollContainer,
       hideBackdrop = false,
       keepMounted = false,
       onBackdropClick,
diff --git a/Modal/Modal.types.d.ts b/Modal/Modal.types.d.ts
index 02b3627201170f1c32ebb644504e7a18008a4269..ab5560cb33582d91ca36801378378cb1fa264242 100644
--- a/Modal/Modal.types.d.ts
+++ b/Modal/Modal.types.d.ts
@@ -27,6 +27,7 @@ export interface ModalOwnProps {
      * so it's simply `document.body` most of the time.
      */
     container?: PortalProps['container'];
+    scrollContainer?: Element;
     /**
      * If `true`, the modal will not automatically shift focus to itself when it opens, and
      * replace it to the last focused element when it closes.
diff --git a/legacy/Modal/Modal.js b/legacy/Modal/Modal.js
index de54a4d61385d0f31b16a150e5993cf1fc9b8475..e5d3cc3265e4b131fd8f5b15460e1227149b5681 100644
--- a/legacy/Modal/Modal.js
+++ b/legacy/Modal/Modal.js
@@ -77,7 +77,7 @@ var Modal = /*#__PURE__*/React.forwardRef(function Modal(props, forwardedRef) {
     slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,
     _props$slots = props.slots,
     slots = _props$slots === void 0 ? {} : _props$slots,
-    other = _objectWithoutProperties(props, ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"]);
+    other = _objectWithoutProperties(props, ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots", "scrollContainer"]);
   var propsWithDefaults = _extends({}, props, {
     closeAfterTransition: closeAfterTransition,
     disableAutoFocus: disableAutoFocus,
diff --git a/legacy/unstable_useModal/ModalManager.js b/legacy/unstable_useModal/ModalManager.js
index 208c4ab08d4f6fc6da451ae712e9cacb0c6787b7..fc335b04d2b5ba485ac0a6984206449f8ac4f68d 100644
--- a/legacy/unstable_useModal/ModalManager.js
+++ b/legacy/unstable_useModal/ModalManager.js
@@ -52,7 +52,7 @@ function findIndexOf(items, callback) {
 }
 function handleContainer(containerInfo, props) {
   var restoreStyle = [];
-  var container = containerInfo.container;
+  var container = props.scrollContainer || containerInfo.container;
   if (!props.disableScrollLock) {
     if (isOverflowing(container)) {
       // Compute the size before applying overflow hidden to avoid any scroll jumps.
@@ -77,7 +77,8 @@ function handleContainer(containerInfo, props) {
       });
     }
     var scrollContainer;
-    if (container.parentNode instanceof DocumentFragment) {
+    if (props.scrollContainer) scrollContainer = props.scrollContainer;
+    else if (container.parentNode instanceof DocumentFragment) {
       scrollContainer = ownerDocument(container).body;
     } else {
       // Support html overflow-y: auto for scroll stability between pages
diff --git a/legacy/unstable_useModal/useModal.js b/legacy/unstable_useModal/useModal.js
index b93b3281b99cf9a997e38f7c1c2acf110ba65ee0..24d72eecafcd889ac1cf997cf09c47f0a20d1acd 100644
--- a/legacy/unstable_useModal/useModal.js
+++ b/legacy/unstable_useModal/useModal.js
@@ -63,6 +63,7 @@ export function useModal(parameters) {
   };
   var handleMounted = function handleMounted() {
     manager.mount(getModal(), {
+      scrollContainer: parameters.scrollContainer,
       disableScrollLock: disableScrollLock
     });
 
diff --git a/modern/Modal/Modal.js b/modern/Modal/Modal.js
index 30b052cdbf52daced08af0bb3041c687ad6c394e..6b60e6530914c529cbf97a6b1f245f7379d5314b 100644
--- a/modern/Modal/Modal.js
+++ b/modern/Modal/Modal.js
@@ -2,7 +2,7 @@
 
 import _extends from "@babel/runtime/helpers/esm/extends";
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
-const _excluded = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
+const _excluded = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots", "scrollContainer"];
 import * as React from 'react';
 import PropTypes from 'prop-types';
 import { elementAcceptingRef, HTMLElementType } from '@mui/utils';
diff --git a/modern/unstable_useModal/ModalManager.js b/modern/unstable_useModal/ModalManager.js
index 8afc8d2ba4746c2b5cbba43e559b96ed075e1aed..b8b8bda02e0edafbe6a3312608772dcfb6cd7a85 100644
--- a/modern/unstable_useModal/ModalManager.js
+++ b/modern/unstable_useModal/ModalManager.js
@@ -49,7 +49,7 @@ function findIndexOf(items, callback) {
 }
 function handleContainer(containerInfo, props) {
   const restoreStyle = [];
-  const container = containerInfo.container;
+  const container = props.scrollContainer || containerInfo.container;
   if (!props.disableScrollLock) {
     if (isOverflowing(container)) {
       // Compute the size before applying overflow hidden to avoid any scroll jumps.
@@ -74,7 +74,8 @@ function handleContainer(containerInfo, props) {
       });
     }
     let scrollContainer;
-    if (container.parentNode instanceof DocumentFragment) {
+    if (props.scrollContainer) scrollContainer = props.scrollContainer;
+    else if (container.parentNode instanceof DocumentFragment) {
       scrollContainer = ownerDocument(container).body;
     } else {
       // Support html overflow-y: auto for scroll stability between pages
diff --git a/modern/unstable_useModal/useModal.js b/modern/unstable_useModal/useModal.js
index a727b86939976547fa1c92a3066dd8548fa03020..d9044c03c727ea8e31e75e41537c7528330a103f 100644
--- a/modern/unstable_useModal/useModal.js
+++ b/modern/unstable_useModal/useModal.js
@@ -32,6 +32,7 @@ export function useModal(parameters) {
     disableScrollLock = false,
     // @ts-ignore internal logic - Base UI supports the manager as a prop too
     manager = defaultManager,
+    scrollContainer,
     closeAfterTransition = false,
     onTransitionEnter,
     onTransitionExited,
@@ -60,6 +61,7 @@ export function useModal(parameters) {
   };
   const handleMounted = () => {
     manager.mount(getModal(), {
+      scrollContainer,
       disableScrollLock
     });
 
diff --git a/node/unstable_useModal/ModalManager.js b/node/unstable_useModal/ModalManager.js
index 953a225520914f90e464b544d83a60e7ed03188e..c241fabad93a193cb437aa6928780f5710896821 100644
--- a/node/unstable_useModal/ModalManager.js
+++ b/node/unstable_useModal/ModalManager.js
@@ -56,7 +56,7 @@ function findIndexOf(items, callback) {
 }
 function handleContainer(containerInfo, props) {
   const restoreStyle = [];
-  const container = containerInfo.container;
+  const container = props.scrollContainer || containerInfo.container;
   if (!props.disableScrollLock) {
     if (isOverflowing(container)) {
       // Compute the size before applying overflow hidden to avoid any scroll jumps.
diff --git a/unstable_useModal/ModalManager.d.ts b/unstable_useModal/ModalManager.d.ts
index 478880941a013db273ae72c30f5b3dd3607dde82..b705e2b5dd7a1be13b68b7bd330886162785c5de 100644
--- a/unstable_useModal/ModalManager.d.ts
+++ b/unstable_useModal/ModalManager.d.ts
@@ -1,5 +1,6 @@
 export interface ManagedModalProps {
     disableScrollLock?: boolean;
+    scrollContainer?: Element;
 }
 export declare function ariaHidden(element: Element, show: boolean): void;
 interface Modal {
diff --git a/unstable_useModal/ModalManager.js b/unstable_useModal/ModalManager.js
index 5c7d9c687f778138caf72126abe68e81679474a6..9529a4456f0b4c0d0dcce9d0aaf6ffa76659a4a7 100644
--- a/unstable_useModal/ModalManager.js
+++ b/unstable_useModal/ModalManager.js
@@ -49,7 +49,7 @@ function findIndexOf(items, callback) {
 }
 function handleContainer(containerInfo, props) {
   const restoreStyle = [];
-  const container = containerInfo.container;
+  const container = props.scrollContainer || containerInfo.container;
   if (!props.disableScrollLock) {
     if (isOverflowing(container)) {
       // Compute the size before applying overflow hidden to avoid any scroll jumps.
@@ -74,7 +74,8 @@ function handleContainer(containerInfo, props) {
       });
     }
     let scrollContainer;
-    if (container.parentNode instanceof DocumentFragment) {
+    if (props.container) scrollContainer = props.scrollContainer;
+    else if (container.parentNode instanceof DocumentFragment) {
       scrollContainer = ownerDocument(container).body;
     } else {
       // Support html overflow-y: auto for scroll stability between pages
diff --git a/unstable_useModal/useModal.js b/unstable_useModal/useModal.js
index 70f1af1d3514fc4b77b482511b0de5da0375f701..41ea36f1f087d7bf5a39e1e1d37ce1e46128f6ea 100644
--- a/unstable_useModal/useModal.js
+++ b/unstable_useModal/useModal.js
@@ -36,6 +36,7 @@ export function useModal(parameters) {
     onTransitionEnter,
     onTransitionExited,
     children,
+    scrollContainer,
     onClose,
     open,
     rootRef
@@ -60,6 +61,7 @@ export function useModal(parameters) {
   };
   const handleMounted = () => {
     manager.mount(getModal(), {
+      scrollContainer,
       disableScrollLock
     });
 
