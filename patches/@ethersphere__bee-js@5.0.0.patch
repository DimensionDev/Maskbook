diff --git a/dist/types/bee-debug.d.ts b/dist/types/bee-debug.d.ts
index 68deee97cfe2b26620a618e784ef416444c86139..39dd5da6148bd9c8accd4277a4643b6f9f88015d 100644
--- a/dist/types/bee-debug.d.ts
+++ b/dist/types/bee-debug.d.ts
@@ -1,5 +1,5 @@
-import type { Address, Peer, BalanceResponse, PeerBalance, ChequebookAddressResponse, ChequebookBalanceResponse, LastChequesResponse, LastChequesForPeerResponse, LastCashoutActionResponse, Settlements, AllSettlements, RemovePeerResponse, Topology, PingResponse, Health, NodeAddresses, ReserveState, ChainState, NumberString, ExtendedTag, PostageBatchBuckets, PostageBatch, TransactionInfo, TransactionHash, NodeInfo, BeeVersions, WalletBalance } from './types';
-import { BatchId, BeeOptions, CashoutOptions, PostageBatchOptions, RequestOptions, Tag } from './types';
+import type { Address, Peer, BalanceResponse, PeerBalance, ChequebookAddressResponse, ChequebookBalanceResponse, LastChequesResponse, LastChequesForPeerResponse, LastCashoutActionResponse, Settlements, AllSettlements, RemovePeerResponse, Topology, PingResponse, Health, NodeAddresses, ReserveState, ChainState, NumberString, ExtendedTag, PostageBatchBuckets, PostageBatch, TransactionInfo, TransactionHash, NodeInfo, BeeVersions, WalletBalance } from './types/index.js';
+import { BatchId, BeeOptions, CashoutOptions, PostageBatchOptions, RequestOptions, Tag } from './types/index.js';
 export declare class BeeDebug {
     /**
      * URL on which is the Debug API of Bee node exposed
diff --git a/dist/types/bee.d.ts b/dist/types/bee.d.ts
index 638794d0d796e932c3ef9978167deb0f17b77225..d36a5279ed215c62d35e79891cf51ef5a7ac3878 100644
--- a/dist/types/bee.d.ts
+++ b/dist/types/bee.d.ts
@@ -1,8 +1,8 @@
-import { Index, IndexBytes } from './feed';
-import { FeedType } from './feed/type';
-import { EthAddress } from './utils/eth';
-import type { AddressPrefix, AnyJson, BatchId, BeeOptions, CollectionUploadOptions, Data, FeedReader, FeedWriter, FileData, FileUploadOptions, JsonFeedOptions, Pin, PssMessageHandler, PssSubscription, PublicKey, Reference, Signer, SOCReader, SOCWriter, Tag, Topic, UploadOptions, UploadResultWithCid } from './types';
-import { AllTagsOptions, Collection, FeedManifestResult, Readable, ReferenceCidOrEns, ReferenceOrEns, RequestOptions, UploadResult } from './types';
+import { Index, IndexBytes } from './feed/index.js';
+import { FeedType } from './feed/type.js';
+import { EthAddress } from './utils/eth.js';
+import type { AddressPrefix, AnyJson, BatchId, BeeOptions, CollectionUploadOptions, Data, FeedReader, FeedWriter, FileData, FileUploadOptions, JsonFeedOptions, Pin, PssMessageHandler, PssSubscription, PublicKey, Reference, Signer, SOCReader, SOCWriter, Tag, Topic, UploadOptions, UploadResultWithCid } from './types/index.js';
+import { AllTagsOptions, Collection, FeedManifestResult, Readable, ReferenceCidOrEns, ReferenceOrEns, RequestOptions, UploadResult } from './types/index.js';
 /**
  * The main component that abstracts operations available on the main Bee API.
  *
diff --git a/dist/types/chunk/bmt.d.ts b/dist/types/chunk/bmt.d.ts
index f5e55fdbe5f478f8170b1d1074d9accc7e9a3bce..15048b7e83ae6d5ff9309e58767bbd085d15f8b7 100644
--- a/dist/types/chunk/bmt.d.ts
+++ b/dist/types/chunk/bmt.d.ts
@@ -1,4 +1,4 @@
-import { Bytes } from '../utils/bytes';
+import { Bytes } from '../utils/bytes.js';
 /**
  * Calculate a Binary Merkle Tree hash for a chunk
  *
diff --git a/dist/types/chunk/cac.d.ts b/dist/types/chunk/cac.d.ts
index 7e10f038f6feb90074f0f52f645cd8f03a5a3136..6636925dd1315ef11f32a9342bab21438bff902c 100644
--- a/dist/types/chunk/cac.d.ts
+++ b/dist/types/chunk/cac.d.ts
@@ -1,5 +1,5 @@
-import { BrandedType, PlainBytesReference } from '../types';
-import { Bytes, FlexBytes } from '../utils/bytes';
+import { BrandedType, PlainBytesReference } from '../types/index.js';
+import { Bytes, FlexBytes } from '../utils/bytes.js';
 export declare const MIN_PAYLOAD_SIZE = 1;
 export declare const MAX_PAYLOAD_SIZE = 4096;
 /**
diff --git a/dist/types/chunk/signer.d.ts b/dist/types/chunk/signer.d.ts
index 652ac49779578ed0a63bbf409d716377a312a388..258b90466d2f99e19d2187fbe67759ce5901c7c0 100644
--- a/dist/types/chunk/signer.d.ts
+++ b/dist/types/chunk/signer.d.ts
@@ -1,5 +1,5 @@
-import { EthAddress } from '../utils/eth';
-import { PrivateKeyBytes, Signature, Signer } from '../types';
+import { EthAddress } from '../utils/eth.js';
+import { PrivateKeyBytes, Signature, Signer } from '../types/index.js';
 /**
  * The default signer function that can be used for integrating with
  * other applications (e.g. wallets).
diff --git a/dist/types/chunk/soc.d.ts b/dist/types/chunk/soc.d.ts
index ecb555aeae985f8984f02e6d8e20d09d46227063..54f35bb8e3972b6e54496e44158003ef493dca95 100644
--- a/dist/types/chunk/soc.d.ts
+++ b/dist/types/chunk/soc.d.ts
@@ -1,7 +1,7 @@
-import { Bytes } from '../utils/bytes';
-import { Chunk } from './cac';
-import { UploadOptions, Signature, Signer, BatchId, Reference, Ky, PlainBytesReference } from '../types';
-import { EthAddress } from '../utils/eth';
+import { Bytes } from '../utils/bytes.js';
+import { Chunk } from './cac.js';
+import { UploadOptions, Signature, Signer, BatchId, Reference, Ky, PlainBytesReference } from '../types/index.js';
+import { EthAddress } from '../utils/eth.js';
 export declare type Identifier = Bytes<32>;
 /**
  * With single owner chunks, a user can assign arbitrary data to an
diff --git a/dist/types/chunk/span.d.ts b/dist/types/chunk/span.d.ts
index eda18dd029116f466927f648baf4af8ea273c946..a26b0aff17c0a0fa3b89b1bad8dc561a74460e03 100644
--- a/dist/types/chunk/span.d.ts
+++ b/dist/types/chunk/span.d.ts
@@ -1,4 +1,4 @@
-import { Bytes } from '../utils/bytes';
+import { Bytes } from '../utils/bytes.js';
 export declare const SPAN_SIZE = 8;
 /**
  * Create a span for storing the length of the chunk
diff --git a/dist/types/feed/identifier.d.ts b/dist/types/feed/identifier.d.ts
index 2190f2a658c252a13a26464b6d5899b8b8b52356..a598f16509a4ec39df78ec1f83bb88c1d53b68bc 100644
--- a/dist/types/feed/identifier.d.ts
+++ b/dist/types/feed/identifier.d.ts
@@ -1,4 +1,4 @@
-import { Topic } from '../types';
-import { Identifier } from '../chunk/soc';
-import { Index } from './index';
+import { Topic } from '../types/index.js';
+import { Identifier } from '../chunk/soc.js';
+import { Index } from './index.js';
 export declare function makeFeedIdentifier(topic: Topic, index: Index): Identifier;
diff --git a/dist/types/feed/index.d.ts b/dist/types/feed/index.d.ts
index 4c4ebfc9dab0bbed656a1c21caa71cb547893db7..9fcf43b2d9218113caee3ace20b3a61dea8435ba 100644
--- a/dist/types/feed/index.d.ts
+++ b/dist/types/feed/index.d.ts
@@ -1,9 +1,9 @@
-import { FeedUpdateOptions } from '../modules/feed';
-import { BatchId, BytesReference, FEED_INDEX_HEX_LENGTH, FeedReader, FeedWriter, Ky, PlainBytesReference, Reference, Signer, Topic, UploadOptions } from '../types';
-import { Bytes } from '../utils/bytes';
-import { HexString } from '../utils/hex';
-import { EthAddress, HexEthAddress } from '../utils/eth';
-import type { FeedType } from './type';
+import { FeedUpdateOptions } from '../modules/feed.js';
+import { BatchId, BytesReference, FEED_INDEX_HEX_LENGTH, FeedReader, FeedWriter, Ky, PlainBytesReference, Reference, Signer, Topic, UploadOptions } from '../types/index.js';
+import { Bytes } from '../utils/bytes.js';
+import { HexString } from '../utils/hex.js';
+import { EthAddress, HexEthAddress } from '../utils/eth.js';
+import type { FeedType } from './type.js';
 export interface Epoch {
     time: number;
     level: number;
diff --git a/dist/types/feed/json.d.ts b/dist/types/feed/json.d.ts
index 943a2bbd37752dfd81152b0b056032ebf3d865cf..07f16c45cc1b15f66e92bbdb357e9b75d8b00281 100644
--- a/dist/types/feed/json.d.ts
+++ b/dist/types/feed/json.d.ts
@@ -1,4 +1,4 @@
-import { FeedWriter, FeedReader, AnyJson, BatchId, Reference, RequestOptions } from '../types';
-import { Bee } from '../bee';
+import { FeedWriter, FeedReader, AnyJson, BatchId, Reference, RequestOptions } from '../types/index.js';
+import { Bee } from '../bee.js';
 export declare function getJsonData<T extends AnyJson>(bee: Bee, reader: FeedReader): Promise<T>;
 export declare function setJsonData(bee: Bee, writer: FeedWriter, postageBatchId: BatchId, data: AnyJson, options?: RequestOptions): Promise<Reference>;
diff --git a/dist/types/feed/retrievable.d.ts b/dist/types/feed/retrievable.d.ts
index 02402ef16c19cd5aef38a6edd3abddbeae87016d..a3f831726f06903fc9f46187761bc645bb380adf 100644
--- a/dist/types/feed/retrievable.d.ts
+++ b/dist/types/feed/retrievable.d.ts
@@ -1,5 +1,5 @@
-import { Bee } from '../bee';
-import { EthAddress } from '../utils/eth';
-import { RequestOptions, Topic } from '../types';
-import { Index } from './index';
+import { Bee } from '../bee.js';
+import { EthAddress } from '../utils/eth.js';
+import { RequestOptions, Topic } from '../types/index.js';
+import { Index } from './index.js';
 export declare function areAllSequentialFeedsUpdateRetrievable(bee: Bee, owner: EthAddress, topic: Topic, index: Index, options?: RequestOptions): Promise<boolean>;
diff --git a/dist/types/feed/topic.d.ts b/dist/types/feed/topic.d.ts
index e76fa3445c9b159e983630e8e41b92c3b90fed80..f3424aff8870f817dea9a48fbf2b2c789a528ea0 100644
--- a/dist/types/feed/topic.d.ts
+++ b/dist/types/feed/topic.d.ts
@@ -1,3 +1,3 @@
-import { Topic } from '../types';
+import { Topic } from '../types/index.js';
 export declare function makeTopic(topic: Uint8Array | string): Topic;
 export declare function makeTopicFromString(s: string): Topic;
diff --git a/dist/types/index.d.ts b/dist/types/index.d.ts
index 38ad532a9f2b9673663c0758a8b20b41102f1a76..8893e35dfc83b741740a423b06cf1e537606339e 100644
--- a/dist/types/index.d.ts
+++ b/dist/types/index.d.ts
@@ -1,9 +1,9 @@
-import { Bee } from './bee';
-import { BeeDebug } from './bee-debug';
-export * as Utils from './utils/expose';
-export * from './types';
-export * from './utils/error';
-export { SUPPORTED_BEE_VERSION, SUPPORTED_BEE_VERSION_EXACT } from './modules/debug/status';
+import { Bee } from './bee.js';
+import { BeeDebug } from './bee-debug.js';
+export * as Utils from './utils/expose.js';
+export * from './types/index.js';
+export * from './utils/error.js';
+export { SUPPORTED_BEE_VERSION, SUPPORTED_BEE_VERSION_EXACT } from './modules/debug/status.js';
 export { Bee, BeeDebug };
 declare global {
     interface Window {
diff --git a/dist/types/modules/bytes.d.ts b/dist/types/modules/bytes.d.ts
index b1701f20c723daf9e22624f1f2ec64258af9362d..921f651e3b69b81bf40a4e8a79aab21d8ba5fa10 100644
--- a/dist/types/modules/bytes.d.ts
+++ b/dist/types/modules/bytes.d.ts
@@ -1,5 +1,5 @@
-import type { BatchId, Data, Ky, ReferenceOrEns, UploadOptions } from '../types';
-import { UploadResult } from '../types';
+import type { BatchId, Data, Ky, ReferenceOrEns, UploadOptions } from '../types/index.js';
+import { UploadResult } from '../types/index.js';
 /**
  * Upload data to a Bee node
  *
diff --git a/dist/types/modules/bzz.d.ts b/dist/types/modules/bzz.d.ts
index d12791e91924847593d3a3eb9fb54355f460810a..4c8560406c5520df88c5e40ca667b3c1ddfa930e 100644
--- a/dist/types/modules/bzz.d.ts
+++ b/dist/types/modules/bzz.d.ts
@@ -1,4 +1,4 @@
-import { BatchId, Collection, CollectionUploadOptions, Data, FileData, FileUploadOptions, Ky, Readable, ReferenceOrEns, UploadResult } from '../types';
+import { BatchId, Collection, CollectionUploadOptions, Data, FileData, FileUploadOptions, Ky, Readable, ReferenceOrEns, UploadResult } from '../types/index.js';
 /**
  * Upload single file
  *
diff --git a/dist/types/modules/chunk.d.ts b/dist/types/modules/chunk.d.ts
index 32d6ed41cdf0fcc2adcbebd2d95f5e039846d2d5..811593147c4d675850967c9e3ca4881024ba53e8 100644
--- a/dist/types/modules/chunk.d.ts
+++ b/dist/types/modules/chunk.d.ts
@@ -1,4 +1,4 @@
-import type { BatchId, Data, Ky, Reference, ReferenceOrEns, UploadOptions } from '../types';
+import type { BatchId, Data, Ky, Reference, ReferenceOrEns, UploadOptions } from '../types/index.js';
 /**
  * Upload chunk to a Bee node
  *
diff --git a/dist/types/modules/debug/balance.d.ts b/dist/types/modules/debug/balance.d.ts
index 7992284c9c4a38be08e9df44298e6e32b3bef70a..6b95d299840a53e02a0c590f34d7d92e05737faf 100644
--- a/dist/types/modules/debug/balance.d.ts
+++ b/dist/types/modules/debug/balance.d.ts
@@ -1,4 +1,4 @@
-import type { PeerBalance, BalanceResponse, Ky } from '../../types';
+import type { PeerBalance, BalanceResponse, Ky } from '../../types/index.js';
 /**
  * Get the balances with all known peers including prepaid services
  *
diff --git a/dist/types/modules/debug/chequebook.d.ts b/dist/types/modules/debug/chequebook.d.ts
index f44f99f4f754c2f4899d29c022b3a7e02ae5bf6f..042e6f8dabb4fa8172ceda3a741e146afe3d16ed 100644
--- a/dist/types/modules/debug/chequebook.d.ts
+++ b/dist/types/modules/debug/chequebook.d.ts
@@ -1,4 +1,4 @@
-import type { ChequebookAddressResponse, ChequebookBalanceResponse, LastCashoutActionResponse, LastChequesForPeerResponse, LastChequesResponse, NumberString, Ky, CashoutOptions, TransactionHash } from '../../types';
+import type { ChequebookAddressResponse, ChequebookBalanceResponse, LastCashoutActionResponse, LastChequesForPeerResponse, LastChequesResponse, NumberString, Ky, CashoutOptions, TransactionHash } from '../../types/index.js';
 /**
  * Get the address of the chequebook contract used
  *
diff --git a/dist/types/modules/debug/chunk.d.ts b/dist/types/modules/debug/chunk.d.ts
index 8bcd65fecc4500344a3572b822c75a34eb477ebb..6ec23377a9b4eba58623ba33a3a10577a66ee7b2 100644
--- a/dist/types/modules/debug/chunk.d.ts
+++ b/dist/types/modules/debug/chunk.d.ts
@@ -1,4 +1,4 @@
-import type { BeeGenericResponse, Ky } from '../../types';
+import type { BeeGenericResponse, Ky } from '../../types/index.js';
 /**
  * Check if chunk at address exists locally
  *
diff --git a/dist/types/modules/debug/connectivity.d.ts b/dist/types/modules/debug/connectivity.d.ts
index 8a4d4ee25c4f666fe5ccda5ff2886f91cf7b471d..bbeeaae5c885fa0c43febe873733c23d749a8f2c 100644
--- a/dist/types/modules/debug/connectivity.d.ts
+++ b/dist/types/modules/debug/connectivity.d.ts
@@ -1,4 +1,4 @@
-import type { Ky, NodeAddresses, Peer, PingResponse, RemovePeerResponse, Topology } from '../../types';
+import type { Ky, NodeAddresses, Peer, PingResponse, RemovePeerResponse, Topology } from '../../types/index.js';
 export declare function getNodeAddresses(ky: Ky): Promise<NodeAddresses>;
 export declare function getPeers(ky: Ky): Promise<Peer[]>;
 export declare function getBlocklist(ky: Ky): Promise<Peer[]>;
diff --git a/dist/types/modules/debug/settlements.d.ts b/dist/types/modules/debug/settlements.d.ts
index db628721353c2bdcca90a1c64ba174ade142aa6d..9c3ed56c0de128cfd617d46ceea24802ccdac600 100644
--- a/dist/types/modules/debug/settlements.d.ts
+++ b/dist/types/modules/debug/settlements.d.ts
@@ -1,4 +1,4 @@
-import type { Settlements, AllSettlements, Ky } from '../../types';
+import type { Settlements, AllSettlements, Ky } from '../../types/index.js';
 /**
  * Get amount of sent and received from settlements with a peer
  *
diff --git a/dist/types/modules/debug/stamps.d.ts b/dist/types/modules/debug/stamps.d.ts
index edf6d8d9b839436253655da1b99867270ed00f95..2bd2c7d640ce02aa0c99f4c27dc3a6131cf4187c 100644
--- a/dist/types/modules/debug/stamps.d.ts
+++ b/dist/types/modules/debug/stamps.d.ts
@@ -1,4 +1,4 @@
-import type { BatchId, PostageBatch, Ky, NumberString, PostageBatchBuckets, PostageBatchOptions } from '../../types';
+import type { BatchId, PostageBatch, Ky, NumberString, PostageBatchBuckets, PostageBatchOptions } from '../../types/index.js';
 export declare function getAllPostageBatches(ky: Ky): Promise<PostageBatch[]>;
 export declare function getPostageBatch(ky: Ky, postageBatchId: BatchId): Promise<PostageBatch>;
 export declare function getPostageBatchBuckets(ky: Ky, postageBatchId: BatchId): Promise<PostageBatchBuckets>;
diff --git a/dist/types/modules/debug/states.d.ts b/dist/types/modules/debug/states.d.ts
index 57798a2ac81a93dfe70b5a1cb7f26eb6766c4939..3f17085c110726eb8430db8458928b1d33764f45 100644
--- a/dist/types/modules/debug/states.d.ts
+++ b/dist/types/modules/debug/states.d.ts
@@ -1,4 +1,4 @@
-import { ChainState, Ky, ReserveState, WalletBalance } from '../../types';
+import { ChainState, Ky, ReserveState, WalletBalance } from '../../types/index.js';
 /**
  * Get state of reserve
  *
diff --git a/dist/types/modules/debug/status.d.ts b/dist/types/modules/debug/status.d.ts
index fada460a01d52177a4891c3fb22ffcd92b71f586..542c7989f36d287a5cbdc9ae26c245b75f225571 100644
--- a/dist/types/modules/debug/status.d.ts
+++ b/dist/types/modules/debug/status.d.ts
@@ -1,6 +1,6 @@
-import type { Health, NodeInfo } from '../../types/debug';
-import { Ky } from '../../types';
-import { BeeVersions } from '../../types/debug';
+import type { Health, NodeInfo } from '../../types/debug.js';
+import { Ky } from '../../types/index.js';
+import { BeeVersions } from '../../types/debug.js';
 export declare const SUPPORTED_BEE_VERSION_EXACT = "1.7.0-bbf13011";
 export declare const SUPPORTED_API_VERSION = "3.0.2";
 export declare const SUPPORTED_DEBUG_API_VERSION = "3.0.2";
diff --git a/dist/types/modules/debug/tag.d.ts b/dist/types/modules/debug/tag.d.ts
index 09019cb7050fe7900e6e81f0d8180c4c4fbc606b..7a8b7bbdd65323a65e0d0a498140b0cbb8eb1cb7 100644
--- a/dist/types/modules/debug/tag.d.ts
+++ b/dist/types/modules/debug/tag.d.ts
@@ -1,4 +1,4 @@
-import { ExtendedTag, Ky } from '../../types';
+import { ExtendedTag, Ky } from '../../types/index.js';
 /**
  * Retrieve tag with extended information from Bee node
  *
diff --git a/dist/types/modules/debug/transactions.d.ts b/dist/types/modules/debug/transactions.d.ts
index b86b8280bbf005df0be00bdf48234d922bf494b9..19e05c79e0f89fd0dcc0985ef735b1959b30af9d 100644
--- a/dist/types/modules/debug/transactions.d.ts
+++ b/dist/types/modules/debug/transactions.d.ts
@@ -1,4 +1,4 @@
-import { Ky, NumberString, TransactionHash, TransactionInfo } from '../../types';
+import { Ky, NumberString, TransactionHash, TransactionInfo } from '../../types/index.js';
 /**
  * Get list of all pending transactions
  *
diff --git a/dist/types/modules/feed.d.ts b/dist/types/modules/feed.d.ts
index 60e09b7b543efe14914e131969e0f9fb90d26f12..bfc8f762ade8e615d488311392e6f41d2569ce3d 100644
--- a/dist/types/modules/feed.d.ts
+++ b/dist/types/modules/feed.d.ts
@@ -1,6 +1,6 @@
-import { BatchId, Ky, Reference, ReferenceResponse, Topic } from '../types';
-import { FeedType } from '../feed/type';
-import { HexEthAddress } from '../utils/eth';
+import { BatchId, Ky, Reference, ReferenceResponse, Topic } from '../types/index.js';
+import { FeedType } from '../feed/type.js';
+import { HexEthAddress } from '../utils/eth.js';
 export interface CreateFeedOptions {
     type?: FeedType;
 }
diff --git a/dist/types/modules/pinning.d.ts b/dist/types/modules/pinning.d.ts
index b5be9f5232896cad1fb6fc592d92217962179be6..f1caf3ab5b9cf00c6b84f3c05898566675354171 100644
--- a/dist/types/modules/pinning.d.ts
+++ b/dist/types/modules/pinning.d.ts
@@ -1,4 +1,4 @@
-import type { Ky, Pin, Reference } from '../types';
+import type { Ky, Pin, Reference } from '../types/index.js';
 export interface GetAllPinResponse {
     references: Reference[];
 }
diff --git a/dist/types/modules/pss.d.ts b/dist/types/modules/pss.d.ts
index 40894d3e987e0a8e28f4bb62e5b29faa4f8fd6fe..7d73a373151786101dc4c5fceb8ba1f530f2d538 100644
--- a/dist/types/modules/pss.d.ts
+++ b/dist/types/modules/pss.d.ts
@@ -1,6 +1,6 @@
 /// <reference types="ws" />
 import WebSocket from 'isomorphic-ws';
-import type { BatchId, Ky, PublicKey } from '../types';
+import type { BatchId, Ky, PublicKey } from '../types/index.js';
 /**
  * Send to recipient or target with Postal Service for Swarm
  *
diff --git a/dist/types/modules/soc.d.ts b/dist/types/modules/soc.d.ts
index 89515db9428fb86ce384dcba929e06fc224881fe..76896eb187d98054f218fabc9d04138e453e30e8 100644
--- a/dist/types/modules/soc.d.ts
+++ b/dist/types/modules/soc.d.ts
@@ -1,4 +1,4 @@
-import { BatchId, Ky, Reference, UploadOptions } from '../types';
+import { BatchId, Ky, Reference, UploadOptions } from '../types/index.js';
 /**
  * Upload single owner chunk (SOC) to a Bee node
  *
diff --git a/dist/types/modules/status.d.ts b/dist/types/modules/status.d.ts
index fe52eb988193c23ac1f54e17669b3439b7768498..d5a7004ba3fb16b87388f428f8b5a4e2d7275596 100644
--- a/dist/types/modules/status.d.ts
+++ b/dist/types/modules/status.d.ts
@@ -1,4 +1,4 @@
-import { Ky } from '../types';
+import { Ky } from '../types/index.js';
 /**
  * Ping the base bee URL. If connection was not successful throw error
  *
diff --git a/dist/types/modules/stewardship.d.ts b/dist/types/modules/stewardship.d.ts
index 6169d20e5b3c709f7c0b18b7ad8f69ed19da466c..7eba608de5a09fbff4422df22b9bb60d7a4300fa 100644
--- a/dist/types/modules/stewardship.d.ts
+++ b/dist/types/modules/stewardship.d.ts
@@ -1,4 +1,4 @@
-import type { Ky, ReferenceOrEns } from '../types';
+import type { Ky, ReferenceOrEns } from '../types/index.js';
 /**
  * Reupload locally pinned data
  * @param ky Ky instance
diff --git a/dist/types/modules/tag.d.ts b/dist/types/modules/tag.d.ts
index efdcbb1f8cbf1aa193e1b79b8ce5231866faf828..193d0630cdf6ab991b65fca27cca2a95a113ed42 100644
--- a/dist/types/modules/tag.d.ts
+++ b/dist/types/modules/tag.d.ts
@@ -1,4 +1,4 @@
-import { Ky, Reference, Tag } from '../types';
+import { Ky, Reference, Tag } from '../types/index.js';
 /**
  * Create new tag on the Bee node
  *
diff --git a/dist/types/types/debug.d.ts b/dist/types/types/debug.d.ts
index ab85091f350957049b19a1a309b734f6e041fcd7..1062066cbb74c6477d2d8fac1ba31eb4359859e2 100644
--- a/dist/types/types/debug.d.ts
+++ b/dist/types/types/debug.d.ts
@@ -1,5 +1,5 @@
-import { PublicKey, NumberString, Reference, TransactionHash, RequestOptions } from './index';
-import { HexEthAddress } from '../utils/eth';
+import { PublicKey, NumberString, Reference, TransactionHash, RequestOptions } from './index.js';
+import { HexEthAddress } from '../utils/eth.js';
 /**
  * Object that contains information about progress of upload of data to network.
  *
diff --git a/dist/types/types/index.d.ts b/dist/types/types/index.d.ts
index 50071064f15572815c327d033d5ddafb2584e4ca..fe10f6b8112b68a46d85555ba0e417f2bae0fb1b 100644
--- a/dist/types/types/index.d.ts
+++ b/dist/types/types/index.d.ts
@@ -1,18 +1,18 @@
 /// <reference types="node" />
-import type { Identifier, SingleOwnerChunk } from '../chunk/soc';
-import type { FeedUploadOptions } from '../feed';
-import type { FeedType } from '../feed/type';
-import type { FeedUpdateOptions, FetchFeedUpdateResponse } from '../modules/feed';
-import type { Bytes } from '../utils/bytes';
-import type { BeeError } from '../utils/error';
-import type { EthAddress, HexEthAddress } from '../utils/eth';
-import type { HexString } from '../utils/hex';
+import type { Identifier, SingleOwnerChunk } from '../chunk/soc.js';
+import type { FeedUploadOptions } from '../feed/index.js';
+import type { FeedType } from '../feed/type.js';
+import type { FeedUpdateOptions, FetchFeedUpdateResponse } from '../modules/feed.js';
+import type { Bytes } from '../utils/bytes.js';
+import type { BeeError } from '../utils/error.js';
+import type { EthAddress, HexEthAddress } from '../utils/eth.js';
+import type { HexString } from '../utils/hex.js';
 import type ky from 'ky-universal';
 import type { Readable as NativeReadable } from 'stream';
 import type { Readable as CompatibilityReadable } from 'readable-stream';
 import type { ReadableStream as ReadableStreamPonyfill } from 'web-streams-polyfill';
-import { Options as KyOptions } from './ky-options';
-export * from './debug';
+import { Options as KyOptions } from './ky-options.js';
+export * from './debug.js';
 export declare type Ky = typeof ky;
 export interface Dictionary<T> {
     [Key: string]: T;
diff --git a/dist/types/types/ky-options.d.ts b/dist/types/types/ky-options.d.ts
index 077e8307454073d4f710df8388f7bf955ea3c19d..2794c63f6016a3833d90d865cc8adf1bc9d459a9 100644
--- a/dist/types/types/ky-options.d.ts
+++ b/dist/types/types/ky-options.d.ts
@@ -4,9 +4,9 @@
  * @author https://github.com/sindresorhus
  * @licence MIT https://github.com/sindresorhus/ky/blob/main/license
  */
-import type { LiteralUnion, Required } from './ky-universal/common';
-import type { Hooks } from './ky-universal/hooks';
-import type { RetryOptions } from './ky-universal/retry';
+import type { LiteralUnion, Required } from './ky-universal/common.js';
+import type { Hooks } from './ky-universal/hooks.js';
+import type { RetryOptions } from './ky-universal/retry.js';
 export declare type SearchParamsInit = string | string[][] | Record<string, string> | URLSearchParams | undefined;
 export declare type SearchParamsOption = SearchParamsInit | Record<string, string | number | boolean> | Array<Array<string | number | boolean>>;
 export declare type HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'head' | 'delete';
@@ -26,41 +26,41 @@ export declare type KyHeadersInit = HeadersInit | Record<string, string | undefi
 export interface Options extends Omit<RequestInit, 'headers'> {
     /**
      HTTP method used to make the request.
-  
+
      Internally, the standard methods (`GET`, `POST`, `PUT`, `PATCH`, `HEAD` and `DELETE`) are uppercased in order to avoid server errors due to case sensitivity.
      */
     method?: LiteralUnion<HTTPMethod, string>;
     /**
      HTTP headers used to make the request.
-  
+
      You can pass a `Headers` instance or a plain object.
-  
+
      You can remove a header with `.extend()` by passing the header with an `undefined` value.
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      const url = 'https://sindresorhus.com';
-  
+
      const original = ky.create({
           headers: {
               rainbow: 'rainbow',
               unicorn: 'unicorn'
           }
       });
-  
+
      const extended = original.extend({
           headers: {
               rainbow: undefined
           }
       });
-  
+
      const response = await extended(url).json();
-  
+
      console.log('rainbow' in response);
      //=> false
-  
+
      console.log('unicorn' in response);
      //=> true
      ```
@@ -68,24 +68,24 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     headers?: KyHeadersInit;
     /**
      Shortcut for sending JSON. Use this instead of the `body` option.
-  
+
      Accepts any plain object or value, which will be `JSON.stringify()`'d and sent in the body with the correct header set.
      */
     json?: unknown;
     /**
      User-defined JSON-parsing function.
-  
+
      Use-cases:
      1. Parse JSON via the [`bourne` package](https://github.com/hapijs/bourne) to protect from prototype pollution.
      2. Parse JSON with [`reviver` option of `JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).
-  
+
      @default JSON.parse()
-  
+
      @example
      ```
      import ky from 'ky';
      import bourne from '@hapijs/bourne';
-  
+
      const json = await ky('https://example.com', {
           parseJson: text => bourne(text)
       }).json();
@@ -94,28 +94,28 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     parseJson?: (text: string) => unknown;
     /**
      Search parameters to include in the request URL. Setting this will override all existing search parameters in the input URL.
-  
+
      Accepts any value supported by [`URLSearchParams()`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams).
      */
     searchParams?: SearchParamsOption;
     /**
      A prefix to prepend to the `input` URL when making the request. It can be any valid URL, either relative or absolute. A trailing slash `/` is optional and will be added automatically, if needed, when it is joined with `input`. Only takes effect when `input` is a string. The `input` argument cannot start with a slash `/` when using this option.
-  
+
      Useful when used with `ky.extend()` to create niche-specific Ky-instances.
-  
+
      Notes:
      - After `prefixUrl` and `input` are joined, the result is resolved against the [base URL](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI) of the page (if any).
      - Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion about how the `input` URL is handled, given that `input` will not follow the normal URL resolution rules when `prefixUrl` is being used, which changes the meaning of a leading slash.
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      // On https://example.com
-  
+
      const response = await ky('unicorn', {prefixUrl: '/api'});
      //=> 'https://example.com/api/unicorn'
-  
+
      const response = await ky('unicorn', {prefixUrl: 'https://cats.com'});
      //=> 'https://cats.com/unicorn'
      ```
@@ -123,17 +123,17 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     prefixUrl?: URL | string;
     /**
      An object representing `limit`, `methods`, `statusCodes` and `maxRetryAfter` fields for maximum retry count, allowed methods, allowed status codes and maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time.
-  
+
      If `retry` is a number, it will be used as `limit` and other defaults will remain in place.
-  
+
      If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`. If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.
-  
+
      Delays between retries is calculated with the function `0.3 * (2 ** (retry - 1)) * 1000`, where `retry` is the attempt number (starts from 1).
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      const json = await ky('https://example.com', {
           retry: {
               limit: 10,
@@ -147,7 +147,7 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     /**
      Timeout in milliseconds for getting a response. Can not be greater than 2147483647.
      If set to `false`, there will be no timeout.
-  
+
      @default 10000
      */
     timeout?: number | false;
@@ -157,21 +157,21 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     hooks?: Hooks;
     /**
      Throw an `HTTPError` when, after following redirects, the response has a non-2xx status code. To also throw for redirects instead of following them, set the [`redirect`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) option to `'manual'`.
-  
+
      Setting this to `false` may be useful if you are checking for resource availability and are expecting error responses.
-  
+
      @default true
      */
     throwHttpErrors?: boolean;
     /**
      Download progress event handler.
-  
+
      @param chunk - Note: It's empty for the first call.
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      const response = await ky('https://example.com', {
           onDownloadProgress: (progress, chunk) => {
               // Example output:
@@ -186,18 +186,18 @@ export interface Options extends Omit<RequestInit, 'headers'> {
     /**
      User-defined `fetch` function.
      Has to be fully compatible with the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) standard.
-  
+
      Use-cases:
      1. Use custom `fetch` implementations like [`isomorphic-unfetch`](https://www.npmjs.com/package/isomorphic-unfetch).
      2. Use the `fetch` wrapper function provided by some frameworks that use server-side rendering (SSR).
-  
+
      @default fetch
-  
+
      @example
      ```
      import ky from 'ky';
      import fetch from 'isomorphic-unfetch';
-  
+
      const json = await ky('https://example.com', {fetch}).json();
      ```
      */
diff --git a/dist/types/types/ky-universal/hooks.d.ts b/dist/types/types/ky-universal/hooks.d.ts
index 70046b48498d27e51c29abae5b6c8964530ae328..0ea0aaba6df4d7b7e57fa8092ad38d8b93657999 100644
--- a/dist/types/types/ky-universal/hooks.d.ts
+++ b/dist/types/types/ky-universal/hooks.d.ts
@@ -4,7 +4,7 @@
  * @author https://github.com/sindresorhus
  * @licence MIT https://github.com/sindresorhus/ky/blob/main/license
  */
-import type { NormalizedOptions } from '../ky-options';
+import type { NormalizedOptions } from '../ky-options.js';
 export declare const stop: unique symbol;
 export declare type BeforeRequestHook = (request: Request, options: NormalizedOptions) => Request | Response | void | Promise<Request | Response | void>;
 export declare type BeforeRetryState = {
@@ -19,23 +19,23 @@ export declare type AfterResponseHook = (request: Request, options: NormalizedOp
 export interface Hooks {
     /**
      This hook enables you to modify the request right before it is sent. Ky will make no further changes to the request after this. The hook function receives normalized input and options as arguments. You could, forf example, modiy `options.headers` here.
-  
+
      A [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from this hook to completely avoid making a HTTP request. This can be used to mock a request, check an internal cache, etc. An **important** consideration when returning a `Response` from this hook is that all the following hooks will be skipped, so **ensure you only return a `Response` from the last hook**.
-  
+
      @default []
      */
     beforeRequest?: BeforeRequestHook[];
     /**
      This hook enables you to modify the request right before retry. Ky will make no further changes to the request after this. The hook function receives an object with the normalized request and options, an error instance, and the retry count. You could, for example, modify `request.headers` here.
-  
+
      If the request received a response, the error will be of type `HTTPError` and the `Response` object will be available at `error.response`. Be aware that some types of errors, such as network errors, inherently mean that a response was not received. In that case, the error will not be an instance of `HTTPError`.
-  
+
      You can prevent Ky from retrying the request by throwing an error. Ky will not handle it in any way and the error will be propagated to the request initiator. The rest of the `beforeRetry` hooks will not be called in this case. Alternatively, you can return the [`ky.stop`](#ky.stop) symbol to do the same thing but without propagating an error (this has some limitations, see `ky.stop` docs for details).
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      const response = await ky('https://example.com', {
           hooks: {
               beforeRetry: [
@@ -47,39 +47,39 @@ export interface Hooks {
           }
       });
      ```
-  
+
      @default []
      */
     beforeRetry?: BeforeRetryHook[];
     /**
      This hook enables you to read and optionally modify the response. The hook function receives normalized input, options, and a clone of the response as arguments. The return value of the hook function will be used by Ky as the response object if it's an instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response).
-  
+
      @default []
-  
+
      @example
      ```
      import ky from 'ky';
-  
+
      const response = await ky('https://example.com', {
           hooks: {
               afterResponse: [
                   (_input, _options, response) => {
                       // You could do something with the response, for example, logging.
                       log(response);
-  
+
                       // Or return a `Response` instance to overwrite the response.
                       return new Response('A different response', {status: 200});
                   },
-  
+
                   // Or retry with a fresh token on a 403 error
                   async (input, options, response) => {
                       if (response.status === 403) {
                           // Get a fresh token
                           const token = await ky('https://example.com/token').text();
-  
+
                           // Retry with the token
                           options.headers.set('Authorization', `token ${token}`);
-  
+
                           return ky(input, options);
                       }
                   }
diff --git a/dist/types/utils/bytes.d.ts b/dist/types/utils/bytes.d.ts
index c205b806bf2443e0158b56b990b3c0516402ef6b..47be6bf3022bd10c477655f2d2092e6d763734e6 100644
--- a/dist/types/utils/bytes.d.ts
+++ b/dist/types/utils/bytes.d.ts
@@ -5,7 +5,7 @@
  * generic `Length` type parameter which is runtime compatible with
  * the original, because it extends from the `number` type.
  */
-import { Data } from '../types';
+import { Data } from '../types/index.js';
 export interface Bytes<Length extends number> extends Uint8Array {
     readonly length: Length;
 }
diff --git a/dist/types/utils/collection.browser.d.ts b/dist/types/utils/collection.browser.d.ts
index 713ff7162ecb14007b85901ea9a6d5331f1af196..f5b108984f31443cf1ea5f0befc91047869eb597 100644
--- a/dist/types/utils/collection.browser.d.ts
+++ b/dist/types/utils/collection.browser.d.ts
@@ -1,4 +1,4 @@
-import { Collection } from '../types';
+import { Collection } from '../types/index.js';
 /**
  * Creates array in the format of Collection with data loaded from directory on filesystem.
  * The function loads all the data into memory!
diff --git a/dist/types/utils/collection.d.ts b/dist/types/utils/collection.d.ts
index 9052e607455b60e4d300f2ca98f8a67ad5011fd8..b1b591b160df16992871a774fefb4077dac0aef2 100644
--- a/dist/types/utils/collection.d.ts
+++ b/dist/types/utils/collection.d.ts
@@ -1,4 +1,4 @@
-import { Collection } from '../types';
+import { Collection } from '../types/index.js';
 export declare function isCollection(data: unknown): data is Collection<Uint8Array>;
 export declare function assertCollection(data: unknown): asserts data is Collection<Uint8Array>;
 export declare function makeCollectionFromFileList(fileList: FileList | File[]): Promise<Collection<Uint8Array>>;
diff --git a/dist/types/utils/collection.node.d.ts b/dist/types/utils/collection.node.d.ts
index 713ff7162ecb14007b85901ea9a6d5331f1af196..f5b108984f31443cf1ea5f0befc91047869eb597 100644
--- a/dist/types/utils/collection.node.d.ts
+++ b/dist/types/utils/collection.node.d.ts
@@ -1,4 +1,4 @@
-import { Collection } from '../types';
+import { Collection } from '../types/index.js';
 /**
  * Creates array in the format of Collection with data loaded from directory on filesystem.
  * The function loads all the data into memory!
diff --git a/dist/types/utils/data.browser.d.ts b/dist/types/utils/data.browser.d.ts
index 69ec49ea52c28342b24337587b8cd063bc4a7856..8db415cb7d7032d5e9c01646d12f54eaaf1fc8c5 100644
--- a/dist/types/utils/data.browser.d.ts
+++ b/dist/types/utils/data.browser.d.ts
@@ -1,4 +1,4 @@
-import { Readable } from '../types';
+import { Readable } from '../types/index.js';
 /**
  * Validates input and converts to Uint8Array
  *
diff --git a/dist/types/utils/data.d.ts b/dist/types/utils/data.d.ts
index afb76e2745b18d9042d4808cd44435a4e4616fd1..c0facb5427ebd10a56574517a46db32d0375a656 100644
--- a/dist/types/utils/data.d.ts
+++ b/dist/types/utils/data.d.ts
@@ -1,6 +1,6 @@
 import type { Data } from 'ws';
 import BlobPolyfill from 'fetch-blob';
-import { Readable } from '../types';
+import { Readable } from '../types/index.js';
 /**
  * Prepare data for valid input for node-fetch.
  *
diff --git a/dist/types/utils/error.d.ts b/dist/types/utils/error.d.ts
index 0fc5490c841be49430023d53f48c1c68c9d43ebb..5f346856d7ff5df9f8d2679515cb6a6d0fee1a8f 100644
--- a/dist/types/utils/error.d.ts
+++ b/dist/types/utils/error.d.ts
@@ -1,4 +1,4 @@
-import { KyRequestOptions } from '../types';
+import { KyRequestOptions } from '../types/index.js';
 export declare class BeeError extends Error {
     constructor(message: string);
 }
diff --git a/dist/types/utils/eth.d.ts b/dist/types/utils/eth.d.ts
index 209a7b6ad9f721ae39f54dbfcbce2edd64f7e12e..f930ff4c1d3e4342f4e0ac9ce4f68ffc22447979 100644
--- a/dist/types/utils/eth.d.ts
+++ b/dist/types/utils/eth.d.ts
@@ -1,6 +1,6 @@
-import { BrandedString, Signer } from '../types';
-import { HexString } from './hex';
-import { Bytes } from './bytes';
+import { BrandedString, Signer } from '../types/index.js';
+import { HexString } from './hex.js';
+import { Bytes } from './bytes.js';
 export declare type OverlayAddress = BrandedString<'OverlayAddress'>;
 export declare type EthAddress = Bytes<20>;
 export declare type HexEthAddress = HexString<40>;
diff --git a/dist/types/utils/expose.d.ts b/dist/types/utils/expose.d.ts
index 91968ad977923fce3c632d9e7411b576ab0a940f..36da8af8e5c128dea49811239b038b4be9b2f2b0 100644
--- a/dist/types/utils/expose.d.ts
+++ b/dist/types/utils/expose.d.ts
@@ -1,9 +1,9 @@
-export { getCollectionSize } from './collection';
-export { getFolderSize } from './collection.node';
-export { Bytes, FlexBytes, isBytes, assertBytes, isFlexBytes, assertFlexBytes, bytesAtOffset, flexBytesAtOffset, bytesEqual, } from './bytes';
-export { HexString, PrefixedHexString, makeHexString, hexToBytes, bytesToHex, intToHex, isHexString, assertHexString, assertPrefixedHexString, } from './hex';
-export { EthAddress, makeEthAddress, makeHexEthAddress, isHexEthAddress, ethToSwarmAddress, toLittleEndian, fromLittleEndian, makeEthereumWalletSigner, } from './eth';
-export { readableWebToNode, readableNodeToWeb, isReadableStream, isNodeReadable, normalizeToReadableStream, isReadable, } from './stream';
-export { keccak256Hash } from './hash';
-export { makeMaxTarget } from './pss';
-export { getStampUsage } from './stamps';
+export { getCollectionSize } from './collection.js';
+export { getFolderSize } from './collection.node.js';
+export { Bytes, FlexBytes, isBytes, assertBytes, isFlexBytes, assertFlexBytes, bytesAtOffset, flexBytesAtOffset, bytesEqual, } from './bytes.js';
+export { HexString, PrefixedHexString, makeHexString, hexToBytes, bytesToHex, intToHex, isHexString, assertHexString, assertPrefixedHexString, } from './hex.js';
+export { EthAddress, makeEthAddress, makeHexEthAddress, isHexEthAddress, ethToSwarmAddress, toLittleEndian, fromLittleEndian, makeEthereumWalletSigner, } from './eth.js';
+export { readableWebToNode, readableNodeToWeb, isReadableStream, isNodeReadable, normalizeToReadableStream, isReadable, } from './stream.js';
+export { keccak256Hash } from './hash.js';
+export { makeMaxTarget } from './pss.js';
+export { getStampUsage } from './stamps.js';
diff --git a/dist/types/utils/hash.d.ts b/dist/types/utils/hash.d.ts
index 1e3c41b2dd37d3c3e69951ae1b64a5f91cac8eb3..7b4731998afe9ed9522ef056f18d8113c5c4ed87 100644
--- a/dist/types/utils/hash.d.ts
+++ b/dist/types/utils/hash.d.ts
@@ -1,5 +1,5 @@
 import { Message } from 'js-sha3';
-import { Bytes } from './bytes';
+import { Bytes } from './bytes.js';
 /**
  * Helper function for calculating the keccak256 hash with
  * correct types.
diff --git a/dist/types/utils/headers.d.ts b/dist/types/utils/headers.d.ts
index b5c7321b9633ceb2f62a5cc4cdb35686ca45708f..0dbd5812c385221e48dce6c8edaaf1e5c3cdacfe 100644
--- a/dist/types/utils/headers.d.ts
+++ b/dist/types/utils/headers.d.ts
@@ -1,3 +1,3 @@
-import { BatchId, FileHeaders, UploadOptions } from '../types';
+import { BatchId, FileHeaders, UploadOptions } from '../types/index.js';
 export declare function readFileHeaders(headers: Headers): FileHeaders;
 export declare function extractUploadHeaders(postageBatchId: BatchId, options?: UploadOptions): Record<string, string>;
diff --git a/dist/types/utils/hex.d.ts b/dist/types/utils/hex.d.ts
index 32be6c5e35cb14a59ca24d23e2d876747a113e2e..ed94a9b6f3181445d522d672a487a92e4f558246 100644
--- a/dist/types/utils/hex.d.ts
+++ b/dist/types/utils/hex.d.ts
@@ -1,5 +1,5 @@
-import { Bytes } from './bytes';
-import { BrandedType, FlavoredType } from '../types';
+import { Bytes } from './bytes.js';
+import { BrandedType, FlavoredType } from '../types/index.js';
 /**
  * Nominal type to represent hex strings WITHOUT '0x' prefix.
  * For example for 32 bytes hex representation you have to use 64 length.
diff --git a/dist/types/utils/http.d.ts b/dist/types/utils/http.d.ts
index d6290901f414c8d41f719b429521281b6b9fe401..2ff2091debe6316fb3d3fed4e51036b470dc4d2a 100644
--- a/dist/types/utils/http.d.ts
+++ b/dist/types/utils/http.d.ts
@@ -1,6 +1,6 @@
-import type { BeeRequest, BeeResponse, HookCallback, Ky } from '../types';
+import type { BeeRequest, BeeResponse, HookCallback, Ky } from '../types/index.js';
 import { Options as KyOptions } from 'ky-universal';
-import { KyRequestOptions } from '../types';
+import { KyRequestOptions } from '../types/index.js';
 interface KyResponse<T> extends Response {
     data: T;
 }
diff --git a/dist/types/utils/pss.d.ts b/dist/types/utils/pss.d.ts
index 855a9d661a44814a3e3224e52c9a052b7d2caf50..26c004c04d2260ca8cf6a30455d018f44f6ebc19 100644
--- a/dist/types/utils/pss.d.ts
+++ b/dist/types/utils/pss.d.ts
@@ -1,4 +1,4 @@
-import { AddressPrefix } from '../types';
+import { AddressPrefix } from '../types/index.js';
 /**
  * Utility function that for given strings/reference takes the most specific
  * target that Bee node will except.
diff --git a/dist/types/utils/reference.d.ts b/dist/types/utils/reference.d.ts
index 18380295d3fa6fc3410fdb90505f3e4326052274..9795b8172aab1ca9c0efdb18185273c430b69001 100644
--- a/dist/types/utils/reference.d.ts
+++ b/dist/types/utils/reference.d.ts
@@ -1,2 +1,2 @@
-import { BytesReference, Reference } from '../types';
+import { BytesReference, Reference } from '../types/index.js';
 export declare function makeBytesReference(reference: Uint8Array | BytesReference | Reference, offset?: number): BytesReference;
diff --git a/dist/types/utils/stamps.d.ts b/dist/types/utils/stamps.d.ts
index 5145d7e6bf93aee555cac902965ec0f99157cd07..fead961cf6f2a8527a65dd326c63f53dbf9b8d75 100644
--- a/dist/types/utils/stamps.d.ts
+++ b/dist/types/utils/stamps.d.ts
@@ -1,4 +1,4 @@
-import { PostageBatch } from '../types';
+import { PostageBatch } from '../types/index.js';
 /**
  * Utility function that calculates usage of postage batch based on its utilization, depth and bucket depth.
  *
diff --git a/dist/types/utils/stream.d.ts b/dist/types/utils/stream.d.ts
index acdc6c962d0076c7003ba37972b0236a6dad44d5..74209fb914d8c4f33161c3e69979dba5f4abb68e 100644
--- a/dist/types/utils/stream.d.ts
+++ b/dist/types/utils/stream.d.ts
@@ -1,7 +1,7 @@
 /// <reference types="node" />
 import { Readable as NodeReadableNative, ReadableOptions as NodeReadableOptions } from 'stream';
 import { ReadableStream } from 'web-streams-polyfill';
-import { Readable } from '../types';
+import { Readable } from '../types/index.js';
 /**
  * Validates if passed object is either browser's ReadableStream
  * or Node's Readable.
diff --git a/dist/types/utils/tar.d.ts b/dist/types/utils/tar.d.ts
index a8c9bf429696007f57649b4bf8cc5b4f70657253..3ba63c4c06ad191e0fd0227a2be226c88fd07ab9 100644
--- a/dist/types/utils/tar.d.ts
+++ b/dist/types/utils/tar.d.ts
@@ -1,2 +1,2 @@
-import { Collection } from '../types';
+import { Collection } from '../types/index.js';
 export declare function makeTar(data: Collection<Uint8Array>): Uint8Array;
diff --git a/dist/types/utils/type.d.ts b/dist/types/utils/type.d.ts
index 84d993b744ec8a4a11d5bdd491b99f768441b372..dfb579c4f8db4b3d3bef6f3f81dc91b773cb0f47 100644
--- a/dist/types/utils/type.d.ts
+++ b/dist/types/utils/type.d.ts
@@ -1,4 +1,4 @@
-import { Address, AddressPrefix, AllTagsOptions, BatchId, CollectionUploadOptions, FileUploadOptions, NumberString, PssMessageHandler, PublicKey, Readable, Reference, Tag, UploadOptions, TransactionHash, RequestOptions, PostageBatchOptions, CashoutOptions, ReferenceOrEns } from '../types';
+import { Address, AddressPrefix, AllTagsOptions, BatchId, CollectionUploadOptions, FileUploadOptions, NumberString, PssMessageHandler, PublicKey, Readable, Reference, Tag, UploadOptions, TransactionHash, RequestOptions, PostageBatchOptions, CashoutOptions, ReferenceOrEns } from '../types/index.js';
 import { ReferenceType } from '@ethersphere/swarm-cid';
 export declare function isUint8Array(obj: unknown): obj is Uint8Array;
 export declare function isInteger(value: unknown): value is number | NumberString;
diff --git a/dist/types/utils/uint64.d.ts b/dist/types/utils/uint64.d.ts
index 317aafdcb20ed4f3081d725c7b9ca3415d543477..6f1473b040d33ae8317e6445ae7edc38d6318277 100644
--- a/dist/types/utils/uint64.d.ts
+++ b/dist/types/utils/uint64.d.ts
@@ -1,4 +1,4 @@
-import { Bytes } from './bytes';
+import { Bytes } from './bytes.js';
 export declare function writeUint64LittleEndian(value: number, bytes?: Bytes<8>): Bytes<8>;
 export declare function writeUint64BigEndian(value: number, bytes?: Bytes<8>): Bytes<8>;
 export declare function readUint64BigEndian(bytes: Bytes<8>): number;
diff --git a/package.json b/package.json
index 1595d8640de4ef1d2110695914556f03a99afa17..a7c3001fe950eca2c4093f04a0e085e9e68f05e3 100644
--- a/package.json
+++ b/package.json
@@ -2,6 +2,7 @@
   "name": "@ethersphere/bee-js",
   "version": "5.0.0",
   "description": "Javascript client for Bee",
+  "type": "module",
   "keywords": [
     "bee",
     "swarm",
@@ -26,6 +27,7 @@
   "module": "dist/mjs/index.js",
   "exports": {
     ".": {
+      "types": "./dist/types/index.d.ts",
       "import": "./dist/mjs/index.js",
       "require": "./dist/cjs/index.js"
     }