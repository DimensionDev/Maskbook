# generated by patch-package 6.4.7 on 2021-06-12 01:45:02
#
# command:
#   npx patch-package @material-ui/core
#
# declared package:
#   @material-ui/core: 5.0.0-alpha.34
#
diff --git a/node_modules/@material-ui/core/ListItemButton/ListItemButton.d.ts b/node_modules/@material-ui/core/ListItemButton/ListItemButton.d.ts
new file mode 100644
index 0000000..5996855
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/ListItemButton.d.ts
@@ -0,0 +1,84 @@
+import * as React from 'react';
+import { SxProps } from '@material-ui/system';
+import { Theme } from '@material-ui/core/styles';
+import { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';
+import { OverrideProps } from '../OverridableComponent';
+import { ListItemButtonClasses } from './listItemButtonClasses';
+
+interface ListItemButtonBaseProps {
+  /**
+   * Defines the `align-items` style property.
+   * @default 'center'
+   */
+  alignItems?: 'flex-start' | 'center';
+  /**
+   * If `true`, the list item is focused during the first mount.
+   * Focus will also be triggered if the value changes from false to true.
+   * @default false
+   */
+  autoFocus?: boolean;
+  /**
+   * The content of the component if a `ListItemSecondaryAction` is used it must
+   * be the last child.
+   */
+  children?: React.ReactNode;
+  /**
+   * Override or extend the styles applied to the component.
+   */
+  classes?: Partial<ListItemButtonClasses>;
+  /**
+   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
+   * The prop defaults to the value inherited from the parent List component.
+   * @default false
+   */
+  dense?: boolean;
+  /**
+   * If `true`, the component is disabled.
+   * @default false
+   */
+  disabled?: boolean;
+  /**
+   * If `true`, the left and right padding is removed.
+   * @default false
+   */
+  disableGutters?: boolean;
+  /**
+   * If `true`, a 1px light border is added to the bottom of the list item.
+   * @default false
+   */
+  divider?: boolean;
+  /**
+   * Use to apply selected styling.
+   * @default false
+   */
+  selected?: boolean;
+  /**
+   * The system prop that allows defining system overrides as well as additional CSS styles.
+   */
+  sx?: SxProps<Theme>;
+}
+
+export type ListItemButtonTypeMap<P = {}, D extends React.ElementType = 'div'> =
+  ExtendButtonBaseTypeMap<{
+    props: P & ListItemButtonBaseProps;
+    defaultComponent: D;
+  }>;
+
+/**
+ *
+ * Demos:
+ *
+ * - [Lists](https://material-ui.com/components/lists/)
+ *
+ * API:
+ *
+ * - [ListItemButton API](https://material-ui.com/api/list-item-button/)
+ */
+declare const ListItemButton: ExtendButtonBase<ListItemButtonTypeMap>;
+
+export type ListItemButtonProps<
+  D extends React.ElementType = ListItemButtonTypeMap['defaultComponent'],
+  P = {},
+> = OverrideProps<ListItemButtonTypeMap<P, D>, D>;
+
+export default ListItemButton;
diff --git a/node_modules/@material-ui/core/ListItemButton/ListItemButton.js b/node_modules/@material-ui/core/ListItemButton/ListItemButton.js
new file mode 100644
index 0000000..c959216
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/ListItemButton.js
@@ -0,0 +1,245 @@
+import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
+import _extends from "@babel/runtime/helpers/esm/extends";
+import * as React from 'react';
+import PropTypes from 'prop-types';
+import clsx from 'clsx';
+import { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';
+import { alpha } from '../styles/colorManipulator';
+import styled, { rootShouldForwardProp } from '../styles/styled';
+import useThemeProps from '../styles/useThemeProps';
+import ButtonBase from '../ButtonBase';
+import useEnhancedEffect from '../utils/useEnhancedEffect';
+import useForkRef from '../utils/useForkRef';
+import ListContext from '../List/ListContext';
+import listItemButtonClasses, { getListItemButtonUtilityClass } from './listItemButtonClasses';
+import { jsx as _jsx } from "react/jsx-runtime";
+
+const overridesResolver = (props, styles) => {
+  const {
+    styleProps
+  } = props;
+  return _extends({}, styles.root, styleProps.dense && styles.dense, styleProps.alignItems === 'flex-start' && styles.alignItemsFlexStart, styleProps.divider && styles.divider, !styleProps.disableGutters && styles.gutters);
+};
+
+const useUtilityClasses = styleProps => {
+  const {
+    alignItems,
+    classes,
+    dense,
+    disabled,
+    disableGutters,
+    divider,
+    selected
+  } = styleProps;
+  const slots = {
+    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
+  };
+  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
+  return _extends({}, classes, composedClasses);
+};
+
+const ListItemButtonRoot = styled(ButtonBase, {
+  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
+  name: 'MuiListItemButton',
+  slot: 'Root',
+  overridesResolver
+})(({
+  theme,
+  styleProps
+}) => _extends({
+  display: 'flex',
+  flexGrow: 1,
+  justifyContent: 'flex-start',
+  alignItems: 'center',
+  position: 'relative',
+  textDecoration: 'none',
+  boxSizing: 'border-box',
+  textAlign: 'left',
+  paddingTop: 8,
+  paddingBottom: 8,
+  transition: theme.transitions.create('background-color', {
+    duration: theme.transitions.duration.shortest
+  }),
+  '&:hover': {
+    textDecoration: 'none',
+    backgroundColor: theme.palette.action.hover,
+    // Reset on touch devices, it doesn't add specificity
+    '@media (hover: none)': {
+      backgroundColor: 'transparent'
+    }
+  },
+  [`&.${listItemButtonClasses.selected}`]: {
+    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
+    [`&.${listItemButtonClasses.focusVisible}`]: {
+      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
+    }
+  },
+  [`&.${listItemButtonClasses.selected}:hover`]: {
+    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
+    // Reset on touch devices, it doesn't add specificity
+    '@media (hover: none)': {
+      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
+    }
+  },
+  [`&.${listItemButtonClasses.focusVisible}`]: {
+    backgroundColor: theme.palette.action.focus
+  },
+  [`&.${listItemButtonClasses.disabled}`]: {
+    opacity: theme.palette.action.disabledOpacity
+  }
+}, styleProps.divider && {
+  borderBottom: `1px solid ${theme.palette.divider}`,
+  backgroundClip: 'padding-box'
+}, styleProps.alignItems === 'flex-start' && {
+  alignItems: 'flex-start'
+}, !styleProps.disableGutters && {
+  paddingLeft: 16,
+  paddingRight: 16
+}, styleProps.dense && {
+  paddingTop: 4,
+  paddingBottom: 4
+}));
+const ListItemButton = /*#__PURE__*/React.forwardRef(function ListItemButton(inProps, ref) {
+  const props = useThemeProps({
+    props: inProps,
+    name: 'MuiListItemButton'
+  });
+
+  const {
+    alignItems = 'center',
+    autoFocus = false,
+    component = 'div',
+    children,
+    dense = false,
+    disableGutters = false,
+    divider = false,
+    focusVisibleClassName,
+    selected = false
+  } = props,
+        other = _objectWithoutPropertiesLoose(props, ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected"]);
+
+  const context = React.useContext(ListContext);
+  const childContext = {
+    dense: dense || context.dense || false,
+    alignItems,
+    disableGutters
+  };
+  const listItemRef = React.useRef(null);
+  useEnhancedEffect(() => {
+    if (autoFocus) {
+      if (listItemRef.current) {
+        listItemRef.current.focus();
+      } else if (process.env.NODE_ENV !== 'production') {
+        console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');
+      }
+    }
+  }, [autoFocus]);
+
+  const styleProps = _extends({}, props, {
+    alignItems,
+    dense: childContext.dense,
+    disableGutters,
+    divider,
+    selected
+  });
+
+  const classes = useUtilityClasses(styleProps);
+  const handleRef = useForkRef(listItemRef, ref);
+  return /*#__PURE__*/_jsx(ListContext.Provider, {
+    value: childContext,
+    children: /*#__PURE__*/_jsx(ListItemButtonRoot, _extends({
+      ref: handleRef,
+      component: component,
+      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
+      styleProps: styleProps
+    }, other, {
+      classes: classes,
+      children: children
+    }))
+  });
+});
+process.env.NODE_ENV !== "production" ? ListItemButton.propTypes
+/* remove-proptypes */
+= {
+  // ----------------------------- Warning --------------------------------
+  // | These PropTypes are generated from the TypeScript type definitions |
+  // |     To update them edit the d.ts file and run "yarn proptypes"     |
+  // ----------------------------------------------------------------------
+
+  /**
+   * Defines the `align-items` style property.
+   * @default 'center'
+   */
+  alignItems: PropTypes.oneOf(['center', 'flex-start']),
+
+  /**
+   * If `true`, the list item is focused during the first mount.
+   * Focus will also be triggered if the value changes from false to true.
+   * @default false
+   */
+  autoFocus: PropTypes.bool,
+
+  /**
+   * The content of the component if a `ListItemSecondaryAction` is used it must
+   * be the last child.
+   */
+  children: PropTypes.node,
+
+  /**
+   * Override or extend the styles applied to the component.
+   */
+  classes: PropTypes.object,
+
+  /**
+   * The component used for the root node.
+   * Either a string to use a HTML element or a component.
+   */
+  component: PropTypes.elementType,
+
+  /**
+   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
+   * The prop defaults to the value inherited from the parent List component.
+   * @default false
+   */
+  dense: PropTypes.bool,
+
+  /**
+   * If `true`, the component is disabled.
+   * @default false
+   */
+  disabled: PropTypes.bool,
+
+  /**
+   * If `true`, the left and right padding is removed.
+   * @default false
+   */
+  disableGutters: PropTypes.bool,
+
+  /**
+   * If `true`, a 1px light border is added to the bottom of the list item.
+   * @default false
+   */
+  divider: PropTypes.bool,
+
+  /**
+   * This prop can help identify which element has keyboard focus.
+   * The class name will be applied when the element gains the focus through keyboard interaction.
+   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
+   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
+   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
+   * if needed.
+   */
+  focusVisibleClassName: PropTypes.string,
+
+  /**
+   * Use to apply selected styling.
+   * @default false
+   */
+  selected: PropTypes.bool,
+
+  /**
+   * The system prop that allows defining system overrides as well as additional CSS styles.
+   */
+  sx: PropTypes.object
+} : void 0;
+export default ListItemButton;
\ No newline at end of file
diff --git a/node_modules/@material-ui/core/ListItemButton/index.d.ts b/node_modules/@material-ui/core/ListItemButton/index.d.ts
new file mode 100644
index 0000000..57fdf7f
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/index.d.ts
@@ -0,0 +1,5 @@
+export { default } from './ListItemButton';
+export * from './ListItemButton';
+
+export { default as listItemButtonClasses } from './listItemButtonClasses';
+export * from './listItemButtonClasses';
diff --git a/node_modules/@material-ui/core/ListItemButton/index.js b/node_modules/@material-ui/core/ListItemButton/index.js
new file mode 100644
index 0000000..762c1fe
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/index.js
@@ -0,0 +1,3 @@
+export { default } from './ListItemButton';
+export { default as listItemButtonClasses } from './listItemButtonClasses';
+export * from './listItemButtonClasses';
\ No newline at end of file
diff --git a/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.d.ts b/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.d.ts
new file mode 100644
index 0000000..3eac17f
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.d.ts
@@ -0,0 +1,22 @@
+export interface ListItemButtonClasses {
+    /** Styles applied to the root element. */
+    root: string;
+    /** Pseudo-class applied to the `component`'s `focusVisibleClassName` prop. */
+    focusVisible: string;
+    /** Styles applied to the component element if dense. */
+    dense: string;
+    /** Styles applied to the component element if `alignItems="flex-start"`. */
+    alignItemsFlexStart: string;
+    /** Pseudo-class applied to the inner `component` element if `disabled={true}`. */
+    disabled: string;
+    /** Styles applied to the inner `component` element if `divider={true}`. */
+    divider: string;
+    /** Styles applied to the inner `component` element unless `disableGutters={true}`. */
+    gutters: string;
+    /** Pseudo-class applied to the root element if `selected={true}`. */
+    selected: string;
+}
+export declare type ListItemButtonClassKey = keyof ListItemButtonClasses;
+export declare function getListItemButtonUtilityClass(slot: string): string;
+declare const listItemButtonClasses: ListItemButtonClasses;
+export default listItemButtonClasses;
diff --git a/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.js b/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.js
new file mode 100644
index 0000000..0daa70f
--- /dev/null
+++ b/node_modules/@material-ui/core/ListItemButton/listItemButtonClasses.js
@@ -0,0 +1,6 @@
+import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';
+export function getListItemButtonUtilityClass(slot) {
+  return generateUtilityClass('MuiListItemButton', slot);
+}
+const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
+export default listItemButtonClasses;
\ No newline at end of file
diff --git a/node_modules/@material-ui/core/index.d.ts b/node_modules/@material-ui/core/index.d.ts
index 18dbae0..3b63196 100644
--- a/node_modules/@material-ui/core/index.d.ts
+++ b/node_modules/@material-ui/core/index.d.ts
@@ -264,6 +264,9 @@ export * from './List';
 export { default as ListItem } from './ListItem';
 export * from './ListItem';
 
+export { default as ListItemButton } from './ListItemButton';
+export * from './ListItemButton';
+
 export { default as ListItemAvatar } from './ListItemAvatar';
 export * from './ListItemAvatar';
 
diff --git a/node_modules/@material-ui/core/index.js b/node_modules/@material-ui/core/index.js
index 239a738..39a60e0 100644
--- a/node_modules/@material-ui/core/index.js
+++ b/node_modules/@material-ui/core/index.js
@@ -135,6 +135,8 @@ export { default as List } from './List';
 export * from './List';
 export { default as ListItem } from './ListItem';
 export * from './ListItem';
+export { default as ListItemButton } from './ListItemButton';
+export * from './ListItemButton';
 export { default as ListItemAvatar } from './ListItemAvatar';
 export * from './ListItemAvatar';
 export { default as ListItemIcon } from './ListItemIcon';
diff --git a/node_modules/@material-ui/core/legacy/index.js b/node_modules/@material-ui/core/legacy/index.js
index 239a738..39a60e0 100644
--- a/node_modules/@material-ui/core/legacy/index.js
+++ b/node_modules/@material-ui/core/legacy/index.js
@@ -135,6 +135,8 @@ export { default as List } from './List';
 export * from './List';
 export { default as ListItem } from './ListItem';
 export * from './ListItem';
+export { default as ListItemButton } from './ListItemButton';
+export * from './ListItemButton';
 export { default as ListItemAvatar } from './ListItemAvatar';
 export * from './ListItemAvatar';
 export { default as ListItemIcon } from './ListItemIcon';
diff --git a/node_modules/@material-ui/core/modern/index.js b/node_modules/@material-ui/core/modern/index.js
index 239a738..39a60e0 100644
--- a/node_modules/@material-ui/core/modern/index.js
+++ b/node_modules/@material-ui/core/modern/index.js
@@ -135,6 +135,8 @@ export { default as List } from './List';
 export * from './List';
 export { default as ListItem } from './ListItem';
 export * from './ListItem';
+export { default as ListItemButton } from './ListItemButton';
+export * from './ListItemButton';
 export { default as ListItemAvatar } from './ListItemAvatar';
 export * from './ListItemAvatar';
 export { default as ListItemIcon } from './ListItemIcon';
diff --git a/node_modules/@material-ui/core/styles/styled.d.ts b/node_modules/@material-ui/core/styles/styled.d.ts
new file mode 100644
index 0000000..928ed5f
--- /dev/null
+++ b/node_modules/@material-ui/core/styles/styled.d.ts
@@ -0,0 +1,13 @@
+import { CreateMUIStyled } from '@material-ui/system';
+import { Theme } from './createTheme';
+
+/**
+ * Custom styled utility that has a default MUI theme.
+ *
+ * @param tag HTML tag or component that should serve as base.
+ * @param options Styled options for the created component.
+ * @returns React component that has styles attached to it.
+ */
+declare const styled: CreateMUIStyled<Theme>;
+
+export default styled;
diff --git a/node_modules/@material-ui/core/styles/styled.js b/node_modules/@material-ui/core/styles/styled.js
new file mode 100644
index 0000000..f539618
--- /dev/null
+++ b/node_modules/@material-ui/core/styles/styled.js
@@ -0,0 +1,9 @@
+import { createStyled, shouldForwardProp } from '@material-ui/system';
+import defaultTheme from './defaultTheme';
+export const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
+export const slotShouldForwardProp = shouldForwardProp;
+const styled = createStyled({
+  defaultTheme,
+  rootShouldForwardProp
+});
+export default styled;
\ No newline at end of file
