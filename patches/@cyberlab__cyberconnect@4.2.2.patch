diff --git a/lib/cAuth.d.ts b/lib/cAuth.d.ts
index 27afc5424eee8abb20e152ceba566a25b0e8e188..53af714690a4ed877ac461b711421f60453c2f9f 100644
--- a/lib/cAuth.d.ts
+++ b/lib/cAuth.d.ts
@@ -1,4 +1,4 @@
-import { Blockchain } from './types';
+import { Blockchain } from "./types.js";
 export declare const personalSign: (provider: any, address: string) => Promise<any>;
 export declare const cAuth: (provider: any, address: string, url: string, chain: Blockchain) => Promise<any>;
 //# sourceMappingURL=cAuth.d.ts.map
\ No newline at end of file
diff --git a/lib/cAuth.d.ts.map b/lib/cAuth.d.ts.map
index 6ff3145ce58fcdb852db6061f6d45be598a3289f..568af20bbc803471df7a85ea52ce3091bee58ade 100644
--- a/lib/cAuth.d.ts.map
+++ b/lib/cAuth.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"cAuth.d.ts","sourceRoot":"","sources":["../src/cAuth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAQrC,eAAO,MAAM,YAAY,aAAoB,GAAG,WAAW,MAAM,iBAiBhE,CAAC;AAEF,eAAO,MAAM,KAAK,aACN,GAAG,WACJ,MAAM,OACV,MAAM,SACJ,UAAU,iBAqClB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"cAuth.d.ts","sourceRoot":"","sources":["../src/cAuth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAQvC,eAAO,MAAM,YAAY,aAAoB,GAAG,WAAW,MAAM,iBAkBjE,CAAC;AAED,eAAO,MAAM,KAAK,aAAoB,GAAG,WAAW,MAAM,OAAO,MAAM,SAAS,UAAU,iBAkC1F,CAAC"}
\ No newline at end of file
diff --git a/lib/cAuth.js b/lib/cAuth.js
index 1bd4e44ca82d9c88a472594fb2132b6f488d253f..6530cdf058a9ca8583bc7d49306cb551c0679d07 100644
--- a/lib/cAuth.js
+++ b/lib/cAuth.js
@@ -1,124 +1,63 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
+import { Blockchain } from "./types.js";
+import { toUtf8Bytes } from "@ethersproject/strings";
+import { hexlify } from "@ethersproject/bytes";
+import { auth } from "./queries.js";
+import { C_ACCESS_TOKEN_KEY } from "./constant.js";
+import bs58 from "bs58";
+const msgToSign = "Sign in to CyberConnect from this device";
+export const personalSign = async (provider, address) => {
+    if (provider.signMessage) {
+        // return awat
+        if (!provider.publicKey) {
+            alert("wallet not connected");
+        }
+        if (!provider.signMessage)
+            throw new Error("Wallet does not support message signing!");
+        const message = new TextEncoder().encode(msgToSign);
+        const signature = await provider.signMessage(message);
+        return bs58.encode(signature);
+    }
+    else {
+        return await provider.send("personal_sign", [
+            hexlify(toUtf8Bytes(msgToSign)),
+            address.toLowerCase(),
+        ]);
     }
 };
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.cAuth = exports.personalSign = void 0;
-var types_1 = require("./types");
-var strings_1 = require("@ethersproject/strings");
-var bytes_1 = require("@ethersproject/bytes");
-var queries_1 = require("./queries");
-var constant_1 = require("./constant");
-var bs58_1 = __importDefault(require("bs58"));
-var msgToSign = 'Sign in to CyberConnect from this device';
-var personalSign = function (provider, address) { return __awaiter(void 0, void 0, void 0, function () {
-    var message, signature;
-    return __generator(this, function (_a) {
-        switch (_a.label) {
-            case 0:
-                if (!provider.signMessage) return [3 /*break*/, 2];
-                // return awat
-                if (!provider.publicKey) {
-                    alert('wallet not connected');
-                }
-                if (!provider.signMessage)
-                    throw new Error('Wallet does not support message signing!');
-                message = new TextEncoder().encode(msgToSign);
-                return [4 /*yield*/, provider.signMessage(message)];
-            case 1:
-                signature = _a.sent();
-                return [2 /*return*/, bs58_1.default.encode(signature)];
-            case 2: return [4 /*yield*/, provider.send('personal_sign', [
-                    (0, bytes_1.hexlify)((0, strings_1.toUtf8Bytes)(msgToSign)),
-                    address.toLowerCase(),
-                ])];
-            case 3: return [2 /*return*/, _a.sent()];
-        }
-    });
-}); };
-exports.personalSign = personalSign;
-var cAuth = function (provider, address, url, chain) { return __awaiter(void 0, void 0, void 0, function () {
-    var signature, sig, res;
+export const cAuth = async (provider, address, url, chain) => {
     var _a;
-    return __generator(this, function (_b) {
-        switch (_b.label) {
-            case 0:
-                if (window.localStorage.getItem(constant_1.C_ACCESS_TOKEN_KEY)) {
-                    return [2 /*return*/, window.localStorage.getItem(constant_1.C_ACCESS_TOKEN_KEY)];
-                }
-                return [4 /*yield*/, (0, exports.personalSign)(provider, address)];
-            case 1:
-                signature = _b.sent();
-                if (!signature) return [3 /*break*/, 3];
-                sig = void 0;
-                if (chain === types_1.Blockchain.ETH) {
-                    if (typeof signature == 'string') {
-                        sig = signature;
-                    }
-                    else if (signature.result) {
-                        sig = signature.result;
-                    }
-                    else {
-                        return [2 /*return*/];
-                    }
-                }
-                else {
-                    sig = signature;
-                }
-                return [4 /*yield*/, (0, queries_1.auth)({
-                        address: address,
-                        signature: sig,
-                        network: chain,
-                        url: url,
-                    })];
-            case 2:
-                res = _b.sent();
-                if (res.data &&
-                    res.data.auth.result === 'SUCCESS' &&
-                    res.data.auth.authToken) {
-                    (_a = window === null || window === void 0 ? void 0 : window.localStorage) === null || _a === void 0 ? void 0 : _a.setItem(constant_1.C_ACCESS_TOKEN_KEY, res.data.auth.authToken);
-                    return [2 /*return*/, res];
-                }
-                _b.label = 3;
-            case 3: return [2 /*return*/];
+    if (window.localStorage.getItem(C_ACCESS_TOKEN_KEY)) {
+        return window.localStorage.getItem(C_ACCESS_TOKEN_KEY);
+    }
+    const signature = await personalSign(provider, address);
+    if (signature) {
+        let sig;
+        if (chain === Blockchain.ETH) {
+            if (typeof signature == "string") {
+                sig = signature;
+            }
+            else if (signature.result) {
+                sig = signature.result;
+            }
+            else {
+                return;
+            }
+        }
+        else {
+            sig = signature;
         }
-    });
-}); };
-exports.cAuth = cAuth;
+        const res = await auth({
+            address,
+            signature: sig,
+            network: chain,
+            url,
+        });
+        if (res.data &&
+            res.data.auth.result === "SUCCESS" &&
+            res.data.auth.authToken) {
+            (_a = window === null || window === void 0 ? void 0 : window.localStorage) === null || _a === void 0 ? void 0 : _a.setItem(C_ACCESS_TOKEN_KEY, res.data.auth.authToken);
+            return res;
+        }
+    }
+};
 //# sourceMappingURL=cAuth.js.map
\ No newline at end of file
diff --git a/lib/cAuth.js.map b/lib/cAuth.js.map
index 44fdc679247c2b21882f35ba01b203b9f9739e83..f37afb76a7650a3b7995fd3b179a38f738b9f3aa 100644
--- a/lib/cAuth.js.map
+++ b/lib/cAuth.js.map
@@ -1 +1 @@
-{"version":3,"file":"cAuth.js","sourceRoot":"","sources":["../src/cAuth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAqC;AACrC,kDAAqD;AACrD,8CAA+C;AAC/C,qCAAiC;AACjC,uCAAgD;AAChD,8CAAwB;AACxB,IAAM,SAAS,GAAG,0CAA0C,CAAC;AAEtD,IAAM,YAAY,GAAG,UAAO,QAAa,EAAE,OAAe;;;;;qBAC3D,QAAQ,CAAC,WAAW,EAApB,wBAAoB;gBACtB,cAAc;gBACd,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;oBACvB,KAAK,CAAC,sBAAsB,CAAC,CAAC;iBAC/B;gBACD,IAAI,CAAC,QAAQ,CAAC,WAAW;oBACvB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;gBACxD,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAClC,qBAAM,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;;gBAA/C,SAAS,GAAG,SAAmC;gBACrD,sBAAO,cAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAC;oBAEvB,qBAAM,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE;oBAC1C,IAAA,eAAO,EAAC,IAAA,qBAAW,EAAC,SAAS,CAAC,CAAC;oBAC/B,OAAO,CAAC,WAAW,EAAE;iBACtB,CAAC,EAAA;oBAHF,sBAAO,SAGL,EAAC;;;KAEN,CAAC;AAjBW,QAAA,YAAY,gBAiBvB;AAEK,IAAM,KAAK,GAAG,UACnB,QAAa,EACb,OAAe,EACf,GAAW,EACX,KAAiB;;;;;;gBAEjB,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,6BAAkB,CAAC,EAAE;oBACnD,sBAAO,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,6BAAkB,CAAC,EAAC;iBACxD;gBACiB,qBAAM,IAAA,oBAAY,EAAC,QAAQ,EAAE,OAAO,CAAC,EAAA;;gBAAjD,SAAS,GAAG,SAAqC;qBACnD,SAAS,EAAT,wBAAS;gBACP,GAAG,SAAA,CAAC;gBACR,IAAI,KAAK,KAAK,kBAAU,CAAC,GAAG,EAAE;oBAC5B,IAAI,OAAO,SAAS,IAAI,QAAQ,EAAE;wBAChC,GAAG,GAAG,SAAS,CAAC;qBACjB;yBAAM,IAAI,SAAS,CAAC,MAAM,EAAE;wBAC3B,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;qBACxB;yBAAM;wBACL,sBAAO;qBACR;iBACF;qBAAM;oBACL,GAAG,GAAG,SAAS,CAAC;iBACjB;gBACW,qBAAM,IAAA,cAAI,EAAC;wBACrB,OAAO,SAAA;wBACP,SAAS,EAAE,GAAG;wBACd,OAAO,EAAE,KAAK;wBACd,GAAG,KAAA;qBACJ,CAAC,EAAA;;gBALI,GAAG,GAAG,SAKV;gBACF,IACE,GAAG,CAAC,IAAI;oBACR,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS;oBAClC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EACvB;oBACA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,0CAAE,OAAO,CAC3B,6BAAkB,EAClB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CACxB,CAAC;oBACF,sBAAO,GAAG,EAAC;iBACZ;;;;;KAEJ,CAAC;AAzCW,QAAA,KAAK,SAyChB"}
\ No newline at end of file
+{"version":3,"file":"cAuth.js","sourceRoot":"","sources":["../src/cAuth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AACxC,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AACpC,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,MAAM,SAAS,GAAG,0CAA0C,CAAC;AAE5D,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,QAAa,EAAE,OAAe,EAAE,EAAE;IAClE,IAAI,QAAQ,CAAC,WAAW,EAAE;QACtB,cAAc;QACd,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACrB,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,QAAQ,CAAC,WAAW;YACrB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACjC;SACI;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE;YACxC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC/B,OAAO,CAAC,WAAW,EAAE;SACxB,CAAC,CAAC;KACN;AACL,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,KAAK,EAAE,QAAa,EAAE,OAAe,EAAE,GAAW,EAAE,KAAiB,EAAE,EAAE;;IAC3F,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QACjD,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;KAC1D;IACD,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACxD,IAAI,SAAS,EAAE;QACX,IAAI,GAAG,CAAC;QACR,IAAI,KAAK,KAAK,UAAU,CAAC,GAAG,EAAE;YAC1B,IAAI,OAAO,SAAS,IAAI,QAAQ,EAAE;gBAC9B,GAAG,GAAG,SAAS,CAAC;aACnB;iBACI,IAAI,SAAS,CAAC,MAAM,EAAE;gBACvB,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;aAC1B;iBACI;gBACD,OAAO;aACV;SACJ;aACI;YACD,GAAG,GAAG,SAAS,CAAC;SACnB;QACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;YACnB,OAAO;YACP,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,KAAK;YACd,GAAG;SACN,CAAC,CAAC;QACH,IAAI,GAAG,CAAC,IAAI;YACR,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS;YAClC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACzB,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,0CAAE,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC3E,OAAO,GAAG,CAAC;SACd;KACJ;AACL,CAAC,CAAC"}
\ No newline at end of file
diff --git a/lib/constant.js b/lib/constant.js
index b373d0365e6551979e74a650e6016e957c3cc6a4..108f4975a5da50e12c1b2fe5a3f3cbebfdcc98f8 100644
--- a/lib/constant.js
+++ b/lib/constant.js
@@ -1,6 +1,3 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.C_ACCESS_TOKEN_KEY = exports.DFLAG = void 0;
-exports.DFLAG = false;
-exports.C_ACCESS_TOKEN_KEY = 'CYBERCONNECT_ACCESS_TOKEN';
+export const DFLAG = false;
+export const C_ACCESS_TOKEN_KEY = 'CYBERCONNECT_ACCESS_TOKEN';
 //# sourceMappingURL=constant.js.map
\ No newline at end of file
diff --git a/lib/constant.js.map b/lib/constant.js.map
index 03232958ba7ab67bbb926852b91e752193d2627c..6d0b580ea9b1d0b88963893c828c20f6867cef1a 100644
--- a/lib/constant.js.map
+++ b/lib/constant.js.map
@@ -1 +1 @@
-{"version":3,"file":"constant.js","sourceRoot":"","sources":["../src/constant.ts"],"names":[],"mappings":";;;AAAa,QAAA,KAAK,GAAG,KAAK,CAAC;AACd,QAAA,kBAAkB,GAAG,2BAA2B,CAAC"}
\ No newline at end of file
+{"version":3,"file":"constant.js","sourceRoot":"","sources":["../src/constant.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,KAAK,GAAG,KAAK,CAAC;AAC3B,MAAM,CAAC,MAAM,kBAAkB,GAAG,2BAA2B,CAAC"}
\ No newline at end of file
diff --git a/lib/crypto.js b/lib/crypto.js
index 3992828593c9f57a66d3d3403402841830b69ca3..5d942a2dc38f236e19747cde9d66d08cfec24ab5 100644
--- a/lib/crypto.js
+++ b/lib/crypto.js
@@ -1,227 +1,83 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.arrayBuffer2Hex = exports.signWithSigningKey = exports.getPublicKey = exports.getSigningKey = exports.hasSigningKey = exports.generateSigningKey = exports.rotateSigningKey = exports.clearSigningKeyByAddress = exports.clearSigningKey = exports.clear = exports.set = exports.get = void 0;
-var idb_1 = require("idb");
-var dbPromise = null;
-var SIGNKEY_KEY = 'signingKey_';
+import { openDB } from 'idb';
+let dbPromise = null;
+const SIGNKEY_KEY = 'signingKey_';
 if (typeof window !== 'undefined' && typeof window.indexedDB !== 'undefined') {
-    dbPromise = (0, idb_1.openDB)('CyberConnect', 1, {
-        upgrade: function (db) {
+    dbPromise = openDB('CyberConnect', 1, {
+        upgrade(db) {
             db.createObjectStore('store');
         },
     });
 }
-function get(key) {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0:
-                    if (!dbPromise) return [3 /*break*/, 2];
-                    return [4 /*yield*/, dbPromise];
-                case 1: return [2 /*return*/, (_a.sent()).get('store', key)];
-                case 2: return [2 /*return*/];
-            }
-        });
-    });
+export async function get(key) {
+    if (dbPromise) {
+        return (await dbPromise).get('store', key);
+    }
+    return;
 }
-exports.get = get;
-function set(key, val) {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0:
-                    if (!dbPromise) return [3 /*break*/, 2];
-                    return [4 /*yield*/, dbPromise];
-                case 1: return [2 /*return*/, (_a.sent()).put('store', val, key)];
-                case 2: return [2 /*return*/];
-            }
-        });
-    });
+export async function set(key, val) {
+    if (dbPromise) {
+        return (await dbPromise).put('store', val, key);
+    }
+    return;
 }
-exports.set = set;
-function clear() {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, dbPromise];
-                case 1: return [2 /*return*/, (_a.sent()).clear('store')];
-            }
-        });
-    });
+export async function clear() {
+    return (await dbPromise).clear('store');
 }
-exports.clear = clear;
-function clearSigningKey() {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, clear()];
-                case 1:
-                    _a.sent();
-                    return [2 /*return*/];
-            }
-        });
-    });
+export async function clearSigningKey() {
+    await clear();
 }
-exports.clearSigningKey = clearSigningKey;
-function clearSigningKeyByAddress(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, dbPromise];
-                case 1: return [2 /*return*/, (_a.sent()).delete('store', SIGNKEY_KEY + address)];
-            }
-        });
-    });
+export async function clearSigningKeyByAddress(address) {
+    return (await dbPromise).delete('store', SIGNKEY_KEY + address);
 }
-exports.clearSigningKeyByAddress = clearSigningKeyByAddress;
-function rotateSigningKey(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, clear()];
-                case 1:
-                    _a.sent();
-                    return [2 /*return*/, generateSigningKey(address)];
-            }
-        });
-    });
+export async function rotateSigningKey(address) {
+    await clear();
+    return generateSigningKey(address);
 }
-exports.rotateSigningKey = rotateSigningKey;
-function generateSigningKey(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        var algorithm, extractable, keyUsages, signingKey;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0:
-                    algorithm = {
-                        name: 'ECDSA',
-                        namedCurve: 'P-256',
-                    };
-                    extractable = false;
-                    keyUsages = ['sign', 'verify'];
-                    return [4 /*yield*/, window.crypto.subtle.generateKey(algorithm, extractable, keyUsages)];
-                case 1:
-                    signingKey = _a.sent();
-                    set(SIGNKEY_KEY + address, signingKey).then();
-                    return [2 /*return*/, signingKey];
-            }
-        });
-    });
+export async function generateSigningKey(address) {
+    const algorithm = {
+        name: 'ECDSA',
+        namedCurve: 'P-256',
+    };
+    const extractable = false;
+    const keyUsages = ['sign', 'verify'];
+    const signingKey = await window.crypto.subtle.generateKey(algorithm, extractable, keyUsages);
+    set(SIGNKEY_KEY + address, signingKey).then();
+    return signingKey;
 }
-exports.generateSigningKey = generateSigningKey;
-function hasSigningKey(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, get(SIGNKEY_KEY + address)];
-                case 1: return [2 /*return*/, _a.sent()];
-            }
-        });
-    });
+export async function hasSigningKey(address) {
+    return await get(SIGNKEY_KEY + address);
 }
-exports.hasSigningKey = hasSigningKey;
-function getSigningKey(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        var signingKey;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, get(SIGNKEY_KEY + address)];
-                case 1:
-                    signingKey = _a.sent();
-                    if (!signingKey) {
-                        signingKey = generateSigningKey(address);
-                    }
-                    return [2 /*return*/, signingKey];
-            }
-        });
-    });
+export async function getSigningKey(address) {
+    let signingKey = await get(SIGNKEY_KEY + address);
+    if (!signingKey) {
+        signingKey = generateSigningKey(address);
+    }
+    return signingKey;
 }
-exports.getSigningKey = getSigningKey;
-function getPublicKey(address) {
-    return __awaiter(this, void 0, void 0, function () {
-        var signingKey, exported;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, getSigningKey(address)];
-                case 1:
-                    signingKey = _a.sent();
-                    return [4 /*yield*/, window.crypto.subtle.exportKey('spki', signingKey.publicKey)];
-                case 2:
-                    exported = _a.sent();
-                    return [2 /*return*/, window.btoa(arrayBuffer2String(exported))];
-            }
-        });
-    });
+export async function getPublicKey(address) {
+    const signingKey = await getSigningKey(address);
+    const exported = await window.crypto.subtle.exportKey('spki', signingKey.publicKey);
+    return window.btoa(arrayBuffer2String(exported));
 }
-exports.getPublicKey = getPublicKey;
-function signWithSigningKey(input, address) {
-    return __awaiter(this, void 0, void 0, function () {
-        var signingKey, algorithm, enc, encodedMessage, signature;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, getSigningKey(address)];
-                case 1:
-                    signingKey = _a.sent();
-                    algorithm = {
-                        name: 'ECDSA',
-                        hash: {
-                            name: 'SHA-256',
-                        },
-                    };
-                    enc = new TextEncoder();
-                    encodedMessage = enc.encode(input);
-                    return [4 /*yield*/, window.crypto.subtle.sign(algorithm, signingKey.privateKey, encodedMessage)];
-                case 2:
-                    signature = _a.sent();
-                    return [2 /*return*/, arrayBuffer2Hex(signature)];
-            }
-        });
-    });
+export async function signWithSigningKey(input, address) {
+    const signingKey = await getSigningKey(address);
+    const algorithm = {
+        name: 'ECDSA',
+        hash: {
+            name: 'SHA-256',
+        },
+    };
+    const enc = new TextEncoder();
+    const encodedMessage = enc.encode(input);
+    const signature = await window.crypto.subtle.sign(algorithm, signingKey.privateKey, encodedMessage);
+    return arrayBuffer2Hex(signature);
 }
-exports.signWithSigningKey = signWithSigningKey;
-function arrayBuffer2Hex(buffer) {
+export function arrayBuffer2Hex(buffer) {
     return ('0x' +
         Array.prototype.map
-            .call(new Uint8Array(buffer), function (x) { return ('00' + x.toString(16)).slice(-2); })
+            .call(new Uint8Array(buffer), (x) => ('00' + x.toString(16)).slice(-2))
             .join(''));
 }
-exports.arrayBuffer2Hex = arrayBuffer2Hex;
 function arrayBuffer2String(buffer) {
     return String.fromCharCode.apply(null, new Uint8Array(buffer));
 }
diff --git a/lib/crypto.js.map b/lib/crypto.js.map
index 6969022e3bd426dad4da2320677fd37d667916f6..b86733ff7afd3dac1254bc1e1dcf55aa1dacc788 100644
--- a/lib/crypto.js.map
+++ b/lib/crypto.js.map
@@ -1 +1 @@
-{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../src/crypto.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../src/crypto.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,KAAK,CAAC;AAE7B,IAAI,SAAS,GAAQ,IAAI,CAAC;AAC1B,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,EAAE;IAC5E,SAAS,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC,EAAE;QACpC,OAAO,CAAC,EAAE;YACR,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;KACF,CAAC,CAAC;CACJ;AAED,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,GAAW;IACnC,IAAI,SAAS,EAAE;QACb,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KAC5C;IAED,OAAO;AACT,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,GAAW,EAAE,GAAkB;IACvD,IAAI,SAAS,EAAE;QACb,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KACjD;IAED,OAAO;AACT,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,KAAK;IACzB,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe;IACnC,MAAM,KAAK,EAAE,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,OAAe;IAC5D,OAAO,CAAC,MAAM,SAAS,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,GAAG,OAAO,CAAC,CAAC;AAClE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,OAAe;IACpD,MAAM,KAAK,EAAE,CAAC;IACd,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,OAAe;IACtD,MAAM,SAAS,GAAG;QAChB,IAAI,EAAE,OAAO;QACb,UAAU,EAAE,OAAO;KACpB,CAAC;IACF,MAAM,WAAW,GAAG,KAAK,CAAC;IAC1B,MAAM,SAAS,GAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAEjD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CACvD,SAAS,EACT,WAAW,EACX,SAAS,CACV,CAAC;IAEF,GAAG,CAAC,WAAW,GAAG,OAAO,EAAE,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;IAE9C,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,OAAe;IACjD,OAAO,MAAM,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,OAAe;IACjD,IAAI,UAAU,GAAG,MAAM,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;IAElD,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;KAC1C;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAAe;IAChD,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CACnD,MAAM,EACN,UAAU,CAAC,SAAS,CACrB,CAAC;IAEF,OAAO,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,KAAa,EAAE,OAAe;IACrE,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,SAAS,GAAG;QAChB,IAAI,EAAE,OAAO;QACb,IAAI,EAAE;YACJ,IAAI,EAAE,SAAS;SAChB;KACF,CAAC;IACF,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAC9B,MAAM,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEzC,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAC/C,SAAS,EACT,UAAU,CAAC,UAAU,EACrB,cAAc,CACf,CAAC;IAEF,OAAO,eAAe,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,MAAmB;IACjD,OAAO,CACL,IAAI;QACJ,KAAK,CAAC,SAAS,CAAC,GAAG;aAChB,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACtE,IAAI,CAAC,EAAE,CAAC,CACZ,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAmB;IAC7C,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,MAAM,CAAQ,CAAC,CAAC;AACxE,CAAC"}
\ No newline at end of file
diff --git a/lib/cyberConnect.d.ts b/lib/cyberConnect.d.ts
index 0d43539c74de9fd06dd20be22183ba836221fca6..bcce2af8fb9c36f25a6a0799520df4301630345f 100644
--- a/lib/cyberConnect.d.ts
+++ b/lib/cyberConnect.d.ts
@@ -1,11 +1,11 @@
-import { CeramicClient } from '@ceramicnetwork/http-client';
-import ThreeIdProvider from '3id-did-provider';
-import { EthereumAuthProvider } from '@3id/connect';
-import { SolanaAuthProvider } from '@ceramicnetwork/blockchain-utils-linking';
-import { DID } from 'dids';
-import { IDX } from '@ceramicstudio/idx';
-import { Blockchain, Config, Endpoint } from './types';
-import { Caip10Link } from '@ceramicnetwork/stream-caip10-link';
+import { CeramicClient } from "@ceramicnetwork/http-client";
+import ThreeIdProvider from "3id-did-provider";
+import { EthereumAuthProvider } from "@3id/connect";
+import { SolanaAuthProvider } from "@ceramicnetwork/blockchain-utils-linking";
+import { DID } from "dids";
+import { IDX } from "@ceramicstudio/idx";
+import { Blockchain, Config, Endpoint } from "./types.js";
+import { Caip10Link } from "@ceramicnetwork/stream-caip10-link";
 declare class CyberConnect {
     address: string;
     namespace: string;
@@ -30,7 +30,7 @@ declare class CyberConnect {
     setupDid(): Promise<void>;
     createIdx(): void;
     createAccountLink(): Promise<void>;
-    getOutboundLink(): Promise<import("./types").Connections>;
+    getOutboundLink(): Promise<import("./types.js").Connections>;
     authenticate(): Promise<void>;
     private ceramicConnect;
     private ceramicDisconnect;
diff --git a/lib/cyberConnect.d.ts.map b/lib/cyberConnect.d.ts.map
index 580081dcba56b11f16d3846e7b0955cf2b77304d..656383bb6802a40f2bd1f3162233ad1b98e894e0 100644
--- a/lib/cyberConnect.d.ts.map
+++ b/lib/cyberConnect.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"cyberConnect.d.ts","sourceRoot":"","sources":["../src/cyberConnect.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAG5D,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0CAA0C,CAAC;AAG9E,OAAO,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAIzC,OAAO,EACL,UAAU,EACV,MAAM,EAEN,QAAQ,EAET,MAAM,SAAS,CAAC;AAEjB,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAWhE,cAAM,YAAY;IAChB,OAAO,EAAE,MAAM,CAAM;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,QAAQ,EAAE,QAAQ,CAAC;IACnB,aAAa,EAAE,aAAa,CAAC;IAC7B,YAAY,EAAE,oBAAoB,GAAG,kBAAkB,GAAG,SAAS,CAAC;IACpE,gBAAgB,EAAE,GAAG,CAAC;IACtB,WAAW,EAAE,GAAG,GAAG,SAAS,CAAC;IAC7B,SAAS,EAAE,MAAM,CAAM;IACvB,KAAK,EAAE,UAAU,CAAkB;IACnC,QAAQ,EAAE,MAAM,CAAM;IACtB,QAAQ,EAAE,GAAG,CAAQ;IACrB,WAAW,EAAE,UAAU,GAAG,IAAI,CAAQ;IACtC,MAAM,EAAE,MAAM,CAAM;IACpB,GAAG,EAAE,GAAG,GAAG,IAAI,CAAQ;IACvB,OAAO,EAAE,eAAe,GAAG,IAAI,CAAQ;IACvC,eAAe,EAAE,GAAG,CAAQ;gBAEhB,MAAM,EAAE,MAAM;IAwBpB,eAAe;YA4CP,iBAAiB;IAiBzB,WAAW;IAwDX,QAAQ;IA2Cd,SAAS;IAcH,iBAAiB;IAiBjB,eAAe;IAmBf,YAAY;YAeJ,cAAc;YAmCd,iBAAiB;YAuBjB,eAAe;IA6BvB,OAAO,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IA4D9C,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IA4DjD,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IA2D/C,UAAU;IAUV,kBAAkB;CA0CzB;AAED,eAAe,YAAY,CAAC"}
\ No newline at end of file
+{"version":3,"file":"cyberConnect.d.ts","sourceRoot":"","sources":["../src/cyberConnect.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAG5D,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0CAA0C,CAAC;AAG9E,OAAO,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAC3B,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAIzC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAqB,QAAQ,EAAc,MAAM,YAAY,CAAC;AAEzF,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAK/D,cAAM,YAAY;IACf,OAAO,EAAE,MAAM,CAAM;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,QAAQ,EAAE,QAAQ,CAAC;IACnB,aAAa,EAAE,aAAa,CAAC;IAC7B,YAAY,EAAE,oBAAoB,GAAG,kBAAkB,GAAG,SAAS,CAAC;IACpE,gBAAgB,EAAE,GAAG,CAAC;IACtB,WAAW,EAAE,GAAG,GAAG,SAAS,CAAC;IAC7B,SAAS,EAAE,MAAM,CAAM;IACvB,KAAK,EAAE,UAAU,CAAkB;IACnC,QAAQ,EAAE,MAAM,CAAM;IACtB,QAAQ,EAAE,GAAG,CAAQ;IACrB,WAAW,EAAE,UAAU,GAAG,IAAI,CAAQ;IACtC,MAAM,EAAE,MAAM,CAAM;IACpB,GAAG,EAAE,GAAG,GAAG,IAAI,CAAQ;IACvB,OAAO,EAAE,eAAe,GAAG,IAAI,CAAQ;IACvC,eAAe,EAAE,GAAG,CAAQ;gBAEnB,MAAM,EAAE,MAAM;IAwBpB,eAAe;YAgCP,iBAAiB;IAezB,WAAW;IAoDX,QAAQ;IAwCd,SAAS;IAcH,iBAAiB;IAcjB,eAAe;IAeZ,YAAY;YAiBP,cAAc;YAkCd,iBAAiB;YAqBjB,eAAe;IAyBvB,OAAO,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IAoD9C,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IAoDjD,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,GAAE,MAAW;IAmD/C,UAAU;IAOV,kBAAkB;CAkCxB;AAEA,eAAe,YAAY,CAAC"}
\ No newline at end of file
diff --git a/lib/cyberConnect.js b/lib/cyberConnect.js
index c43a41e1dd545c9e0d434aae78a3b4e248e27985..3dbd2ea979c13bddd81717074407eb992c22ed62 100644
--- a/lib/cyberConnect.js
+++ b/lib/cyberConnect.js
@@ -1,735 +1,449 @@
-"use strict";
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-var http_client_1 = require("@ceramicnetwork/http-client");
-var key_did_resolver_1 = __importDefault(require("key-did-resolver"));
-var _3id_did_resolver_1 = __importDefault(require("@ceramicnetwork/3id-did-resolver"));
-var _3id_did_provider_1 = __importDefault(require("3id-did-provider"));
-var connect_1 = require("@3id/connect");
-var blockchain_utils_linking_1 = require("@ceramicnetwork/blockchain-utils-linking");
-var sha256_1 = require("@stablelib/sha256");
-var uint8arrays_1 = require("uint8arrays");
-var dids_1 = require("dids");
-var idx_1 = require("@ceramicstudio/idx");
-var network_1 = require("./network");
-var queries_1 = require("./queries");
-var error_1 = require("./error");
-var types_1 = require("./types");
-var utils_1 = require("./utils");
-var stream_caip10_link_1 = require("@ceramicnetwork/stream-caip10-link");
-var _1 = require(".");
-var constant_1 = require("./constant");
-var crypto_1 = require("./crypto");
-var CyberConnect = /** @class */ (function () {
-    function CyberConnect(config) {
-        this.address = '';
-        this.signature = '';
-        this.chain = types_1.Blockchain.ETH;
-        this.chainRef = '';
+import { CeramicClient } from "@ceramicnetwork/http-client";
+import KeyDidResolver from "key-did-resolver";
+import ThreeIdResolver from "@ceramicnetwork/3id-did-resolver";
+import ThreeIdProvider from "3id-did-provider";
+import { EthereumAuthProvider } from "@3id/connect";
+import { SolanaAuthProvider } from "@ceramicnetwork/blockchain-utils-linking";
+import { hash } from "@stablelib/sha256";
+import { fromString } from "uint8arrays";
+import { DID } from "dids";
+import { IDX } from "@ceramicstudio/idx";
+import { endpoints } from "./network.js";
+import { follow, registerSigningKey, setAlias, unfollow } from "./queries.js";
+import { ConnectError, ErrorCode } from "./error.js";
+import { Blockchain, } from "./types.js";
+import { getAddressByProvider, getSigningKeySignature } from "./utils.js";
+import { Caip10Link } from "@ceramicnetwork/stream-caip10-link";
+import { Env } from "./index.js";
+import { C_ACCESS_TOKEN_KEY, DFLAG } from "./constant.js";
+import { clearSigningKey, getPublicKey, hasSigningKey, signWithSigningKey, clearSigningKeyByAddress } from "./crypto.js";
+class CyberConnect {
+    constructor(config) {
+        this.address = "";
+        this.signature = "";
+        this.chain = Blockchain.ETH;
+        this.chainRef = "";
         this.provider = null;
         this.accountLink = null;
-        this.authId = '';
+        this.authId = "";
         this.did = null;
         this.threeId = null;
         this.threeIdProvider = null;
-        var provider = config.provider, namespace = config.namespace, env = config.env, chainRef = config.chainRef, chain = config.chain;
+        const { provider, namespace, env, chainRef, chain } = config;
         if (!namespace) {
-            throw new error_1.ConnectError(error_1.ErrorCode.EmptyNamespace);
+            throw new ConnectError(ErrorCode.EmptyNamespace);
         }
         this.namespace = namespace;
-        this.endpoint = network_1.endpoints[env || _1.Env.PRODUCTION];
-        this.ceramicClient = new http_client_1.CeramicClient(this.endpoint.ceramicUrl);
-        this.chain = chain || types_1.Blockchain.ETH;
-        this.chainRef = chainRef || '';
+        this.endpoint = endpoints[env || Env.PRODUCTION];
+        this.ceramicClient = new CeramicClient(this.endpoint.ceramicUrl);
+        this.chain = chain || Blockchain.ETH;
+        this.chainRef = chainRef || "";
         this.provider = provider;
-        var keyDidResolver = key_did_resolver_1.default.getResolver();
-        var threeIdResolver = _3id_did_resolver_1.default.getResolver(this.ceramicClient);
-        this.resolverRegistry = __assign(__assign({}, threeIdResolver), keyDidResolver);
-        delete window.localStorage[constant_1.C_ACCESS_TOKEN_KEY];
+        const keyDidResolver = KeyDidResolver.getResolver();
+        const threeIdResolver = ThreeIdResolver.getResolver(this.ceramicClient);
+        this.resolverRegistry = {
+            ...threeIdResolver,
+            ...keyDidResolver,
+        };
+        delete window.localStorage[C_ACCESS_TOKEN_KEY];
     }
-    CyberConnect.prototype.getAuthProvider = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var _a, e_1;
-            return __generator(this, function (_b) {
-                switch (_b.label) {
-                    case 0:
-                        if (!this.provider) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.EmptyEthProvider);
-                        }
-                        _b.label = 1;
-                    case 1:
-                        _b.trys.push([1, 3, , 4]);
-                        _a = this;
-                        return [4 /*yield*/, (0, utils_1.getAddressByProvider)(this.provider, this.chain)];
-                    case 2:
-                        _a.address = _b.sent();
-                        return [3 /*break*/, 4];
-                    case 3:
-                        e_1 = _b.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, e_1);
-                    case 4:
-                        switch (this.chain) {
-                            case types_1.Blockchain.ETH: {
-                                this.authProvider = new connect_1.EthereumAuthProvider(this.provider, this.address);
-                                break;
-                            }
-                            case types_1.Blockchain.SOLANA: {
-                                if (!this.provider.publicKey) {
-                                    throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, 'Wallet Not Connected');
-                                }
-                                if (!this.provider.signMessage) {
-                                    throw new error_1.ConnectError(error_1.ErrorCode.AuthProviderError, 'Provider must implement signMessage');
-                                }
-                                this.authProvider = new blockchain_utils_linking_1.SolanaAuthProvider(this.provider, this.address, this.chainRef);
-                                break;
-                            }
-                        }
-                        return [2 /*return*/];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.setupAuthProvider = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var rst;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        if (this.signature) {
-                            return [2 /*return*/];
-                        }
-                        return [4 /*yield*/, this.getAuthProvider()];
-                    case 1:
-                        _a.sent();
-                        if (!this.authProvider) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.EmptyAuthProvider);
-                        }
-                        return [4 /*yield*/, this.authProvider.authenticate('Allow this account to control your identity')];
-                    case 2:
-                        rst = _a.sent();
-                        this.signature = rst;
-                        return [2 /*return*/];
+    async getAuthProvider() {
+        if (!this.provider) {
+            throw new ConnectError(ErrorCode.EmptyEthProvider);
+        }
+        try {
+            this.address = await getAddressByProvider(this.provider, this.chain);
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.AuthProviderError, e);
+        }
+        switch (this.chain) {
+            case Blockchain.ETH: {
+                this.authProvider = new EthereumAuthProvider(this.provider, this.address);
+                break;
+            }
+            case Blockchain.SOLANA: {
+                if (!this.provider.publicKey) {
+                    throw new ConnectError(ErrorCode.AuthProviderError, "Wallet Not Connected");
                 }
-            });
-        });
-    };
-    CyberConnect.prototype.signWithJwt = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var timestamp, payload, req, id, sendRes, normalJWS, jwsString;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        if (!(localStorage[constant_1.C_ACCESS_TOKEN_KEY] && !constant_1.DFLAG)) return [3 /*break*/, 1];
-                        return [2 /*return*/, localStorage[constant_1.C_ACCESS_TOKEN_KEY]];
-                    case 1:
-                        if (!constant_1.DFLAG) return [3 /*break*/, 3];
-                        timestamp = new Date().getTime();
-                        payload = {
-                            timestamp: timestamp,
-                            target: this.address,
-                        };
-                        if (!this.threeId) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty ThreeId');
-                        }
-                        req = {
-                            method: 'did_createJWS',
-                            params: { payload: payload, did: this.threeId.id },
-                        };
-                        id = 0;
-                        if (!this.threeIdProvider) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty ThreeId provider');
-                        }
-                        return [4 /*yield*/, this.threeIdProvider.send(Object.assign({ jsonrpc: '2.0', id: id }, req), null)];
-                    case 2:
-                        sendRes = _a.sent();
-                        if (!sendRes || !sendRes.result) {
-                            return [2 /*return*/, ''];
-                        }
-                        if (!this.did) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.SignJwtError, 'Empty DID');
-                        }
-                        normalJWS = sendRes.result.jws;
-                        jwsString = [
-                            normalJWS.signatures[0].protected,
-                            normalJWS.payload,
-                            normalJWS.signatures[0].signature,
-                        ].join('.');
-                        return [2 /*return*/, jwsString];
-                    case 3: return [2 /*return*/, ''];
+                if (!this.provider.signMessage) {
+                    throw new ConnectError(ErrorCode.AuthProviderError, "Provider must implement signMessage");
                 }
-            });
+                this.authProvider = new SolanaAuthProvider(this.provider, this.address, this.chainRef);
+                break;
+            }
+        }
+    }
+    async setupAuthProvider() {
+        if (this.signature) {
+            return;
+        }
+        await this.getAuthProvider();
+        if (!this.authProvider) {
+            throw new ConnectError(ErrorCode.EmptyAuthProvider);
+        }
+        const rst = await this.authProvider.authenticate("Allow this account to control your identity");
+        this.signature = rst;
+    }
+    async signWithJwt() {
+        if (localStorage[C_ACCESS_TOKEN_KEY] && !DFLAG) {
+            return localStorage[C_ACCESS_TOKEN_KEY];
+        }
+        else if (DFLAG) {
+            const timestamp = new Date().getTime();
+            const payload = {
+                timestamp,
+                target: this.address,
+            };
+            if (!this.threeId) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty ThreeId");
+            }
+            const req = {
+                method: "did_createJWS",
+                params: { payload, did: this.threeId.id },
+            };
+            const id = 0;
+            if (!this.threeIdProvider) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty ThreeId provider");
+            }
+            const sendRes = await this.threeIdProvider.send(Object.assign({ jsonrpc: "2.0", id }, req), null);
+            if (!sendRes || !sendRes.result) {
+                return "";
+            }
+            if (!this.did) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty DID");
+            }
+            const normalJWS = sendRes.result.jws;
+            const jwsString = [
+                normalJWS.signatures[0].protected,
+                normalJWS.payload,
+                normalJWS.signatures[0].signature,
+            ].join(".");
+            return jwsString;
+        }
+        else {
+            return "";
+        }
+    }
+    async setupDid() {
+        if (this.idxInstance) {
+            return;
+        }
+        if (!this.authProvider) {
+            new ConnectError(ErrorCode.EmptyAuthProvider).printError();
+            return;
+        }
+        if (!this.ceramicClient) {
+            new ConnectError(ErrorCode.CeramicError, "Can not find ceramic client").printError();
+            return;
+        }
+        const getPermission = async (request) => {
+            return request.payload.paths;
+        };
+        const authSecret = hash(fromString(this.signature.slice(2)));
+        this.authId = (await this.authProvider.accountId()).toString();
+        this.threeId = await ThreeIdProvider.create({
+            getPermission,
+            authSecret,
+            authId: this.authId,
+            ceramic: this.ceramicClient,
         });
-    };
-    CyberConnect.prototype.setupDid = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var getPermission, authSecret, _a, _b;
-            var _this = this;
-            return __generator(this, function (_c) {
-                switch (_c.label) {
-                    case 0:
-                        if (this.idxInstance) {
-                            return [2 /*return*/];
-                        }
-                        if (!this.authProvider) {
-                            new error_1.ConnectError(error_1.ErrorCode.EmptyAuthProvider).printError();
-                            return [2 /*return*/];
-                        }
-                        if (!this.ceramicClient) {
-                            new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Can not find ceramic client').printError();
-                            return [2 /*return*/];
-                        }
-                        getPermission = function (request) { return __awaiter(_this, void 0, void 0, function () {
-                            return __generator(this, function (_a) {
-                                return [2 /*return*/, request.payload.paths];
-                            });
-                        }); };
-                        authSecret = (0, sha256_1.hash)((0, uint8arrays_1.fromString)(this.signature.slice(2)));
-                        _a = this;
-                        return [4 /*yield*/, this.authProvider.accountId()];
-                    case 1:
-                        _a.authId = (_c.sent()).toString();
-                        _b = this;
-                        return [4 /*yield*/, _3id_did_provider_1.default.create({
-                                getPermission: getPermission,
-                                authSecret: authSecret,
-                                authId: this.authId,
-                                ceramic: this.ceramicClient,
-                            })];
-                    case 2:
-                        _b.threeId = _c.sent();
-                        this.threeIdProvider = this.threeId.getDidProvider();
-                        this.did = new dids_1.DID({
-                            provider: this.threeIdProvider,
-                            resolver: this.resolverRegistry,
-                        });
-                        return [4 /*yield*/, this.did.authenticate()];
-                    case 3:
-                        _c.sent();
-                        return [4 /*yield*/, this.ceramicClient.setDID(this.did)];
-                    case 4:
-                        _c.sent();
-                        return [2 /*return*/];
-                }
-            });
+        this.threeIdProvider = this.threeId.getDidProvider();
+        this.did = new DID({
+            provider: this.threeIdProvider,
+            resolver: this.resolverRegistry,
         });
-    };
-    CyberConnect.prototype.createIdx = function () {
+        await this.did.authenticate();
+        await this.ceramicClient.setDID(this.did);
+    }
+    createIdx() {
         if (this.idxInstance) {
             return;
         }
-        this.idxInstance = new idx_1.IDX({
+        this.idxInstance = new IDX({
             ceramic: this.ceramicClient,
             aliases: {
                 cyberConnect: this.endpoint.cyberConnectSchema,
             },
             autopin: true,
         });
-    };
-    CyberConnect.prototype.createAccountLink = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var _a;
-            return __generator(this, function (_b) {
-                switch (_b.label) {
-                    case 0:
-                        if (this.accountLink && !!this.accountLink.did) {
-                            return [2 /*return*/];
-                        }
-                        _a = this;
-                        return [4 /*yield*/, stream_caip10_link_1.Caip10Link.fromAccount(this.ceramicClient, this.authId)];
-                    case 1:
-                        _a.accountLink = _b.sent();
-                        if (!(!this.accountLink.did && this.did && this.authProvider)) return [3 /*break*/, 3];
-                        return [4 /*yield*/, this.accountLink.setDid(this.did.id, this.authProvider, {
-                                anchor: false,
-                                publish: false,
-                            })];
-                    case 2:
-                        _b.sent();
-                        _b.label = 3;
-                    case 3: return [2 /*return*/];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.getOutboundLink = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var result, e_2;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        if (!this.idxInstance) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
-                        }
-                        _a.label = 1;
-                    case 1:
-                        _a.trys.push([1, 3, , 4]);
-                        return [4 /*yield*/, this.idxInstance.get('cyberConnect')];
-                    case 2:
-                        result = (_a.sent());
-                        return [2 /*return*/, (result === null || result === void 0 ? void 0 : result.outboundLink) || []];
-                    case 3:
-                        e_2 = _a.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, e_2);
-                    case 4: return [2 /*return*/];
-                }
+    }
+    async createAccountLink() {
+        if (this.accountLink && !!this.accountLink.did) {
+            return;
+        }
+        this.accountLink = await Caip10Link.fromAccount(this.ceramicClient, this.authId);
+        if (!this.accountLink.did && this.did && this.authProvider) {
+            await this.accountLink.setDid(this.did.id, this.authProvider, {
+                anchor: false,
+                publish: false,
             });
-        });
-    };
+        }
+    }
+    async getOutboundLink() {
+        if (!this.idxInstance) {
+            throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+        }
+        try {
+            const result = (await this.idxInstance.get("cyberConnect"));
+            return (result === null || result === void 0 ? void 0 : result.outboundLink) || [];
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.CeramicError, e);
+        }
+    }
     // first step
-    CyberConnect.prototype.authenticate = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var e_3;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        _a.trys.push([0, 6, , 7]);
-                        if (!!constant_1.DFLAG) return [3 /*break*/, 1];
-                        this.authWithSigningKey();
-                        return [3 /*break*/, 5];
-                    case 1: return [4 /*yield*/, this.setupAuthProvider()];
-                    case 2:
-                        _a.sent();
-                        return [4 /*yield*/, this.setupDid()];
-                    case 3:
-                        _a.sent();
-                        return [4 /*yield*/, this.createAccountLink()];
-                    case 4:
-                        _a.sent();
-                        this.createIdx();
-                        _a.label = 5;
-                    case 5: return [3 /*break*/, 7];
-                    case 6:
-                        e_3 = _a.sent();
-                        throw e_3;
-                    case 7: return [2 /*return*/];
-                }
+    async authenticate() {
+        try {
+            if (!DFLAG) {
+                this.authWithSigningKey();
+            }
+            else {
+                await this.setupAuthProvider();
+                await this.setupDid();
+                await this.createAccountLink();
+                this.createIdx();
+            }
+        }
+        catch (e) {
+            throw e;
+        }
+    }
+    async ceramicConnect(targetAddr, alias = "") {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            const index = outboundLink.findIndex((link) => {
+                return link.target === targetAddr && link.namespace === this.namespace;
             });
-        });
-    };
-    CyberConnect.prototype.ceramicConnect = function (targetAddr, alias) {
-        if (alias === void 0) { alias = ''; }
-        return __awaiter(this, void 0, void 0, function () {
-            var outboundLink, index, curTimeStr, e_4;
-            var _this = this;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        _a.trys.push([0, 2, , 3]);
-                        return [4 /*yield*/, this.getOutboundLink()];
-                    case 1:
-                        outboundLink = _a.sent();
-                        if (!this.idxInstance) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
-                        }
-                        index = outboundLink.findIndex(function (link) {
-                            return link.target === targetAddr && link.namespace === _this.namespace;
-                        });
-                        curTimeStr = String(Date.now());
-                        if (index === -1) {
-                            outboundLink.push({
-                                target: targetAddr,
-                                connectionType: 'follow',
-                                namespace: this.namespace,
-                                alias: alias,
-                                createdAt: curTimeStr,
-                            });
-                        }
-                        else {
-                            outboundLink[index].createdAt = curTimeStr;
-                        }
-                        this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
-                        return [3 /*break*/, 3];
-                    case 2:
-                        e_4 = _a.sent();
-                        console.error(e_4);
-                        return [3 /*break*/, 3];
-                    case 3: return [2 /*return*/];
-                }
+            const curTimeStr = String(Date.now());
+            if (index === -1) {
+                outboundLink.push({
+                    target: targetAddr,
+                    connectionType: "follow",
+                    namespace: this.namespace,
+                    alias,
+                    createdAt: curTimeStr,
+                });
+            }
+            else {
+                outboundLink[index].createdAt = curTimeStr;
+            }
+            this.idxInstance.set("cyberConnect", { outboundLink });
+        }
+        catch (e) {
+            console.error(e);
+        }
+    }
+    async ceramicDisconnect(targetAddr) {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            const newOutboundLink = outboundLink.filter((link) => {
+                return link.target !== targetAddr || link.namespace !== this.namespace;
             });
-        });
-    };
-    CyberConnect.prototype.ceramicDisconnect = function (targetAddr) {
-        return __awaiter(this, void 0, void 0, function () {
-            var outboundLink, newOutboundLink, e_5;
-            var _this = this;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        _a.trys.push([0, 2, , 3]);
-                        return [4 /*yield*/, this.getOutboundLink()];
-                    case 1:
-                        outboundLink = _a.sent();
-                        if (!this.idxInstance) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
-                        }
-                        newOutboundLink = outboundLink.filter(function (link) {
-                            return link.target !== targetAddr || link.namespace !== _this.namespace;
-                        });
-                        this.idxInstance.set('cyberConnect', {
-                            outboundLink: newOutboundLink,
-                        });
-                        return [3 /*break*/, 3];
-                    case 2:
-                        e_5 = _a.sent();
-                        console.error(e_5);
-                        return [3 /*break*/, 3];
-                    case 3: return [2 /*return*/];
-                }
+            this.idxInstance.set("cyberConnect", {
+                outboundLink: newOutboundLink,
             });
-        });
-    };
-    CyberConnect.prototype.ceramicSetAlias = function (targetAddr, alias) {
-        return __awaiter(this, void 0, void 0, function () {
-            var outboundLink, index, e_6;
-            var _this = this;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0:
-                        _a.trys.push([0, 2, , 3]);
-                        return [4 /*yield*/, this.getOutboundLink()];
-                    case 1:
-                        outboundLink = _a.sent();
-                        if (!this.idxInstance) {
-                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, 'Could not find idx instance');
-                        }
-                        index = outboundLink.findIndex(function (link) {
-                            return link.target === targetAddr && link.namespace === _this.namespace;
-                        });
-                        if (index !== -1) {
-                            outboundLink[index] = __assign(__assign({}, outboundLink[index]), { alias: alias });
-                            this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
-                        }
-                        else {
-                            throw new error_1.ConnectError(error_1.ErrorCode.CeramicError, "Couldn't find the target address in the given namespace");
-                        }
-                        return [3 /*break*/, 3];
-                    case 2:
-                        e_6 = _a.sent();
-                        console.error(e_6);
-                        return [3 /*break*/, 3];
-                    case 3: return [2 /*return*/];
-                }
+        }
+        catch (e) {
+            console.error(e);
+        }
+    }
+    async ceramicSetAlias(targetAddr, alias) {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            const index = outboundLink.findIndex((link) => {
+                return link.target === targetAddr && link.namespace === this.namespace;
             });
-        });
-    };
-    CyberConnect.prototype.connect = function (targetAddr, alias) {
+            if (index !== -1) {
+                outboundLink[index] = { ...outboundLink[index], alias };
+                this.idxInstance.set("cyberConnect", { outboundLink });
+            }
+            else {
+                throw new ConnectError(ErrorCode.CeramicError, "Couldn't find the target address in the given namespace");
+            }
+        }
+        catch (e) {
+            console.error(e);
+        }
+    }
+    async connect(targetAddr, alias = "") {
         var _a, _b, _c, _d;
-        if (alias === void 0) { alias = ''; }
-        return __awaiter(this, void 0, void 0, function () {
-            var _e, operation, signature, publicKey, params, resp, e_7;
-            return __generator(this, function (_f) {
-                switch (_f.label) {
-                    case 0:
-                        _f.trys.push([0, 8, , 9]);
-                        _e = this;
-                        return [4 /*yield*/, this.getAddress()];
-                    case 1:
-                        _e.address = _f.sent();
-                        return [4 /*yield*/, this.authWithSigningKey()];
-                    case 2:
-                        _f.sent();
-                        operation = {
-                            name: 'follow',
-                            from: this.address,
-                            to: targetAddr,
-                            namespace: this.namespace,
-                            network: this.chain,
-                            alias: alias,
-                            timestamp: Date.now(),
-                        };
-                        return [4 /*yield*/, (0, crypto_1.signWithSigningKey)(JSON.stringify(operation), this.address)];
-                    case 3:
-                        signature = _f.sent();
-                        return [4 /*yield*/, (0, crypto_1.getPublicKey)(this.address)];
-                    case 4:
-                        publicKey = _f.sent();
-                        params = {
-                            fromAddr: this.address,
-                            toAddr: targetAddr,
-                            alias: alias,
-                            namespace: this.namespace,
-                            url: this.endpoint.cyberConnectApi,
-                            signature: signature,
-                            signingKey: publicKey,
-                            operation: JSON.stringify(operation),
-                            network: this.chain,
-                        };
-                        return [4 /*yield*/, (0, queries_1.follow)(params)];
-                    case 5:
-                        resp = _f.sent();
-                        if (!(((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.connect.result) === 'INVALID_SIGNATURE')) return [3 /*break*/, 7];
-                        return [4 /*yield*/, (0, crypto_1.clearSigningKey)()];
-                    case 6:
-                        _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.connect.result);
-                    case 7:
-                        if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.connect.result) !== 'SUCCESS') {
-                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.connect.result);
-                        }
-                        return [3 /*break*/, 9];
-                    case 8:
-                        e_7 = _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_7.message || e_7);
-                    case 9:
-                        if (constant_1.DFLAG) {
-                            this.ceramicConnect(targetAddr, alias);
-                        }
-                        return [2 /*return*/];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.disconnect = function (targetAddr, alias) {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            const operation = {
+                name: "follow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            // const sign = await this.signWithJwt();
+            const resp = await follow(params);
+            if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.connect.result) === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                throw new ConnectError(ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.connect.result);
+            }
+            if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.connect.result) !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.connect.result);
+            }
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicConnect(targetAddr, alias);
+        }
+    }
+    async disconnect(targetAddr, alias = "") {
         var _a, _b, _c, _d;
-        if (alias === void 0) { alias = ''; }
-        return __awaiter(this, void 0, void 0, function () {
-            var _e, operation, signature, publicKey, params, resp, e_8;
-            return __generator(this, function (_f) {
-                switch (_f.label) {
-                    case 0:
-                        _f.trys.push([0, 8, , 9]);
-                        _e = this;
-                        return [4 /*yield*/, this.getAddress()];
-                    case 1:
-                        _e.address = _f.sent();
-                        return [4 /*yield*/, this.authWithSigningKey()];
-                    case 2:
-                        _f.sent();
-                        operation = {
-                            name: 'unfollow',
-                            from: this.address,
-                            to: targetAddr,
-                            namespace: this.namespace,
-                            network: this.chain,
-                            alias: alias,
-                            timestamp: Date.now(),
-                        };
-                        return [4 /*yield*/, (0, crypto_1.signWithSigningKey)(JSON.stringify(operation), this.address)];
-                    case 3:
-                        signature = _f.sent();
-                        return [4 /*yield*/, (0, crypto_1.getPublicKey)(this.address)];
-                    case 4:
-                        publicKey = _f.sent();
-                        params = {
-                            fromAddr: this.address,
-                            toAddr: targetAddr,
-                            alias: alias,
-                            namespace: this.namespace,
-                            url: this.endpoint.cyberConnectApi,
-                            signature: signature,
-                            signingKey: publicKey,
-                            operation: JSON.stringify(operation),
-                            network: this.chain,
-                        };
-                        return [4 /*yield*/, (0, queries_1.unfollow)(params)];
-                    case 5:
-                        resp = _f.sent();
-                        if (!(((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.disconnect.result) === 'INVALID_SIGNATURE')) return [3 /*break*/, 7];
-                        return [4 /*yield*/, (0, crypto_1.clearSigningKey)()];
-                    case 6:
-                        _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.disconnect.result);
-                    case 7:
-                        if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.disconnect.result) !== 'SUCCESS') {
-                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.disconnect.result);
-                        }
-                        return [3 /*break*/, 9];
-                    case 8:
-                        e_8 = _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_8.message || e_8);
-                    case 9:
-                        if (constant_1.DFLAG) {
-                            this.ceramicDisconnect(targetAddr);
-                        }
-                        return [2 /*return*/];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.setAlias = function (targetAddr, alias) {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            const operation = {
+                name: "unfollow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            // const sign = await this.signWithJwt();
+            const resp = await unfollow(params);
+            if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.disconnect.result) === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                throw new ConnectError(ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.disconnect.result);
+            }
+            if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.disconnect.result) !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.disconnect.result);
+            }
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicDisconnect(targetAddr);
+        }
+    }
+    async setAlias(targetAddr, alias = "") {
         var _a, _b, _c, _d;
-        if (alias === void 0) { alias = ''; }
-        return __awaiter(this, void 0, void 0, function () {
-            var _e, operation, signature, publicKey, params, resp, e_9;
-            return __generator(this, function (_f) {
-                switch (_f.label) {
-                    case 0:
-                        _f.trys.push([0, 8, , 9]);
-                        _e = this;
-                        return [4 /*yield*/, this.getAddress()];
-                    case 1:
-                        _e.address = _f.sent();
-                        return [4 /*yield*/, this.authWithSigningKey()];
-                    case 2:
-                        _f.sent();
-                        operation = {
-                            name: 'follow',
-                            from: this.address,
-                            to: targetAddr,
-                            namespace: this.namespace,
-                            network: this.chain,
-                            alias: alias,
-                            timestamp: Date.now(),
-                        };
-                        return [4 /*yield*/, (0, crypto_1.signWithSigningKey)(JSON.stringify(operation), this.address)];
-                    case 3:
-                        signature = _f.sent();
-                        return [4 /*yield*/, (0, crypto_1.getPublicKey)(this.address)];
-                    case 4:
-                        publicKey = _f.sent();
-                        params = {
-                            fromAddr: this.address,
-                            toAddr: targetAddr,
-                            alias: alias,
-                            namespace: this.namespace,
-                            url: this.endpoint.cyberConnectApi,
-                            signature: signature,
-                            signingKey: publicKey,
-                            operation: JSON.stringify(operation),
-                            network: this.chain,
-                        };
-                        return [4 /*yield*/, (0, queries_1.setAlias)(params)];
-                    case 5:
-                        resp = _f.sent();
-                        if (!(((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.alias.result) === 'INVALID_SIGNATURE')) return [3 /*break*/, 7];
-                        return [4 /*yield*/, (0, crypto_1.clearSigningKey)()];
-                    case 6:
-                        _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.alias.result);
-                    case 7:
-                        if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.alias.result) !== 'SUCCESS') {
-                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.alias.result);
-                        }
-                        return [3 /*break*/, 9];
-                    case 8:
-                        e_9 = _f.sent();
-                        throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, e_9.message || e_9);
-                    case 9:
-                        if (constant_1.DFLAG) {
-                            this.ceramicSetAlias(targetAddr, alias);
-                        }
-                        return [2 /*return*/];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.getAddress = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var _a;
-            return __generator(this, function (_b) {
-                switch (_b.label) {
-                    case 0:
-                        if (this.address) {
-                            return [2 /*return*/, this.address];
-                        }
-                        _a = this;
-                        return [4 /*yield*/, (0, utils_1.getAddressByProvider)(this.provider, this.chain)];
-                    case 1: return [2 /*return*/, (_a.address = _b.sent())];
-                }
-            });
-        });
-    };
-    CyberConnect.prototype.authWithSigningKey = function () {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            const operation = {
+                name: "follow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            // const sign = await this.signWithJwt();
+            const resp = await setAlias(params);
+            if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.alias.result) === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                throw new ConnectError(ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.alias.result);
+            }
+            if (((_c = resp === null || resp === void 0 ? void 0 : resp.data) === null || _c === void 0 ? void 0 : _c.alias.result) !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, (_d = resp === null || resp === void 0 ? void 0 : resp.data) === null || _d === void 0 ? void 0 : _d.alias.result);
+            }
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicSetAlias(targetAddr, alias);
+        }
+    }
+    async getAddress() {
+        if (this.address) {
+            return this.address;
+        }
+        return (this.address = await getAddressByProvider(this.provider, this.chain));
+    }
+    async authWithSigningKey() {
         var _a, _b;
-        return __awaiter(this, void 0, void 0, function () {
-            var publicKey, acknowledgement, message, _c, signingKeySignature, resp, e_10;
-            return __generator(this, function (_d) {
-                switch (_d.label) {
-                    case 0: return [4 /*yield*/, (0, crypto_1.hasSigningKey)(this.address)];
-                    case 1:
-                        if (_d.sent()) {
-                            return [2 /*return*/];
-                        }
-                        return [4 /*yield*/, (0, crypto_1.getPublicKey)(this.address)];
-                    case 2:
-                        publicKey = _d.sent();
-                        acknowledgement = 'I authorize CyberConnect from this device using signing key:\n';
-                        message = "" + acknowledgement + publicKey;
-                        _c = this;
-                        return [4 /*yield*/, this.getAddress()];
-                    case 3:
-                        _c.address = _d.sent();
-                        _d.label = 4;
-                    case 4:
-                        _d.trys.push([4, 9, , 10]);
-                        return [4 /*yield*/, (0, utils_1.getSigningKeySignature)(this.provider, this.chain, message, this.address)];
-                    case 5:
-                        signingKeySignature = _d.sent();
-                        if (!signingKeySignature) return [3 /*break*/, 7];
-                        return [4 /*yield*/, (0, queries_1.registerSigningKey)({
-                                address: this.address,
-                                signature: signingKeySignature,
-                                message: message,
-                                network: this.chain,
-                                url: this.endpoint.cyberConnectApi,
-                            })];
-                    case 6:
-                        resp = _d.sent();
-                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.registerKey.result) !== 'SUCCESS') {
-                            throw new error_1.ConnectError(error_1.ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.alias.result);
-                        }
-                        return [3 /*break*/, 8];
-                    case 7: throw new Error('signingKeySignature is empty');
-                    case 8: return [3 /*break*/, 10];
-                    case 9:
-                        e_10 = _d.sent();
-                        (0, crypto_1.clearSigningKeyByAddress)(this.address);
-                        return [3 /*break*/, 10];
-                    case 10: return [2 /*return*/];
+        if (await hasSigningKey(this.address)) {
+            return;
+        }
+        const publicKey = await getPublicKey(this.address);
+        const acknowledgement = "I authorize CyberConnect from this device using signing key:\n";
+        const message = `${acknowledgement}${publicKey}`;
+        this.address = await this.getAddress();
+        try {
+            const signingKeySignature = await getSigningKeySignature(this.provider, this.chain, message, this.address);
+            if (signingKeySignature) {
+                const resp = await registerSigningKey({
+                    address: this.address,
+                    signature: signingKeySignature,
+                    message,
+                    network: this.chain,
+                    url: this.endpoint.cyberConnectApi,
+                });
+                if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.registerKey.result) !== "SUCCESS") {
+                    throw new ConnectError(ErrorCode.GraphqlError, (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.alias.result);
                 }
-            });
-        });
-    };
-    return CyberConnect;
-}());
-exports.default = CyberConnect;
+            }
+            else {
+                throw new Error("signingKeySignature is empty");
+            }
+        }
+        catch (e) {
+            clearSigningKeyByAddress(this.address);
+        }
+    }
+}
+export default CyberConnect;
 //# sourceMappingURL=cyberConnect.js.map
\ No newline at end of file
diff --git a/lib/cyberConnect.js.map b/lib/cyberConnect.js.map
index de6210d19a66de6a41cf50b702f98b49aacc216d..14926dff4e19e832648b12581735cfef9391c168 100644
--- a/lib/cyberConnect.js.map
+++ b/lib/cyberConnect.js.map
@@ -1 +1 @@
-{"version":3,"file":"cyberConnect.js","sourceRoot":"","sources":["../src/cyberConnect.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"cyberConnect.js","sourceRoot":"","sources":["../src/cyberConnect.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/lib/error.d.ts.map b/lib/error.d.ts.map
index 5f70287baef302ea5b4e85aeb5cf7130c95fea19..1f66e146e25b1f98c1101d32d2b0d7172f0348e0 100644
--- a/lib/error.d.ts.map
+++ b/lib/error.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"error.d.ts","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":"AACA,qBAAa,YAAY;IACvB,IAAI,EAAE,SAAS,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;gBAEJ,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,MAAM;IAQ7C,UAAU;CAGX;AAED,oBAAY,SAAS;IACnB,cAAc,mBAAmB;IACjC,gBAAgB,qBAAqB;IACrC,iBAAiB,sBAAsB;IACvC,YAAY,iBAAiB;IAC7B,YAAY,iBAAiB;IAC7B,YAAY,iBAAiB;IAC7B,iBAAiB,sBAAsB;IACvC,YAAY,iBAAiB;CAC9B"}
\ No newline at end of file
+{"version":3,"file":"error.d.ts","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":"AACA,qBAAa,YAAY;IACrB,IAAI,EAAE,SAAS,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;gBAEP,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,MAAM;IAQ7C,UAAU;CAGV;AAEA,oBAAY,SAAS;IAClB,cAAc,mBAAmB;IACjC,gBAAgB,qBAAqB;IACrC,iBAAiB,sBAAsB;IACvC,YAAY,iBAAiB;IAC7B,YAAY,iBAAiB;IAC7B,YAAY,iBAAiB;IAC7B,iBAAiB,sBAAsB;IACvC,YAAY,iBAAiB;CAChC"}
\ No newline at end of file
diff --git a/lib/error.js b/lib/error.js
index a311299826794367675abf928441eb1426a075db..539376e9a0f5fe92ce6f5be6a50c9c42aee7c1b3 100644
--- a/lib/error.js
+++ b/lib/error.js
@@ -1,22 +1,17 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ErrorCode = exports.ConnectError = void 0;
-var constant_1 = require("./constant");
-var ConnectError = /** @class */ (function () {
-    function ConnectError(code, message) {
+import { DFLAG, C_ACCESS_TOKEN_KEY } from "./constant.js";
+export class ConnectError {
+    constructor(code, message) {
         this.code = code;
         this.message = message || errors[code];
-        if (!constant_1.DFLAG && window && window.localStorage) {
-            delete window.localStorage[constant_1.C_ACCESS_TOKEN_KEY];
+        if (!DFLAG && window && window.localStorage) {
+            delete window.localStorage[C_ACCESS_TOKEN_KEY];
         }
     }
-    ConnectError.prototype.printError = function () {
+    printError() {
         console.error(this.message);
-    };
-    return ConnectError;
-}());
-exports.ConnectError = ConnectError;
-var ErrorCode;
+    }
+}
+export var ErrorCode;
 (function (ErrorCode) {
     ErrorCode["EmptyNamespace"] = "EmptyNamespace";
     ErrorCode["EmptyEthProvider"] = "EmptyEthProvider";
@@ -26,15 +21,15 @@ var ErrorCode;
     ErrorCode["CeramicError"] = "CeramicError";
     ErrorCode["AuthProviderError"] = "AuthProviderError";
     ErrorCode["SignJwtError"] = "SignJwtError";
-})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
-var errors = {
-    EmptyNamespace: 'Namespace can not be empty',
-    EmptyEthProvider: 'Eth provider can not be empty',
-    EmptyAuthProvider: 'Could not find authProvider',
-    NetworkError: '',
-    GraphqlError: '',
-    CeramicError: '',
-    AuthProviderError: '',
-    SignJwtError: '',
+})(ErrorCode = ErrorCode || (ErrorCode = {}));
+const errors = {
+    EmptyNamespace: "Namespace can not be empty",
+    EmptyEthProvider: "Eth provider can not be empty",
+    EmptyAuthProvider: "Could not find authProvider",
+    NetworkError: "",
+    GraphqlError: "",
+    CeramicError: "",
+    AuthProviderError: "",
+    SignJwtError: "",
 };
 //# sourceMappingURL=error.js.map
\ No newline at end of file
diff --git a/lib/error.js.map b/lib/error.js.map
index 9559ae4a69ca9be27ee9fdb8375dccc9709fb3b4..5fbb4616280f2a554dca9a66b28076cee3334915 100644
--- a/lib/error.js.map
+++ b/lib/error.js.map
@@ -1 +1 @@
-{"version":3,"file":"error.js","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":";;;AAAA,uCAAuD;AACvD;IAIE,sBAAY,IAAe,EAAE,OAAgB;QAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,gBAAK,IAAI,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE;YAC3C,OAAO,MAAM,CAAC,YAAY,CAAC,6BAAkB,CAAC,CAAC;SAChD;IACH,CAAC;IAED,iCAAU,GAAV;QACE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IACH,mBAAC;AAAD,CAAC,AAfD,IAeC;AAfY,oCAAY;AAiBzB,IAAY,SASX;AATD,WAAY,SAAS;IACnB,8CAAiC,CAAA;IACjC,kDAAqC,CAAA;IACrC,oDAAuC,CAAA;IACvC,0CAA6B,CAAA;IAC7B,0CAA6B,CAAA;IAC7B,0CAA6B,CAAA;IAC7B,oDAAuC,CAAA;IACvC,0CAA6B,CAAA;AAC/B,CAAC,EATW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QASpB;AAED,IAAM,MAAM,GAAmC;IAC7C,cAAc,EAAE,4BAA4B;IAC5C,gBAAgB,EAAE,+BAA+B;IACjD,iBAAiB,EAAE,6BAA6B;IAChD,YAAY,EAAE,EAAE;IAChB,YAAY,EAAE,EAAE;IAChB,YAAY,EAAE,EAAE;IAChB,iBAAiB,EAAE,EAAE;IACrB,YAAY,EAAE,EAAE;CACjB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"error.js","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAC1D,MAAM,OAAO,YAAY;IAIxB,YAAY,IAAe,EAAE,OAAgB;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,IAAI,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE;YACzC,OAAO,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;SAClD;IACL,CAAC;IAEJ,UAAU;QACH,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;CACJ;AAEA,MAAM,CAAN,IAAY,SASZ;AATA,WAAY,SAAS;IAClB,8CAAiC,CAAA;IACjC,kDAAqC,CAAA;IACrC,oDAAuC,CAAA;IACvC,0CAA6B,CAAA;IAC7B,0CAA6B,CAAA;IAC7B,0CAA6B,CAAA;IAC7B,oDAAuC,CAAA;IACvC,0CAA6B,CAAA;AACjC,CAAC,EATY,SAAS,GAAT,SAAS,KAAT,SAAS,QASrB;AAEA,MAAM,MAAM,GAET;IACA,cAAc,EAAE,4BAA4B;IAC5C,gBAAgB,EAAE,+BAA+B;IACjD,iBAAiB,EAAE,6BAA6B;IAChD,YAAY,EAAE,EAAE;IAChB,YAAY,EAAE,EAAE;IAChB,YAAY,EAAE,EAAE;IAChB,iBAAiB,EAAE,EAAE;IACrB,YAAY,EAAE,EAAE;CACnB,CAAC"}
\ No newline at end of file
diff --git a/lib/index.d.ts b/lib/index.d.ts
index f1fa491c9e37061038bc73e8ea046f2a3f2ac21d..8bb35ed9418a60c56d521a54674020ca735db982 100644
--- a/lib/index.d.ts
+++ b/lib/index.d.ts
@@ -1,7 +1,7 @@
-import CyberConnect from './cyberConnect';
-export { Env, Blockchain } from './types';
-export { ConnectError } from './error';
-export { getAddressByProvider } from './utils';
-export { solana } from '@ceramicnetwork/blockchain-utils-linking';
+import CyberConnect from "./cyberConnect.js";
+export { Env, Blockchain } from "./types.js";
+export { ConnectError } from "./error.js";
+export { getAddressByProvider } from "./utils.js";
+export { solana } from "@ceramicnetwork/blockchain-utils-linking";
 export default CyberConnect;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/lib/index.d.ts.map b/lib/index.d.ts.map
index 402f9017f83decb3e43df4eda028b07768f77547..b325d4e59835c2b922c1edf83c47b1f043cd3191 100644
--- a/lib/index.d.ts.map
+++ b/lib/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,0CAA0C,CAAC;AAElE,eAAe,YAAY,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,0CAA0C,CAAC;AAEjE,eAAe,YAAY,CAAC"}
\ No newline at end of file
diff --git a/lib/index.js b/lib/index.js
index 4b0c770fcfc801485da133ed77c925bac02145b1..41ba76a8f1458a1c6aa877ca3bcc55b802cd348e 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,18 +1,7 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.solana = exports.getAddressByProvider = exports.ConnectError = exports.Blockchain = exports.Env = void 0;
-var cyberConnect_1 = __importDefault(require("./cyberConnect"));
-var types_1 = require("./types");
-Object.defineProperty(exports, "Env", { enumerable: true, get: function () { return types_1.Env; } });
-Object.defineProperty(exports, "Blockchain", { enumerable: true, get: function () { return types_1.Blockchain; } });
-var error_1 = require("./error");
-Object.defineProperty(exports, "ConnectError", { enumerable: true, get: function () { return error_1.ConnectError; } });
-var utils_1 = require("./utils");
-Object.defineProperty(exports, "getAddressByProvider", { enumerable: true, get: function () { return utils_1.getAddressByProvider; } });
-var blockchain_utils_linking_1 = require("@ceramicnetwork/blockchain-utils-linking");
-Object.defineProperty(exports, "solana", { enumerable: true, get: function () { return blockchain_utils_linking_1.solana; } });
-exports.default = cyberConnect_1.default;
+import CyberConnect from "./cyberConnect.js";
+export { Env, Blockchain } from "./types.js";
+export { ConnectError } from "./error.js";
+export { getAddressByProvider } from "./utils.js";
+export { solana } from "@ceramicnetwork/blockchain-utils-linking";
+export default CyberConnect;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/lib/index.js.map b/lib/index.js.map
index 69c349f4a613104f693cdcd23a88ca9294893fbc..9edb210eab329432d0fece678041915a18796946 100644
--- a/lib/index.js.map
+++ b/lib/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA0C;AAC1C,iCAA0C;AAAjC,4FAAA,GAAG,OAAA;AAAE,mGAAA,UAAU,OAAA;AACxB,iCAAuC;AAA9B,qGAAA,YAAY,OAAA;AACrB,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA;AAC7B,qFAAkE;AAAzD,kHAAA,MAAM,OAAA;AAEf,kBAAe,sBAAY,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,0CAA0C,CAAC;AAEjE,eAAe,YAAY,CAAC"}
\ No newline at end of file
diff --git a/lib/network.d.ts b/lib/network.d.ts
index 84ac870b056cd1f86ca6d3815226b97afe8bc9e0..6bbc20b1324b6754f72c72084f5382319adf696a 100644
--- a/lib/network.d.ts
+++ b/lib/network.d.ts
@@ -1,4 +1,4 @@
-import { Env, Endpoint } from './types';
+import { Env, Endpoint } from "./types.js";
 export declare const endpoints: {
     [key in Env]: Endpoint;
 };
diff --git a/lib/network.d.ts.map b/lib/network.d.ts.map
index 0127ea11b005ce25ac54a0eb1340e7ced2097fab..eed5817d70820ce1736479b83d0a209b8b7f64f6 100644
--- a/lib/network.d.ts.map
+++ b/lib/network.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"network.d.ts","sourceRoot":"","sources":["../src/network.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAExC,eAAO,MAAM,SAAS,EAAE;KAAG,GAAG,IAAI,GAAG,GAAG,QAAQ;CAa/C,CAAC"}
\ No newline at end of file
+{"version":3,"file":"network.d.ts","sourceRoot":"","sources":["../src/network.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAE1C,eAAO,MAAM,SAAS,EAAE;KACpB,GAAG,IAAI,GAAG,GAAG,QAAQ;CAYzB,CAAC"}
\ No newline at end of file
diff --git a/lib/network.js b/lib/network.js
index 4c71ff378b24e3fd0d5ca41a5a050f5962c1a0bc..6f2f47775cfaa277b7df58fde822988bd87d4704 100644
--- a/lib/network.js
+++ b/lib/network.js
@@ -1,16 +1,13 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.endpoints = void 0;
-exports.endpoints = {
+export const endpoints = {
     STAGING: {
-        ceramicUrl: 'https://ceramic.stg.cybertino.io',
-        cyberConnectSchema: 'kjzl6cwe1jw149mvqedik2h3j26y4bmcvucjbbhezwcr7dgdyyg9v0x8xfvlp1j',
-        cyberConnectApi: 'https://api.stg.cybertino.io/connect/',
+        ceramicUrl: "https://ceramic.stg.cybertino.io",
+        cyberConnectSchema: "kjzl6cwe1jw149mvqedik2h3j26y4bmcvucjbbhezwcr7dgdyyg9v0x8xfvlp1j",
+        cyberConnectApi: "https://api.stg.cybertino.io/connect/",
     },
     PRODUCTION: {
-        ceramicUrl: 'https://ceramic.cybertino.io',
-        cyberConnectSchema: 'kjzl6cwe1jw14b3g6d22ze4jaatoikiq62qrmnbzo8hkg68ic7w0smq9ymzsxta',
-        cyberConnectApi: 'https://api.cybertino.io/connect/',
+        ceramicUrl: "https://ceramic.cybertino.io",
+        cyberConnectSchema: "kjzl6cwe1jw14b3g6d22ze4jaatoikiq62qrmnbzo8hkg68ic7w0smq9ymzsxta",
+        cyberConnectApi: "https://api.cybertino.io/connect/",
     },
 };
 //# sourceMappingURL=network.js.map
\ No newline at end of file
diff --git a/lib/network.js.map b/lib/network.js.map
index b7d7bb1c451f91cad3bdb063cc4e0d6f6fffc784..ca5320b2f043ed73ee6104da95937cbf6580656e 100644
--- a/lib/network.js.map
+++ b/lib/network.js.map
@@ -1 +1 @@
-{"version":3,"file":"network.js","sourceRoot":"","sources":["../src/network.ts"],"names":[],"mappings":";;;AAEa,QAAA,SAAS,GAA+B;IACnD,OAAO,EAAE;QACP,UAAU,EAAE,kCAAkC;QAC9C,kBAAkB,EAChB,iEAAiE;QACnE,eAAe,EAAE,uCAAuC;KACzD;IACD,UAAU,EAAE;QACV,UAAU,EAAE,8BAA8B;QAC1C,kBAAkB,EAChB,iEAAiE;QACnE,eAAe,EAAE,mCAAmC;KACrD;CACF,CAAC"}
\ No newline at end of file
+{"version":3,"file":"network.js","sourceRoot":"","sources":["../src/network.ts"],"names":[],"mappings":"AAEC,MAAM,CAAC,MAAM,SAAS,GAEnB;IACA,OAAO,EAAE;QACL,UAAU,EAAE,kCAAkC;QAC9C,kBAAkB,EAAE,iEAAiE;QACrF,eAAe,EAAE,uCAAuC;KAC3D;IACD,UAAU,EAAE;QACR,UAAU,EAAE,8BAA8B;QAC1C,kBAAkB,EAAE,iEAAiE;QACrF,eAAe,EAAE,mCAAmC;KACvD;CACJ,CAAC"}
\ No newline at end of file
diff --git a/lib/queries.d.ts b/lib/queries.d.ts
index ad2f1f2b9db1562ecb1f01402b2e49a20a25a731..5613971110974547bdf06b6ff18670f29a590d9f 100644
--- a/lib/queries.d.ts
+++ b/lib/queries.d.ts
@@ -1,5 +1,5 @@
-import { Blockchain } from './types';
-export declare type Query = 'connect' | 'disconnect';
+import { Blockchain } from "./types.js";
+export declare type Query = "connect" | "disconnect";
 declare type RegisterSigningKeyInput = {
     address: string;
     message: string;
diff --git a/lib/queries.d.ts.map b/lib/queries.d.ts.map
index fa2c6c40a2d79120815f0cf92ee353d4ef80a92b..50e1a254a251f8697a44376150659f3dee0c9ec3 100644
--- a/lib/queries.d.ts.map
+++ b/lib/queries.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"queries.d.ts","sourceRoot":"","sources":["../src/queries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACrC,oBAAY,KAAK,GAAG,SAAS,GAAG,YAAY,CAAC;AAE7C,aAAK,uBAAuB,GAAG;IAC7B,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF,aAAK,qBAAqB,GAAG;IAC3B,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,SAAS,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,MAAM,CAAC;IAClB,UAAU,EAAE,MAAM,CAAC;IACnB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF,eAAO,MAAM,wBAAwB,UAAW,uBAAuB;;;;;;CAUtE,CAAC;AACF,eAAO,MAAM,kBAAkB,UAAW,qBAAqB;;;;;;CAQ9D,CAAC;AAEF,eAAO,MAAM,qBAAqB,UAAW,qBAAqB;;;;;;CAQjE,CAAC;AACF,eAAO,MAAM,mBAAmB,UAAW,qBAAqB;;;;;;CAQ/D,CAAC;AAEF,eAAO,MAAM,UAAU;aAKZ,MAAM;eACJ,MAAM;aACR,UAAU;;;;;;;;;CAYpB,CAAC;AAEF,eAAO,MAAM,YAAY;qBAlDiB,qBAAqB;;;;;;;wBAUlB,qBAAqB;;;;;;;;iBAwBvD,MAAM;mBACJ,MAAM;iBACR,UAAU;;;;;;;;;;sBAjBsB,qBAAqB;;;;;;;gCA9BhB,uBAAuB;;;;;;;CAmEtE,CAAC;AAEF,eAAO,MAAM,OAAO,2CAcnB,CAAC;AAEF,eAAO,MAAM,WAAW,SAChB;IACJ,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;CACvB,OACI,MAAM,iBAGZ,CAAC;AAEF,eAAO,MAAM,kBAAkB;SAMK,MAAM;kBAQzC,CAAC;AAEF,eAAO,MAAM,IAAI;aAMN,MAAM;eACJ,MAAM;aACR,UAAU;SACd,MAAM;kBAQZ,CAAC;AAEF,eAAO,MAAM,MAAM;cAWP,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAapB,CAAC;AAEF,eAAO,MAAM,QAAQ;cAWT,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAapB,CAAC;AAEF,eAAO,MAAM,QAAQ;cAWT,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAapB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"queries.d.ts","sourceRoot":"","sources":["../src/queries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AACxC,oBAAY,KAAK,GAAG,SAAS,GAAG,YAAY,CAAC;AAE5C,aAAK,uBAAuB,GAAG;IAC5B,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,OAAO,EAAE,MAAM,CAAC;CACnB,CAAC;AAED,aAAK,qBAAqB,GAAG;IAC1B,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,SAAS,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,MAAM,CAAC;IAClB,UAAU,EAAE,MAAM,CAAC;IACnB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;CACnB,CAAC;AAED,eAAO,MAAM,wBAAwB,UAAW,uBAAuB;;;;;;CAUvE,CAAC;AACF,eAAO,MAAM,kBAAkB,UAAW,qBAAqB;;;;;;CAQ9D,CAAC;AAED,eAAO,MAAM,qBAAqB,UAAW,qBAAqB;;;;;;CAQlE,CAAC;AACF,eAAO,MAAM,mBAAmB,UAAW,qBAAqB;;;;;;CAQ/D,CAAC;AAED,eAAO,MAAM,UAAU;aACX,MAAM;eACJ,MAAM;aACR,UAAU;;;;;;;;;CAYtB,CAAC;AAED,eAAO,MAAM,YAAY;qBA9CgB,qBAAqB;;;;;;;wBAUjB,qBAAqB;;;;;;;;iBAoBtD,MAAM;mBACJ,MAAM;iBACR,UAAU;;;;;;;;;;sBAboB,qBAAqB;;;;;;;gCA9Bf,uBAAuB;;;;;;;CA+DvE,CAAC;AAED,eAAO,MAAM,OAAO,2CAcpB,CAAC;AAED,eAAO,MAAM,WAAW,SAAU;IAC/B,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;CACzB,OAAO,MAAM,iBAEb,CAAC;AAED,eAAO,MAAM,kBAAkB;SACvB,MAAM;kBASd,CAAC;AAED,eAAO,MAAM,IAAI;aACL,MAAM;eACJ,MAAM;aACR,UAAU;SACd,MAAM;kBAQd,CAAC;AAED,eAAO,MAAM,MAAM;cACN,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAatB,CAAC;AAED,eAAO,MAAM,QAAQ;cACR,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAatB,CAAC;AAED,eAAO,MAAM,QAAQ;cACR,MAAM;YACR,MAAM;WACP,MAAM;eACF,MAAM;eACN,MAAM;SACZ,MAAM;eACA,MAAM;gBACL,MAAM;aACT,UAAU;kBAatB,CAAC"}
\ No newline at end of file
diff --git a/lib/queries.js b/lib/queries.js
index 2a3fdd3e5aff03b5574c65aaa76ab00ab04a79ac..f2f7de114aa53c816885040f63c3bd2111fa9771 100644
--- a/lib/queries.js
+++ b/lib/queries.js
@@ -1,190 +1,132 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.setAlias = exports.unfollow = exports.follow = exports.auth = exports.registerSigningKey = exports.handleQuery = exports.request = exports.querySchemas = exports.authSchema = exports.setAliasQuerySchema = exports.disconnectQuerySchema = exports.connectQuerySchema = exports.registerSigningKeySchema = void 0;
-var types_1 = require("./types");
-var registerSigningKeySchema = function (input) {
+import { Blockchain } from "./types.js";
+export const registerSigningKeySchema = (input) => {
     return {
-        operationName: 'registerKey',
-        query: "mutation registerKey($input: RegisterKeyInput!) {\n      registerKey(input: $input) {\n        result\n      }\n    }",
-        variables: { input: input },
+        operationName: "registerKey",
+        query: `mutation registerKey($input: RegisterKeyInput!) {
+      registerKey(input: $input) {
+        result
+      }
+    }`,
+        variables: { input },
     };
 };
-exports.registerSigningKeySchema = registerSigningKeySchema;
-var connectQuerySchema = function (input) {
+export const connectQuerySchema = (input) => {
     return {
-        operationName: 'connect',
-        query: "mutation connect($input: UpdateConnectionInput!) {connect(input: $input) {result}}",
+        operationName: "connect",
+        query: `mutation connect($input: UpdateConnectionInput!) {connect(input: $input) {result}}`,
         variables: {
-            input: input,
+            input,
         },
     };
 };
-exports.connectQuerySchema = connectQuerySchema;
-var disconnectQuerySchema = function (input) {
+export const disconnectQuerySchema = (input) => {
     return {
-        operationName: 'disconnect',
-        query: "mutation disconnect($input: UpdateConnectionInput!) {disconnect(input: $input) {result}}",
+        operationName: "disconnect",
+        query: `mutation disconnect($input: UpdateConnectionInput!) {disconnect(input: $input) {result}}`,
         variables: {
-            input: input,
+            input,
         },
     };
 };
-exports.disconnectQuerySchema = disconnectQuerySchema;
-var setAliasQuerySchema = function (input) {
+export const setAliasQuerySchema = (input) => {
     return {
-        operationName: 'alias',
-        query: "mutation alias($input: UpdateConnectionInput!) {alias(input: $input) {result}}",
+        operationName: "alias",
+        query: `mutation alias($input: UpdateConnectionInput!) {alias(input: $input) {result}}`,
         variables: {
-            input: input,
+            input,
         },
     };
 };
-exports.setAliasQuerySchema = setAliasQuerySchema;
-var authSchema = function (_a) {
-    var address = _a.address, signature = _a.signature, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b;
+export const authSchema = ({ address, signature, network = Blockchain.ETH, }) => {
     return {
-        operationName: 'auth',
-        query: "mutation auth($address: String!, $signature: String!, $network: String) {\n      auth(address: $address, signature: $signature, network: $network) {\n        result\n        authToken\n      }\n    }",
-        variables: { address: address, signature: signature, network: network },
+        operationName: "auth",
+        query: `mutation auth($address: String!, $signature: String!, $network: String) {
+      auth(address: $address, signature: $signature, network: $network) {
+        result
+        authToken
+      }
+    }`,
+        variables: { address, signature, network },
     };
 };
-exports.authSchema = authSchema;
-exports.querySchemas = {
-    connect: exports.connectQuerySchema,
-    disconnect: exports.disconnectQuerySchema,
-    auth: exports.authSchema,
-    setAlias: exports.setAliasQuerySchema,
-    registerSigningKey: exports.registerSigningKeySchema,
+export const querySchemas = {
+    connect: connectQuerySchema,
+    disconnect: disconnectQuerySchema,
+    auth: authSchema,
+    setAlias: setAliasQuerySchema,
+    registerSigningKey: registerSigningKeySchema,
 };
-var request = function (url, data) {
-    if (url === void 0) { url = ''; }
-    if (data === void 0) { data = {}; }
-    return __awaiter(void 0, void 0, void 0, function () {
-        var response;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0: return [4 /*yield*/, fetch(url, {
-                        method: 'POST',
-                        mode: 'cors',
-                        cache: 'no-cache',
-                        headers: {
-                            'Content-Type': 'application/json',
-                        },
-                        referrerPolicy: 'no-referrer',
-                        body: JSON.stringify(data),
-                    })];
-                case 1:
-                    response = _a.sent();
-                    return [2 /*return*/, response.json()];
-            }
-        });
+export const request = async (url = "", data = {}) => {
+    // Default options are marked with *
+    const response = await fetch(url, {
+        method: "POST",
+        mode: "cors",
+        cache: "no-cache",
+        headers: {
+            "Content-Type": "application/json",
+        },
+        referrerPolicy: "no-referrer",
+        body: JSON.stringify(data),
     });
+    return response.json();
 };
-exports.request = request;
-var handleQuery = function (data, url) {
-    return (0, exports.request)(url, data);
+export const handleQuery = (data, url) => {
+    return request(url, data);
 };
-exports.handleQuery = handleQuery;
-var registerSigningKey = function (_a) {
-    var address = _a.address, message = _a.message, signature = _a.signature, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b, url = _a.url;
-    var result = exports.querySchemas['registerSigningKey']({
-        address: address,
-        message: message,
-        signature: signature,
-        network: network,
+export const registerSigningKey = ({ address, message, signature, network = Blockchain.ETH, url, }) => {
+    const result = querySchemas["registerSigningKey"]({
+        address,
+        message,
+        signature,
+        network,
     });
-    return (0, exports.handleQuery)(result, url);
+    return handleQuery(result, url);
 };
-exports.registerSigningKey = registerSigningKey;
-var auth = function (_a) {
-    var address = _a.address, signature = _a.signature, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b, url = _a.url;
-    var result = exports.querySchemas['auth']({
-        address: address,
-        signature: signature,
-        network: network,
+export const auth = ({ address, signature, network = Blockchain.ETH, url, }) => {
+    const result = querySchemas["auth"]({
+        address,
+        signature,
+        network,
     });
-    return (0, exports.handleQuery)(result, url);
+    return handleQuery(result, url);
 };
-exports.auth = auth;
-var follow = function (_a) {
-    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature, operation = _a.operation, signingKey = _a.signingKey, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b;
-    var schema = exports.querySchemas['connect']({
-        fromAddr: fromAddr,
-        toAddr: toAddr,
-        alias: alias,
-        namespace: namespace,
-        signature: signature,
-        operation: operation,
-        signingKey: signingKey,
-        network: network,
+export const follow = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }) => {
+    const schema = querySchemas["connect"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
     });
-    return (0, exports.handleQuery)(schema, url);
+    return handleQuery(schema, url);
 };
-exports.follow = follow;
-var unfollow = function (_a) {
-    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature, operation = _a.operation, signingKey = _a.signingKey, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b;
-    var schema = exports.querySchemas['disconnect']({
-        fromAddr: fromAddr,
-        toAddr: toAddr,
-        alias: alias,
-        namespace: namespace,
-        signature: signature,
-        operation: operation,
-        signingKey: signingKey,
-        network: network,
+export const unfollow = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }) => {
+    const schema = querySchemas["disconnect"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
     });
-    return (0, exports.handleQuery)(schema, url);
+    return handleQuery(schema, url);
 };
-exports.unfollow = unfollow;
-var setAlias = function (_a) {
-    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature, operation = _a.operation, signingKey = _a.signingKey, _b = _a.network, network = _b === void 0 ? types_1.Blockchain.ETH : _b;
-    var schema = exports.querySchemas['setAlias']({
-        fromAddr: fromAddr,
-        toAddr: toAddr,
-        alias: alias,
-        namespace: namespace,
-        signature: signature,
-        operation: operation,
-        signingKey: signingKey,
-        network: network,
+export const setAlias = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }) => {
+    const schema = querySchemas["setAlias"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
     });
-    return (0, exports.handleQuery)(schema, url);
+    return handleQuery(schema, url);
 };
-exports.setAlias = setAlias;
 //# sourceMappingURL=queries.js.map
\ No newline at end of file
diff --git a/lib/queries.js.map b/lib/queries.js.map
index 5a95d6cf501908f4ca2ddbf0d3a5852fa494be90..029261e1c38a98507538ec7728dd9cba17c636dd 100644
--- a/lib/queries.js.map
+++ b/lib/queries.js.map
@@ -1 +1 @@
-{"version":3,"file":"queries.js","sourceRoot":"","sources":["../src/queries.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"queries.js","sourceRoot":"","sources":["../src/queries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAqBvC,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAA8B,EAAE,EAAE;IACxE,OAAO;QACH,aAAa,EAAE,aAAa;QAC5B,KAAK,EAAE;;;;MAIT;QACE,SAAS,EAAE,EAAE,KAAK,EAAE;KACvB,CAAC;AACN,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,KAA4B,EAAE,EAAE;IAC/D,OAAO;QACH,aAAa,EAAE,SAAS;QACxB,KAAK,EAAE,oFAAoF;QAC3F,SAAS,EAAE;YACP,KAAK;SACR;KACJ,CAAC;AACN,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAA4B,EAAE,EAAE;IACnE,OAAO;QACH,aAAa,EAAE,YAAY;QAC3B,KAAK,EAAE,0FAA0F;QACjG,SAAS,EAAE;YACP,KAAK;SACR;KACJ,CAAC;AACN,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAA4B,EAAE,EAAE;IAChE,OAAO;QACH,aAAa,EAAE,OAAO;QACtB,KAAK,EAAE,gFAAgF;QACvF,SAAS,EAAE;YACP,KAAK;SACR;KACJ,CAAC;AACN,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,GAIzE,EAAE,EAAE;IACD,OAAO;QACH,aAAa,EAAE,MAAM;QACrB,KAAK,EAAE;;;;;MAKT;QACE,SAAS,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE;KAC7C,CAAC;AACN,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,YAAY,GAAG;IACzB,OAAO,EAAE,kBAAkB;IAC3B,UAAU,EAAE,qBAAqB;IACjC,IAAI,EAAE,UAAU;IAChB,QAAQ,EAAE,mBAAmB;IAC7B,kBAAkB,EAAE,wBAAwB;CAC/C,CAAC;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE;IAClD,oCAAoC;IACpC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAC9B,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,UAAU;QACjB,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;SACrC;QACD,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;KAC7B,CAAC,CAAC;IAEN,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACxB,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAI5B,EAAE,GAAW,EAAE,EAAE;IACd,OAAO,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG,GAE/F,EAAE,EAAE;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAC9C,OAAO;QACP,OAAO;QACP,SAAS;QACT,OAAO;KACV,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG,GAKxE,EAAE,EAAE;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QAChC,OAAO;QACP,SAAS;QACT,OAAO;KACV,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,GAU5H,EAAE,EAAE;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;QACnC,QAAQ;QACR,MAAM;QACN,KAAK;QACL,SAAS;QACT,SAAS;QACT,SAAS;QACT,UAAU;QACV,OAAO;KACV,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,GAU9H,EAAE,EAAE;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;QACtC,QAAQ;QACR,MAAM;QACN,KAAK;QACL,SAAS;QACT,SAAS;QACT,SAAS;QACT,UAAU;QACV,OAAO;KACV,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AAED,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,GAAG,UAAU,CAAC,GAAG,GAU9H,EAAE,EAAE;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QACpC,QAAQ;QACR,MAAM;QACN,KAAK;QACL,SAAS;QACT,SAAS;QACT,SAAS;QACT,UAAU;QACV,OAAO;KACV,CAAC,CAAC;IACH,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC"}
\ No newline at end of file
diff --git a/lib/types.js b/lib/types.js
index aa8dd7a002ac23eb3a86fe518f43f9ce33d00111..57f60c4583ce45af187acc6ef17a30acea59bf24 100644
--- a/lib/types.js
+++ b/lib/types.js
@@ -1,14 +1,11 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Env = exports.Blockchain = void 0;
-var Blockchain;
+export var Blockchain;
 (function (Blockchain) {
     Blockchain["ETH"] = "ETH";
     Blockchain["SOLANA"] = "SOLANA";
-})(Blockchain = exports.Blockchain || (exports.Blockchain = {}));
-var Env;
+})(Blockchain = Blockchain || (Blockchain = {}));
+export var Env;
 (function (Env) {
     Env["STAGING"] = "STAGING";
     Env["PRODUCTION"] = "PRODUCTION";
-})(Env = exports.Env || (exports.Env = {}));
+})(Env = Env || (Env = {}));
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/lib/types.js.map b/lib/types.js.map
index 5cd3dceaf32d713575bd120d6cf1f96fa12e59fb..74d6695e6c7ea2cd0ac3945b0fcb75327c4a10bb 100644
--- a/lib/types.js.map
+++ b/lib/types.js.map
@@ -1 +1 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAYA,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,yBAAW,CAAA;IACX,+BAAiB,CAAA;AACnB,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB;AA6BD,IAAY,GAGX;AAHD,WAAY,GAAG;IACb,0BAAmB,CAAA;IACnB,gCAAyB,CAAA;AAC3B,CAAC,EAHW,GAAG,GAAH,WAAG,KAAH,WAAG,QAGd"}
\ No newline at end of file
+{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAYA,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,yBAAW,CAAA;IACX,+BAAiB,CAAA;AACnB,CAAC,EAHW,UAAU,GAAV,UAAU,KAAV,UAAU,QAGrB;AA6BD,MAAM,CAAN,IAAY,GAGX;AAHD,WAAY,GAAG;IACb,0BAAmB,CAAA;IACnB,gCAAyB,CAAA;AAC3B,CAAC,EAHW,GAAG,GAAH,GAAG,KAAH,GAAG,QAGd"}
\ No newline at end of file
diff --git a/lib/utils.d.ts b/lib/utils.d.ts
index 0f29eaa29f319739fe5efc0c84a6d2458c4e35a1..75478b00e88769701219b41629a39c8b225ceb61 100644
--- a/lib/utils.d.ts
+++ b/lib/utils.d.ts
@@ -1,11 +1,11 @@
-import { Blockchain } from './types';
+import { Blockchain } from "./types.js";
 export declare const encodeRpcMessage: (method: string, params?: any) => {
     jsonrpc: string;
     id: number;
     method: string;
     params: any;
 };
-export declare const safeSend: (provider: any, method: string, params?: any[] | undefined) => Promise<any>;
+export declare const safeSend: (provider: any, method: string, params?: Array<any>) => Promise<any>;
 export declare const getAddressByProvider: (provider: any, chain: Blockchain) => Promise<any>;
 export declare const getSigningKeySignature: (provider: any, chain: Blockchain, message: string, address: string) => Promise<any>;
 //# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/lib/utils.d.ts.map b/lib/utils.d.ts.map
index 0f4713d7892868222d43a29a633ac9eb18b1f1d1..9a58414b37ffb69e1f62bb9c1d18975a012f173f 100644
--- a/lib/utils.d.ts.map
+++ b/lib/utils.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAKrC,eAAO,MAAM,gBAAgB,WAAY,MAAM,WAAW,GAAG;;;;;CAO5D,CAAC;AAEF,eAAO,MAAM,QAAQ,aACT,GAAG,UACL,MAAM,iCAEb,QAAQ,GAAG,CAoCb,CAAC;AAEF,eAAO,MAAM,oBAAoB,aACrB,GAAG,SACN,UAAU,iBA0BlB,CAAC;AAEF,eAAO,MAAM,sBAAsB,aACvB,GAAG,SACN,UAAU,WACR,MAAM,WACN,MAAM,iBA6BhB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAKvC,eAAO,MAAM,gBAAgB,WAAY,MAAM,WAAW,GAAG;;;;;CAO7D,CAAC;AAED,eAAO,MAAM,QAAQ,aAAc,GAAG,UAAU,MAAM,WAAW,MAAM,GAAG,CAAC,KAAG,QAAQ,GAAG,CAgCzF,CAAC;AAED,eAAO,MAAM,oBAAoB,aAAoB,GAAG,SAAS,UAAU,iBA0B3E,CAAC;AAED,eAAO,MAAM,sBAAsB,aAAoB,GAAG,SAAS,UAAU,WAAW,MAAM,WAAW,MAAM,iBA4B/G,CAAC"}
\ No newline at end of file
diff --git a/lib/utils.js b/lib/utils.js
index db7a4ee8af0ce56731482aa84677f318a9e5e75a..40957daac9fbc77ccbd53474fcbe07e249080f69 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -1,164 +1,95 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getSigningKeySignature = exports.getAddressByProvider = exports.safeSend = exports.encodeRpcMessage = void 0;
-var types_1 = require("./types");
-var bs58_1 = __importDefault(require("bs58"));
-var bytes_1 = require("@ethersproject/bytes");
-var strings_1 = require("@ethersproject/strings");
-var encodeRpcMessage = function (method, params) {
+import { Blockchain } from "./types.js";
+import bs58 from "bs58";
+import { hexlify } from "@ethersproject/bytes";
+import { toUtf8Bytes } from "@ethersproject/strings";
+export const encodeRpcMessage = (method, params) => {
     return {
-        jsonrpc: '2.0',
+        jsonrpc: "2.0",
         id: 1,
-        method: method,
-        params: params,
+        method,
+        params,
     };
 };
-exports.encodeRpcMessage = encodeRpcMessage;
-var safeSend = function (provider, method, params) {
+export const safeSend = (provider, method, params) => {
     if (params == null) {
         params = [];
     }
     if (provider.request) {
-        return provider.request({ method: method, params: params }).then(function (response) { return response; }, function (error) {
+        return provider.request({ method, params }).then((response) => response, (error) => {
             throw error;
         });
     }
     else if (provider.sendAsync || provider.send) {
-        var sendFunc_1 = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);
-        var request_1 = (0, exports.encodeRpcMessage)(method, params);
-        return new Promise(function (resolve, reject) {
-            sendFunc_1(request_1, function (error, response) {
+        const sendFunc = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);
+        const request = encodeRpcMessage(method, params);
+        return new Promise((resolve, reject) => {
+            sendFunc(request, (error, response) => {
                 if (error)
                     reject(error);
                 if (response.error) {
-                    var error_1 = new Error(response.error.message);
-                    error_1.code = response.error.code;
-                    error_1.data = response.error.data;
-                    reject(error_1);
+                    const error = new Error(response.error.message);
+                    error.code = response.error.code;
+                    error.data = response.error.data;
+                    reject(error);
                 }
                 resolve(response.result);
             });
         });
     }
     else {
-        throw new Error("Unsupported provider; provider must implement one of the following methods: send, sendAsync, request");
+        throw new Error(`Unsupported provider; provider must implement one of the following methods: send, sendAsync, request`);
     }
 };
-exports.safeSend = safeSend;
-var getAddressByProvider = function (provider, chain) { return __awaiter(void 0, void 0, void 0, function () {
-    var _a, signer, address, addresses;
-    return __generator(this, function (_b) {
-        switch (_b.label) {
-            case 0:
-                _a = chain;
-                switch (_a) {
-                    case types_1.Blockchain.ETH: return [3 /*break*/, 1];
-                    case types_1.Blockchain.SOLANA: return [3 /*break*/, 5];
-                }
-                return [3 /*break*/, 6];
-            case 1:
-                if (!(typeof provider.getSigner === 'function')) return [3 /*break*/, 3];
-                signer = provider.getSigner();
-                return [4 /*yield*/, signer.getAddress()];
-            case 2:
-                address = _b.sent();
-                return [2 /*return*/, address];
-            case 3: return [4 /*yield*/, (0, exports.safeSend)(provider, 'eth_accounts')];
-            case 4:
-                addresses = _b.sent();
-                if (addresses && addresses[0]) {
-                    return [2 /*return*/, addresses[0]];
-                }
-                else {
-                    return [2 /*return*/, ''];
-                }
-                _b.label = 5;
-            case 5:
-                {
-                    return [2 /*return*/, provider.publicKey.toString()];
-                }
-                _b.label = 6;
-            case 6:
-                {
-                    return [2 /*return*/, ''];
-                }
-                _b.label = 7;
-            case 7: return [2 /*return*/];
+export const getAddressByProvider = async (provider, chain) => {
+    switch (chain) {
+        case Blockchain.ETH: {
+            // ethers Web3Provider
+            if (typeof provider.getSigner === "function") {
+                const signer = provider.getSigner();
+                const address = await signer.getAddress();
+                return address;
+            }
+            // ETH Provider
+            const addresses = await safeSend(provider, "eth_accounts");
+            if (addresses && addresses[0]) {
+                return addresses[0];
+            }
+            else {
+                return "";
+            }
         }
-    });
-}); };
-exports.getAddressByProvider = getAddressByProvider;
-var getSigningKeySignature = function (provider, chain, message, address) { return __awaiter(void 0, void 0, void 0, function () {
-    var signer, signingKeySignature_1, signingKeySignature, signingKeySignature, _a, _b;
-    return __generator(this, function (_c) {
-        switch (_c.label) {
-            case 0:
-                if (!(chain === types_1.Blockchain.ETH)) return [3 /*break*/, 4];
-                if (provider.isAuthereum) {
-                    return [2 /*return*/, provider.signMessageWithSigningKey(message)];
-                }
-                if (!(typeof provider.getSigner === 'function')) return [3 /*break*/, 2];
-                signer = provider.getSigner();
-                return [4 /*yield*/, signer.signMessage(message)];
-            case 1:
-                signingKeySignature_1 = _c.sent();
-                return [2 /*return*/, signingKeySignature_1];
-            case 2: return [4 /*yield*/, (0, exports.safeSend)(provider, 'personal_sign', [
-                    (0, bytes_1.hexlify)((0, strings_1.toUtf8Bytes)(message)),
-                    address,
-                ])];
-            case 3:
-                signingKeySignature = _c.sent();
-                return [2 /*return*/, signingKeySignature];
-            case 4:
-                if (!(chain === types_1.Blockchain.SOLANA)) return [3 /*break*/, 6];
-                _b = (_a = bs58_1.default).encode;
-                return [4 /*yield*/, provider.signMessage(new TextEncoder().encode(message))];
-            case 5:
-                signingKeySignature = _b.apply(_a, [_c.sent()]);
-                return [2 /*return*/, signingKeySignature];
-            case 6: return [2 /*return*/, ''];
+        case Blockchain.SOLANA: {
+            return provider.publicKey.toString();
+        }
+        default: {
+            return "";
+        }
+    }
+};
+export const getSigningKeySignature = async (provider, chain, message, address) => {
+    if (chain === Blockchain.ETH) {
+        if (provider.isAuthereum) {
+            return provider.signMessageWithSigningKey(message);
         }
-    });
-}); };
-exports.getSigningKeySignature = getSigningKeySignature;
+        // ethers Web3Provider
+        if (typeof provider.getSigner === "function") {
+            const signer = provider.getSigner();
+            const signingKeySignature = await signer.signMessage(message);
+            return signingKeySignature;
+        }
+        // ETH Provider
+        const signingKeySignature = await safeSend(provider, "personal_sign", [
+            hexlify(toUtf8Bytes(message)),
+            address,
+        ]);
+        return signingKeySignature;
+    }
+    else if (chain === Blockchain.SOLANA) {
+        const signingKeySignature = bs58.encode(await provider.signMessage(new TextEncoder().encode(message)));
+        return signingKeySignature;
+    }
+    else {
+        return "";
+    }
+};
 //# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/lib/utils.js.map b/lib/utils.js.map
index f6e812c1c60fb28b1d732021c1d4c8b8b678fbbe..8e17712ff8b45ce5b642afe929a7b2738c622a2e 100644
--- a/lib/utils.js.map
+++ b/lib/utils.js.map
@@ -1 +1 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/package.json b/package.json
index 83b0076a2e0129d62b8dbba18860ac1b0b0513e8..82f7c9c873219eb944e847653a7346fdeae18439 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,7 @@
 {
   "name": "@cyberlab/cyberconnect",
   "version": "4.2.2",
+  "type": "module",
   "description": "The JavaScript library that allows user to control their decentralized identity(DIDs) and social graph data.",
   "main": "lib/index.js",
   "bin": "lib/index.js",
diff --git a/src/cAuth.ts b/src/cAuth.ts
index b9ac3bcb13df07279085ae60d5f0fdf54bad6c38..0b84130fd8d1c1b2731d9ba43cc45b2e0a2eabe5 100644
--- a/src/cAuth.ts
+++ b/src/cAuth.ts
@@ -1,69 +1,63 @@
-import { Blockchain } from './types';
-import { toUtf8Bytes } from '@ethersproject/strings';
-import { hexlify } from '@ethersproject/bytes';
-import { auth } from './queries';
-import { C_ACCESS_TOKEN_KEY } from './constant';
-import bs58 from 'bs58';
-const msgToSign = 'Sign in to CyberConnect from this device';
+import { Blockchain } from "./types.js";
+import { toUtf8Bytes } from "@ethersproject/strings";
+import { hexlify } from "@ethersproject/bytes";
+import { auth } from "./queries.js";
+import { C_ACCESS_TOKEN_KEY } from "./constant.js";
+import bs58 from "bs58";
+const msgToSign = "Sign in to CyberConnect from this device";
 
-export const personalSign = async (provider: any, address: string) => {
-  if (provider.signMessage) {
-    // return awat
-    if (!provider.publicKey) {
-      alert('wallet not connected');
+ export const personalSign = async (provider: any, address: string) => {
+    if (provider.signMessage) {
+        // return awat
+        if (!provider.publicKey) {
+            alert("wallet not connected");
+        }
+        if (!provider.signMessage)
+            throw new Error("Wallet does not support message signing!");
+        const message = new TextEncoder().encode(msgToSign);
+        const signature = await provider.signMessage(message);
+        return bs58.encode(signature);
+    }
+    else {
+        return await provider.send("personal_sign", [
+            hexlify(toUtf8Bytes(msgToSign)),
+            address.toLowerCase(),
+        ]);
     }
-    if (!provider.signMessage)
-      throw new Error('Wallet does not support message signing!');
-    const message = new TextEncoder().encode(msgToSign);
-    const signature = await provider.signMessage(message);
-    return bs58.encode(signature);
-  } else {
-    return await provider.send('personal_sign', [
-      hexlify(toUtf8Bytes(msgToSign)),
-      address.toLowerCase(),
-    ]);
-  }
 };
 
-export const cAuth = async (
-  provider: any,
-  address: string,
-  url: string,
-  chain: Blockchain,
-) => {
-  if (window.localStorage.getItem(C_ACCESS_TOKEN_KEY)) {
-    return window.localStorage.getItem(C_ACCESS_TOKEN_KEY);
-  }
-  const signature = await personalSign(provider, address);
-  if (signature) {
-    let sig;
-    if (chain === Blockchain.ETH) {
-      if (typeof signature == 'string') {
-        sig = signature;
-      } else if (signature.result) {
-        sig = signature.result;
-      } else {
-        return;
-      }
-    } else {
-      sig = signature;
+ export const cAuth = async (provider: any, address: string, url: string, chain: Blockchain) => {
+    if (window.localStorage.getItem(C_ACCESS_TOKEN_KEY)) {
+        return window.localStorage.getItem(C_ACCESS_TOKEN_KEY);
     }
-    const res = await auth({
-      address,
-      signature: sig,
-      network: chain,
-      url,
-    });
-    if (
-      res.data &&
-      res.data.auth.result === 'SUCCESS' &&
-      res.data.auth.authToken
-    ) {
-      window?.localStorage?.setItem(
-        C_ACCESS_TOKEN_KEY,
-        res.data.auth.authToken,
-      );
-      return res;
+    const signature = await personalSign(provider, address);
+    if (signature) {
+        let sig;
+        if (chain === Blockchain.ETH) {
+            if (typeof signature == "string") {
+                sig = signature;
+            }
+            else if (signature.result) {
+                sig = signature.result;
+            }
+            else {
+                return;
+            }
+        }
+        else {
+            sig = signature;
+        }
+        const res = await auth({
+            address,
+            signature: sig,
+            network: chain,
+            url,
+        });
+        if (res.data &&
+            res.data.auth.result === "SUCCESS" &&
+            res.data.auth.authToken) {
+            window?.localStorage?.setItem(C_ACCESS_TOKEN_KEY, res.data.auth.authToken);
+            return res;
+        }
     }
-  }
 };
diff --git a/src/cyberConnect.ts b/src/cyberConnect.ts
index c7f1520f1df113707d183dd31e8954fc3fabc626..09800282c6986eef480f759c68f026a04224a23d 100644
--- a/src/cyberConnect.ts
+++ b/src/cyberConnect.ts
@@ -1,620 +1,540 @@
-import { CeramicClient } from '@ceramicnetwork/http-client';
-import KeyDidResolver from 'key-did-resolver';
-import ThreeIdResolver from '@ceramicnetwork/3id-did-resolver';
-import ThreeIdProvider from '3id-did-provider';
-import { EthereumAuthProvider } from '@3id/connect';
-import { SolanaAuthProvider } from '@ceramicnetwork/blockchain-utils-linking';
-import { hash } from '@stablelib/sha256';
-import { fromString } from 'uint8arrays';
-import { DID } from 'dids';
-import { IDX } from '@ceramicstudio/idx';
-import { endpoints } from './network';
-import { follow, registerSigningKey, setAlias, unfollow } from './queries';
-import { ConnectError, ErrorCode } from './error';
-import {
-  Blockchain,
-  Config,
-  CyberConnectStore,
-  Endpoint,
-  Operation,
-} from './types';
-import { getAddressByProvider, getSigningKeySignature } from './utils';
-import { Caip10Link } from '@ceramicnetwork/stream-caip10-link';
-import { Env } from '.';
-import { C_ACCESS_TOKEN_KEY, DFLAG } from './constant';
-import {
-  clearSigningKey,
-  getPublicKey,
-  hasSigningKey,
-  signWithSigningKey,
-  clearSigningKeyByAddress
-} from './crypto';
-
-class CyberConnect {
-  address: string = '';
-  namespace: string;
-  endpoint: Endpoint;
-  ceramicClient: CeramicClient;
-  authProvider: EthereumAuthProvider | SolanaAuthProvider | undefined;
-  resolverRegistry: any;
-  idxInstance: IDX | undefined;
-  signature: string = '';
-  chain: Blockchain = Blockchain.ETH;
-  chainRef: string = '';
-  provider: any = null;
-  accountLink: Caip10Link | null = null;
-  authId: string = '';
-  did: DID | null = null;
-  threeId: ThreeIdProvider | null = null;
-  threeIdProvider: any = null;
-
-  constructor(config: Config) {
-    const { provider, namespace, env, chainRef, chain } = config;
-
-    if (!namespace) {
-      throw new ConnectError(ErrorCode.EmptyNamespace);
-    }
-
-    this.namespace = namespace;
-    this.endpoint = endpoints[env || Env.PRODUCTION];
-    this.ceramicClient = new CeramicClient(this.endpoint.ceramicUrl);
-    this.chain = chain || Blockchain.ETH;
-    this.chainRef = chainRef || '';
-    this.provider = provider;
-
-    const keyDidResolver = KeyDidResolver.getResolver();
-    const threeIdResolver = ThreeIdResolver.getResolver(this.ceramicClient);
-
-    this.resolverRegistry = {
-      ...threeIdResolver,
-      ...keyDidResolver,
-    };
-    delete window.localStorage[C_ACCESS_TOKEN_KEY];
-  }
-
-  async getAuthProvider() {
-    if (!this.provider) {
-      throw new ConnectError(ErrorCode.EmptyEthProvider);
-    }
-
-    try {
-      this.address = await getAddressByProvider(this.provider, this.chain);
-    } catch (e) {
-      throw new ConnectError(ErrorCode.AuthProviderError, e as string);
-    }
-
-    switch (this.chain) {
-      case Blockchain.ETH: {
-        this.authProvider = new EthereumAuthProvider(
-          this.provider,
-          this.address,
-        );
-        break;
-      }
-      case Blockchain.SOLANA: {
-        if (!this.provider.publicKey) {
-          throw new ConnectError(
-            ErrorCode.AuthProviderError,
-            'Wallet Not Connected',
-          );
-        }
-        if (!this.provider.signMessage) {
-          throw new ConnectError(
-            ErrorCode.AuthProviderError,
-            'Provider must implement signMessage',
-          );
+import { CeramicClient } from "@ceramicnetwork/http-client";
+import KeyDidResolver from "key-did-resolver";
+import ThreeIdResolver from "@ceramicnetwork/3id-did-resolver";
+import ThreeIdProvider from "3id-did-provider";
+import { EthereumAuthProvider } from "@3id/connect";
+import { SolanaAuthProvider } from "@ceramicnetwork/blockchain-utils-linking";
+import { hash } from "@stablelib/sha256";
+import { fromString } from "uint8arrays";
+import { DID } from "dids";
+import { IDX } from "@ceramicstudio/idx";
+import { endpoints } from "./network.js";
+import { follow, registerSigningKey, setAlias, unfollow } from "./queries.js";
+import { ConnectError, ErrorCode } from "./error.js";
+import { Blockchain, Config, CyberConnectStore, Endpoint, Operation, } from "./types.js";
+import { getAddressByProvider, getSigningKeySignature } from "./utils.js";
+import { Caip10Link } from "@ceramicnetwork/stream-caip10-link";
+import { Env } from "./index.js";
+import { C_ACCESS_TOKEN_KEY, DFLAG } from "./constant.js";
+import { clearSigningKey, getPublicKey, hasSigningKey, signWithSigningKey, clearSigningKeyByAddress } from "./crypto.js";
+
+ class CyberConnect {
+    address: string = "";
+    namespace: string;
+    endpoint: Endpoint;
+    ceramicClient: CeramicClient;
+    authProvider: EthereumAuthProvider | SolanaAuthProvider | undefined;
+    resolverRegistry: any;
+    idxInstance: IDX | undefined;
+    signature: string = "";
+    chain: Blockchain = Blockchain.ETH;
+    chainRef: string = "";
+    provider: any = null;
+    accountLink: Caip10Link | null = null;
+    authId: string = "";
+    did: DID | null = null;
+    threeId: ThreeIdProvider | null = null;
+    threeIdProvider: any = null;
+    
+ constructor(config: Config) {
+        const { provider, namespace, env, chainRef, chain } = config;
+        
+ if (!namespace) {
+            throw new ConnectError(ErrorCode.EmptyNamespace);
         }
-
-        this.authProvider = new SolanaAuthProvider(
-          this.provider,
-          this.address,
-          this.chainRef,
-        );
-
-        break;
-      }
-    }
-  }
-
-  private async setupAuthProvider() {
-    if (this.signature) {
-      return;
-    }
-
-    await this.getAuthProvider();
-
-    if (!this.authProvider) {
-      throw new ConnectError(ErrorCode.EmptyAuthProvider);
-    }
-
-    const rst = await this.authProvider.authenticate(
-      'Allow this account to control your identity',
-    );
-    this.signature = rst;
-  }
-
-  async signWithJwt() {
-    if (localStorage[C_ACCESS_TOKEN_KEY] && !DFLAG) {
-      return localStorage[C_ACCESS_TOKEN_KEY];
-    } else if (DFLAG) {
-      const timestamp = new Date().getTime();
-
-      const payload = {
-        timestamp,
-        target: this.address,
-      };
-
-      if (!this.threeId) {
-        throw new ConnectError(ErrorCode.SignJwtError, 'Empty ThreeId');
-      }
-
-      const req = {
-        method: 'did_createJWS',
-        params: { payload, did: this.threeId.id },
-      };
-
-      const id = 0;
-
-      if (!this.threeIdProvider) {
-        throw new ConnectError(
-          ErrorCode.SignJwtError,
-          'Empty ThreeId provider',
-        );
-      }
-
-      const sendRes = await this.threeIdProvider.send(
-        Object.assign({ jsonrpc: '2.0', id }, req),
-        null,
-      );
-
-      if (!sendRes || !sendRes.result) {
-        return '';
-      }
-
-      if (!this.did) {
-        throw new ConnectError(ErrorCode.SignJwtError, 'Empty DID');
-      }
-
-      const normalJWS = sendRes.result.jws;
-
-      const jwsString = [
-        normalJWS.signatures[0].protected,
-        normalJWS.payload,
-        normalJWS.signatures[0].signature,
-      ].join('.');
-
-      return jwsString;
-    } else {
-      return '';
-    }
-  }
-
-  async setupDid() {
-    if (this.idxInstance) {
-      return;
-    }
-
-    if (!this.authProvider) {
-      new ConnectError(ErrorCode.EmptyAuthProvider).printError();
-      return;
-    }
-
-    if (!this.ceramicClient) {
-      new ConnectError(
-        ErrorCode.CeramicError,
-        'Can not find ceramic client',
-      ).printError();
-      return;
+        
+ this.namespace = namespace;
+        this.endpoint = endpoints[env || Env.PRODUCTION];
+        this.ceramicClient = new CeramicClient(this.endpoint.ceramicUrl);
+        this.chain = chain || Blockchain.ETH;
+        this.chainRef = chainRef || "";
+        this.provider = provider;
+        
+ const keyDidResolver = KeyDidResolver.getResolver();
+        const threeIdResolver = ThreeIdResolver.getResolver(this.ceramicClient);
+        
+ this.resolverRegistry = {
+            ...threeIdResolver,
+            ...keyDidResolver,
+        };
+        delete window.localStorage[C_ACCESS_TOKEN_KEY];
     }
-
-    const getPermission = async (request: any) => {
-      return request.payload.paths;
-    };
-
-    const authSecret = hash(fromString(this.signature.slice(2)));
-    this.authId = (await this.authProvider.accountId()).toString();
-
-    this.threeId = await ThreeIdProvider.create({
-      getPermission,
-      authSecret,
-      authId: this.authId,
-      ceramic: this.ceramicClient,
-    });
-
-    this.threeIdProvider = this.threeId.getDidProvider();
-
-    this.did = new DID({
-      provider: this.threeIdProvider,
-      resolver: this.resolverRegistry,
-    });
-
-    await this.did.authenticate();
-    await this.ceramicClient.setDID(this.did);
-  }
-
-  createIdx() {
-    if (this.idxInstance) {
-      return;
-    }
-
-    this.idxInstance = new IDX({
-      ceramic: this.ceramicClient,
-      aliases: {
-        cyberConnect: this.endpoint.cyberConnectSchema,
-      },
-      autopin: true,
-    });
-  }
-
-  async createAccountLink() {
-    if (this.accountLink && !!this.accountLink.did) {
-      return;
-    }
-    this.accountLink = await Caip10Link.fromAccount(
-      this.ceramicClient,
-      this.authId,
-    );
-
-    if (!this.accountLink.did && this.did && this.authProvider) {
-      await this.accountLink.setDid(this.did.id, this.authProvider, {
-        anchor: false,
-        publish: false,
-      });
+    
+ async getAuthProvider() {
+        if (!this.provider) {
+            throw new ConnectError(ErrorCode.EmptyEthProvider);
+        }
+        
+ try {
+            this.address = await getAddressByProvider(this.provider, this.chain);
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.AuthProviderError, e as string);
+        }
+        
+ switch (this.chain) {
+            case Blockchain.ETH: {
+                this.authProvider = new EthereumAuthProvider(this.provider, this.address);
+                break;
+            }
+            case Blockchain.SOLANA: {
+                if (!this.provider.publicKey) {
+                    throw new ConnectError(ErrorCode.AuthProviderError, "Wallet Not Connected");
+                }
+                if (!this.provider.signMessage) {
+                    throw new ConnectError(ErrorCode.AuthProviderError, "Provider must implement signMessage");
+                }
+                
+ this.authProvider = new SolanaAuthProvider(this.provider, this.address, this.chainRef);
+                
+ break;
+            }
+        }
     }
-  }
-
-  async getOutboundLink() {
-    if (!this.idxInstance) {
-      throw new ConnectError(
-        ErrorCode.CeramicError,
-        'Could not find idx instance',
-      );
+    
+ private async setupAuthProvider() {
+        if (this.signature) {
+            return;
+        }
+        
+ await this.getAuthProvider();
+        
+ if (!this.authProvider) {
+            throw new ConnectError(ErrorCode.EmptyAuthProvider);
+        }
+        
+ const rst = await this.authProvider.authenticate("Allow this account to control your identity");
+        this.signature = rst;
     }
-
-    try {
-      const result = (await this.idxInstance.get(
-        'cyberConnect',
-      )) as CyberConnectStore;
-
-      return result?.outboundLink || [];
-    } catch (e) {
-      throw new ConnectError(ErrorCode.CeramicError, e as string);
+    
+ async signWithJwt() {
+        if (localStorage[C_ACCESS_TOKEN_KEY] && !DFLAG) {
+            return localStorage[C_ACCESS_TOKEN_KEY];
+        }
+        else if (DFLAG) {
+            const timestamp = new Date().getTime();
+            
+ const payload = {
+                timestamp,
+                target: this.address,
+            };
+            
+ if (!this.threeId) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty ThreeId");
+            }
+            
+ const req = {
+                method: "did_createJWS",
+                params: { payload, did: this.threeId.id },
+            };
+            
+ const id = 0;
+            
+ if (!this.threeIdProvider) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty ThreeId provider");
+            }
+            
+ const sendRes = await this.threeIdProvider.send(Object.assign({ jsonrpc: "2.0", id }, req), null);
+            
+ if (!sendRes || !sendRes.result) {
+                return "";
+            }
+            
+ if (!this.did) {
+                throw new ConnectError(ErrorCode.SignJwtError, "Empty DID");
+            }
+            
+ const normalJWS = sendRes.result.jws;
+            
+ const jwsString = [
+                normalJWS.signatures[0].protected,
+                normalJWS.payload,
+                normalJWS.signatures[0].signature,
+            ].join(".");
+            
+ return jwsString;
+        }
+        else {
+            return "";
+        }
     }
-  }
-  // first step
-  async authenticate() {
-    try {
-      if (!DFLAG) {
-        this.authWithSigningKey();
-      } else {
-        await this.setupAuthProvider();
-        await this.setupDid();
-        await this.createAccountLink();
-        this.createIdx();
-      }
-    } catch (e) {
-      throw e;
+    
+ async setupDid() {
+        if (this.idxInstance) {
+            return;
+        }
+        
+ if (!this.authProvider) {
+            new ConnectError(ErrorCode.EmptyAuthProvider).printError();
+            return;
+        }
+        
+ if (!this.ceramicClient) {
+            new ConnectError(ErrorCode.CeramicError, "Can not find ceramic client").printError();
+            return;
+        }
+        
+ const getPermission = async (request: any) => {
+            return request.payload.paths;
+        };
+        
+ const authSecret = hash(fromString(this.signature.slice(2)));
+        this.authId = (await this.authProvider.accountId()).toString();
+        
+ this.threeId = await ThreeIdProvider.create({
+            getPermission,
+            authSecret,
+            authId: this.authId,
+            ceramic: this.ceramicClient,
+        });
+        
+ this.threeIdProvider = this.threeId.getDidProvider();
+        
+ this.did = new DID({
+            provider: this.threeIdProvider,
+            resolver: this.resolverRegistry,
+        });
+        
+ await this.did.authenticate();
+        await this.ceramicClient.setDID(this.did);
     }
-  }
-
-  private async ceramicConnect(targetAddr: string, alias: string = '') {
-    try {
-      const outboundLink = await this.getOutboundLink();
-
-      if (!this.idxInstance) {
-        throw new ConnectError(
-          ErrorCode.CeramicError,
-          'Could not find idx instance',
-        );
-      }
-
-      const index = outboundLink.findIndex((link) => {
-        return link.target === targetAddr && link.namespace === this.namespace;
-      });
-
-      const curTimeStr = String(Date.now());
-
-      if (index === -1) {
-        outboundLink.push({
-          target: targetAddr,
-          connectionType: 'follow',
-          namespace: this.namespace,
-          alias,
-          createdAt: curTimeStr,
+    
+ createIdx() {
+        if (this.idxInstance) {
+            return;
+        }
+        
+ this.idxInstance = new IDX({
+            ceramic: this.ceramicClient,
+            aliases: {
+                cyberConnect: this.endpoint.cyberConnectSchema,
+            },
+            autopin: true,
         });
-      } else {
-        outboundLink[index].createdAt = curTimeStr;
-      }
-
-      this.idxInstance.set('cyberConnect', { outboundLink });
-    } catch (e) {
-      console.error(e);
     }
-  }
-
-  private async ceramicDisconnect(targetAddr: string) {
-    try {
-      const outboundLink = await this.getOutboundLink();
-
-      if (!this.idxInstance) {
-        throw new ConnectError(
-          ErrorCode.CeramicError,
-          'Could not find idx instance',
-        );
-      }
-
-      const newOutboundLink = outboundLink.filter((link) => {
-        return link.target !== targetAddr || link.namespace !== this.namespace;
-      });
-
-      this.idxInstance.set('cyberConnect', {
-        outboundLink: newOutboundLink,
-      });
-    } catch (e) {
-      console.error(e);
+    
+ async createAccountLink() {
+        if (this.accountLink && !!this.accountLink.did) {
+            return;
+        }
+        this.accountLink = await Caip10Link.fromAccount(this.ceramicClient, this.authId);
+        
+ if (!this.accountLink.did && this.did && this.authProvider) {
+            await this.accountLink.setDid(this.did.id, this.authProvider, {
+                anchor: false,
+                publish: false,
+            });
+        }
     }
-  }
-
-  private async ceramicSetAlias(targetAddr: string, alias: string) {
-    try {
-      const outboundLink = await this.getOutboundLink();
-
-      if (!this.idxInstance) {
-        throw new ConnectError(
-          ErrorCode.CeramicError,
-          'Could not find idx instance',
-        );
-      }
-
-      const index = outboundLink.findIndex((link) => {
-        return link.target === targetAddr && link.namespace === this.namespace;
-      });
-
-      if (index !== -1) {
-        outboundLink[index] = { ...outboundLink[index], alias };
-        this.idxInstance.set('cyberConnect', { outboundLink });
-      } else {
-        throw new ConnectError(
-          ErrorCode.CeramicError,
-          "Couldn't find the target address in the given namespace",
-        );
-      }
-    } catch (e) {
-      console.error(e);
+    
+ async getOutboundLink() {
+        if (!this.idxInstance) {
+            throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+        }
+        
+ try {
+            const result = (await this.idxInstance.get("cyberConnect")) as CyberConnectStore;
+            
+ return result?.outboundLink || [];
+        }
+        catch (e) {
+            throw new ConnectError(ErrorCode.CeramicError, e as string);
+        }
     }
-  }
-
-  async connect(targetAddr: string, alias: string = '') {
-    try {
-      this.address = await this.getAddress();
-      await this.authWithSigningKey();
-
-      const operation: Operation = {
-        name: 'follow',
-        from: this.address,
-        to: targetAddr,
-        namespace: this.namespace,
-        network: this.chain,
-        alias,
-        timestamp: Date.now(),
-      };
-
-      const signature = await signWithSigningKey(
-        JSON.stringify(operation),
-        this.address,
-      );
-      const publicKey = await getPublicKey(this.address);
-
-      const params = {
-        fromAddr: this.address,
-        toAddr: targetAddr,
-        alias,
-        namespace: this.namespace,
-        url: this.endpoint.cyberConnectApi,
-        signature,
-        signingKey: publicKey,
-        operation: JSON.stringify(operation),
-        network: this.chain,
-      };
-
-      // const sign = await this.signWithJwt();
-
-      const resp = await follow(params);
-
-      if (resp?.data?.connect.result === 'INVALID_SIGNATURE') {
-        await clearSigningKey();
-
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.connect.result,
-        );
-      }
-
-      if (resp?.data?.connect.result !== 'SUCCESS') {
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.connect.result,
-        );
-      }
-    } catch (e: any) {
-      throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+    // first step
+    async authenticate() {
+        try {
+            if (!DFLAG) {
+                this.authWithSigningKey();
+            }
+            else {
+                await this.setupAuthProvider();
+                await this.setupDid();
+                await this.createAccountLink();
+                this.createIdx();
+            }
+        }
+        catch (e) {
+            throw e;
+        }
     }
-    if (DFLAG) {
-      this.ceramicConnect(targetAddr, alias);
+    
+ private async ceramicConnect(targetAddr: string, alias: string = "") {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            
+ if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            
+ const index = outboundLink.findIndex((link) => {
+                return link.target === targetAddr && link.namespace === this.namespace;
+            });
+            
+ const curTimeStr = String(Date.now());
+            
+ if (index === -1) {
+                outboundLink.push({
+                    target: targetAddr,
+                    connectionType: "follow",
+                    namespace: this.namespace,
+                    alias,
+                    createdAt: curTimeStr,
+                });
+            }
+            else {
+                outboundLink[index].createdAt = curTimeStr;
+            }
+            
+ this.idxInstance.set("cyberConnect", { outboundLink });
+        }
+        catch (e) {
+            console.error(e);
+        }
     }
-  }
-
-  async disconnect(targetAddr: string, alias: string = '') {
-    try {
-      this.address = await this.getAddress();
-      await this.authWithSigningKey();
-
-      const operation: Operation = {
-        name: 'unfollow',
-        from: this.address,
-        to: targetAddr,
-        namespace: this.namespace,
-        network: this.chain,
-        alias,
-        timestamp: Date.now(),
-      };
-
-      const signature = await signWithSigningKey(
-        JSON.stringify(operation),
-        this.address,
-      );
-      const publicKey = await getPublicKey(this.address);
-
-      const params = {
-        fromAddr: this.address,
-        toAddr: targetAddr,
-        alias,
-        namespace: this.namespace,
-        url: this.endpoint.cyberConnectApi,
-        signature,
-        signingKey: publicKey,
-        operation: JSON.stringify(operation),
-        network: this.chain,
-      };
-
-      // const sign = await this.signWithJwt();
-
-      const resp = await unfollow(params);
-
-      if (resp?.data?.disconnect.result === 'INVALID_SIGNATURE') {
-        await clearSigningKey();
-
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.disconnect.result,
-        );
-      }
-
-      if (resp?.data?.disconnect.result !== 'SUCCESS') {
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.disconnect.result,
-        );
-      }
-    } catch (e: any) {
-      throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+    
+ private async ceramicDisconnect(targetAddr: string) {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            
+ if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            
+ const newOutboundLink = outboundLink.filter((link) => {
+                return link.target !== targetAddr || link.namespace !== this.namespace;
+            });
+            
+ this.idxInstance.set("cyberConnect", {
+                outboundLink: newOutboundLink,
+            });
+        }
+        catch (e) {
+            console.error(e);
+        }
     }
-    if (DFLAG) {
-      this.ceramicDisconnect(targetAddr);
+    
+ private async ceramicSetAlias(targetAddr: string, alias: string) {
+        try {
+            const outboundLink = await this.getOutboundLink();
+            
+ if (!this.idxInstance) {
+                throw new ConnectError(ErrorCode.CeramicError, "Could not find idx instance");
+            }
+            
+ const index = outboundLink.findIndex((link) => {
+                return link.target === targetAddr && link.namespace === this.namespace;
+            });
+            
+ if (index !== -1) {
+                outboundLink[index] = { ...outboundLink[index], alias };
+                this.idxInstance.set("cyberConnect", { outboundLink });
+            }
+            else {
+                throw new ConnectError(ErrorCode.CeramicError, "Couldn't find the target address in the given namespace");
+            }
+        }
+        catch (e) {
+            console.error(e);
+        }
     }
-  }
-
-  async setAlias(targetAddr: string, alias: string = '') {
-    try {
-      this.address = await this.getAddress();
-      await this.authWithSigningKey();
-
-      const operation: Operation = {
-        name: 'follow',
-        from: this.address,
-        to: targetAddr,
-        namespace: this.namespace,
-        network: this.chain,
-        alias,
-        timestamp: Date.now(),
-      };
-
-      const signature = await signWithSigningKey(
-        JSON.stringify(operation),
-        this.address,
-      );
-      const publicKey = await getPublicKey(this.address);
-
-      const params = {
-        fromAddr: this.address,
-        toAddr: targetAddr,
-        alias,
-        namespace: this.namespace,
-        url: this.endpoint.cyberConnectApi,
-        signature,
-        signingKey: publicKey,
-        operation: JSON.stringify(operation),
-        network: this.chain,
-      };
-
-      // const sign = await this.signWithJwt();
-
-      const resp = await setAlias(params);
-
-      if (resp?.data?.alias.result === 'INVALID_SIGNATURE') {
-        await clearSigningKey();
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.alias.result,
-        );
-      }
-
-      if (resp?.data?.alias.result !== 'SUCCESS') {
-        throw new ConnectError(
-          ErrorCode.GraphqlError,
-          resp?.data?.alias.result,
-        );
-      }
-    } catch (e: any) {
-      throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+    
+ async connect(targetAddr: string, alias: string = "") {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            
+ const operation: Operation = {
+                name: "follow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            
+ const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            
+ const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            
+ // const sign = await this.signWithJwt();
+            
+ const resp = await follow(params);
+            
+ if (resp?.data?.connect.result === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                
+ throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.connect.result);
+            }
+            
+ if (resp?.data?.connect.result !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.connect.result);
+            }
+        }
+        catch (e: any) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicConnect(targetAddr, alias);
+        }
     }
-    if (DFLAG) {
-      this.ceramicSetAlias(targetAddr, alias);
+    
+ async disconnect(targetAddr: string, alias: string = "") {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            
+ const operation: Operation = {
+                name: "unfollow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            
+ const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            
+ const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            
+ // const sign = await this.signWithJwt();
+            
+ const resp = await unfollow(params);
+            
+ if (resp?.data?.disconnect.result === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                
+ throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.disconnect.result);
+            }
+            
+ if (resp?.data?.disconnect.result !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.disconnect.result);
+            }
+        }
+        catch (e: any) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicDisconnect(targetAddr);
+        }
     }
-  }
-
-  async getAddress() {
-    if (this.address) {
-      return this.address;
+    
+ async setAlias(targetAddr: string, alias: string = "") {
+        try {
+            this.address = await this.getAddress();
+            await this.authWithSigningKey();
+            
+ const operation: Operation = {
+                name: "follow",
+                from: this.address,
+                to: targetAddr,
+                namespace: this.namespace,
+                network: this.chain,
+                alias,
+                timestamp: Date.now(),
+            };
+            
+ const signature = await signWithSigningKey(JSON.stringify(operation), this.address);
+            const publicKey = await getPublicKey(this.address);
+            
+ const params = {
+                fromAddr: this.address,
+                toAddr: targetAddr,
+                alias,
+                namespace: this.namespace,
+                url: this.endpoint.cyberConnectApi,
+                signature,
+                signingKey: publicKey,
+                operation: JSON.stringify(operation),
+                network: this.chain,
+            };
+            
+ // const sign = await this.signWithJwt();
+            
+ const resp = await setAlias(params);
+            
+ if (resp?.data?.alias.result === "INVALID_SIGNATURE") {
+                await clearSigningKey();
+                throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.alias.result);
+            }
+            
+ if (resp?.data?.alias.result !== "SUCCESS") {
+                throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.alias.result);
+            }
+        }
+        catch (e: any) {
+            throw new ConnectError(ErrorCode.GraphqlError, e.message || e);
+        }
+        if (DFLAG) {
+            this.ceramicSetAlias(targetAddr, alias);
+        }
     }
-    return (this.address = await getAddressByProvider(
-      this.provider,
-      this.chain,
-    ));
-  }
-
-  async authWithSigningKey() {
-    if (await hasSigningKey(this.address)) {
-      return;
+    
+ async getAddress() {
+        if (this.address) {
+            return this.address;
+        }
+        return (this.address = await getAddressByProvider(this.provider, this.chain));
     }
+    
+ async authWithSigningKey() {
+        if (await hasSigningKey(this.address)) {
+            return;
+        }
+        
+ const publicKey = await getPublicKey(this.address);
+        const acknowledgement = "I authorize CyberConnect from this device using signing key:\n";
+        const message = `${acknowledgement}${publicKey}`;
+        
+ this.address = await this.getAddress();
+        try {
+            const signingKeySignature = await getSigningKeySignature(this.provider, this.chain, message, this.address);
+            if (signingKeySignature) {
+                const resp = await registerSigningKey({
+                    address: this.address,
+                    signature: signingKeySignature,
+                    message,
+                    network: this.chain,
+                    url: this.endpoint.cyberConnectApi,
+                });
+                if (resp?.data?.registerKey.result !== "SUCCESS") {
+                    throw new ConnectError(ErrorCode.GraphqlError, resp?.data?.alias.result);
+                }
+            }
+            else {
+                throw new Error("signingKeySignature is empty");
+            }
+        }
+        catch (e) {
+            clearSigningKeyByAddress(this.address);
+        }
+        
 
-    const publicKey = await getPublicKey(this.address);
-    const acknowledgement =
-      'I authorize CyberConnect from this device using signing key:\n';
-    const message = `${acknowledgement}${publicKey}`;
-
-    this.address = await this.getAddress();
-    try {
-      const signingKeySignature = await getSigningKeySignature(
-        this.provider,
-        this.chain,
-        message,
-        this.address,
-      );
-      if (signingKeySignature) {
-        const resp = await registerSigningKey({
-          address: this.address,
-          signature: signingKeySignature,
-          message,
-          network: this.chain,
-          url: this.endpoint.cyberConnectApi,
-        });
-  
-        if (resp?.data?.registerKey.result !== 'SUCCESS') {
-          throw new ConnectError(
-            ErrorCode.GraphqlError,
-            resp?.data?.alias.result,
-          );
-        }
-      } else {
-        throw new Error('signingKeySignature is empty');
-      }
-    } catch (e) {
-      clearSigningKeyByAddress(this.address);
     }
-
-    
-  }
 }
 
-export default CyberConnect;
+ export default CyberConnect;
diff --git a/src/error.ts b/src/error.ts
index db2eace5babd48710ec9b91e27b733297e3015ee..2f5e1959fb591dcd41dd1191183b0dcff74c3538 100644
--- a/src/error.ts
+++ b/src/error.ts
@@ -1,39 +1,41 @@
-import { DFLAG, C_ACCESS_TOKEN_KEY } from './constant';
+import { DFLAG, C_ACCESS_TOKEN_KEY } from "./constant.js";
 export class ConnectError {
-  code: ErrorCode;
-  message: string;
-
-  constructor(code: ErrorCode, message?: string) {
-    this.code = code;
-    this.message = message || errors[code];
-    if (!DFLAG && window && window.localStorage) {
-      delete window.localStorage[C_ACCESS_TOKEN_KEY];
+    code: ErrorCode;
+    message: string;
+    
+ constructor(code: ErrorCode, message?: string) {
+        this.code = code;
+        this.message = message || errors[code];
+        if (!DFLAG && window && window.localStorage) {
+            delete window.localStorage[C_ACCESS_TOKEN_KEY];
+        }
+    }
+    
+ printError() {
+        console.error(this.message);
     }
-  }
-
-  printError() {
-    console.error(this.message);
-  }
 }
 
-export enum ErrorCode {
-  EmptyNamespace = 'EmptyNamespace',
-  EmptyEthProvider = 'EmptyEthProvider',
-  EmptyAuthProvider = 'EmptyAuthProvider',
-  NetworkError = 'NetworkError',
-  GraphqlError = 'GraphqlError',
-  CeramicError = 'CeramicError',
-  AuthProviderError = 'AuthProviderError',
-  SignJwtError = 'SignJwtError',
+ export enum ErrorCode {
+    EmptyNamespace = "EmptyNamespace",
+    EmptyEthProvider = "EmptyEthProvider",
+    EmptyAuthProvider = "EmptyAuthProvider",
+    NetworkError = "NetworkError",
+    GraphqlError = "GraphqlError",
+    CeramicError = "CeramicError",
+    AuthProviderError = "AuthProviderError",
+    SignJwtError = "SignJwtError"
 }
 
-const errors: { [key in ErrorCode]: string } = {
-  EmptyNamespace: 'Namespace can not be empty',
-  EmptyEthProvider: 'Eth provider can not be empty',
-  EmptyAuthProvider: 'Could not find authProvider',
-  NetworkError: '',
-  GraphqlError: '',
-  CeramicError: '',
-  AuthProviderError: '',
-  SignJwtError: '',
+ const errors: {
+    [key in ErrorCode]: string;
+} = {
+    EmptyNamespace: "Namespace can not be empty",
+    EmptyEthProvider: "Eth provider can not be empty",
+    EmptyAuthProvider: "Could not find authProvider",
+    NetworkError: "",
+    GraphqlError: "",
+    CeramicError: "",
+    AuthProviderError: "",
+    SignJwtError: "",
 };
diff --git a/src/index.ts b/src/index.ts
index 4c23c3063fd7044c5dbe39c1796cecacc4d2d525..1e4486c7830700fbe97bac8f4835c6b50f8f5465 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,7 +1,7 @@
-import CyberConnect from './cyberConnect';
-export { Env, Blockchain } from './types';
-export { ConnectError } from './error';
-export { getAddressByProvider } from './utils';
-export { solana } from '@ceramicnetwork/blockchain-utils-linking';
+import CyberConnect from "./cyberConnect.js";
+export { Env, Blockchain } from "./types.js";
+export { ConnectError } from "./error.js";
+export { getAddressByProvider } from "./utils.js";
+export { solana } from "@ceramicnetwork/blockchain-utils-linking";
 
-export default CyberConnect;
+ export default CyberConnect;
diff --git a/src/network.ts b/src/network.ts
index 0697f559cee71beda4075c15e7be405f379e6d6e..c0ae19d70c84ec5fbfbaf2254be255c5f67fd7b2 100644
--- a/src/network.ts
+++ b/src/network.ts
@@ -1,16 +1,16 @@
-import { Env, Endpoint } from './types';
+import { Env, Endpoint } from "./types.js";
 
-export const endpoints: { [key in Env]: Endpoint } = {
-  STAGING: {
-    ceramicUrl: 'https://ceramic.stg.cybertino.io',
-    cyberConnectSchema:
-      'kjzl6cwe1jw149mvqedik2h3j26y4bmcvucjbbhezwcr7dgdyyg9v0x8xfvlp1j',
-    cyberConnectApi: 'https://api.stg.cybertino.io/connect/',
-  },
-  PRODUCTION: {
-    ceramicUrl: 'https://ceramic.cybertino.io',
-    cyberConnectSchema:
-      'kjzl6cwe1jw14b3g6d22ze4jaatoikiq62qrmnbzo8hkg68ic7w0smq9ymzsxta',
-    cyberConnectApi: 'https://api.cybertino.io/connect/',
-  },
+ export const endpoints: {
+    [key in Env]: Endpoint;
+} = {
+    STAGING: {
+        ceramicUrl: "https://ceramic.stg.cybertino.io",
+        cyberConnectSchema: "kjzl6cwe1jw149mvqedik2h3j26y4bmcvucjbbhezwcr7dgdyyg9v0x8xfvlp1j",
+        cyberConnectApi: "https://api.stg.cybertino.io/connect/",
+    },
+    PRODUCTION: {
+        ceramicUrl: "https://ceramic.cybertino.io",
+        cyberConnectSchema: "kjzl6cwe1jw14b3g6d22ze4jaatoikiq62qrmnbzo8hkg68ic7w0smq9ymzsxta",
+        cyberConnectApi: "https://api.cybertino.io/connect/",
+    },
 };
diff --git a/src/queries.ts b/src/queries.ts
index 5ab38667b9e19020f741f095c6781ae5c07079b4..d9ef3de0cfcdcc394dff4073618d95a5d1797970 100644
--- a/src/queries.ts
+++ b/src/queries.ts
@@ -1,253 +1,207 @@
-import { Blockchain } from './types';
-export type Query = 'connect' | 'disconnect';
+import { Blockchain } from "./types.js";
+export type Query = "connect" | "disconnect";
 
-type RegisterSigningKeyInput = {
-  address: string;
-  message: string;
-  signature: string;
-  network: string;
+ type RegisterSigningKeyInput = {
+    address: string;
+    message: string;
+    signature: string;
+    network: string;
 };
 
-type UpdateConnectionInput = {
-  fromAddr: string;
-  toAddr: string;
-  namespace: string;
-  signature: string;
-  operation: string;
-  signingKey: string;
-  alias: string;
-  network: string;
+ type UpdateConnectionInput = {
+    fromAddr: string;
+    toAddr: string;
+    namespace: string;
+    signature: string;
+    operation: string;
+    signingKey: string;
+    alias: string;
+    network: string;
 };
 
-export const registerSigningKeySchema = (input: RegisterSigningKeyInput) => {
-  return {
-    operationName: 'registerKey',
-    query: `mutation registerKey($input: RegisterKeyInput!) {
+ export const registerSigningKeySchema = (input: RegisterSigningKeyInput) => {
+    return {
+        operationName: "registerKey",
+        query: `mutation registerKey($input: RegisterKeyInput!) {
       registerKey(input: $input) {
         result
       }
     }`,
-    variables: { input },
-  };
+        variables: { input },
+    };
 };
 export const connectQuerySchema = (input: UpdateConnectionInput) => {
-  return {
-    operationName: 'connect',
-    query: `mutation connect($input: UpdateConnectionInput!) {connect(input: $input) {result}}`,
-    variables: {
-      input,
-    },
-  };
+    return {
+        operationName: "connect",
+        query: `mutation connect($input: UpdateConnectionInput!) {connect(input: $input) {result}}`,
+        variables: {
+            input,
+        },
+    };
 };
 
-export const disconnectQuerySchema = (input: UpdateConnectionInput) => {
-  return {
-    operationName: 'disconnect',
-    query: `mutation disconnect($input: UpdateConnectionInput!) {disconnect(input: $input) {result}}`,
-    variables: {
-      input,
-    },
-  };
+ export const disconnectQuerySchema = (input: UpdateConnectionInput) => {
+    return {
+        operationName: "disconnect",
+        query: `mutation disconnect($input: UpdateConnectionInput!) {disconnect(input: $input) {result}}`,
+        variables: {
+            input,
+        },
+    };
 };
 export const setAliasQuerySchema = (input: UpdateConnectionInput) => {
-  return {
-    operationName: 'alias',
-    query: `mutation alias($input: UpdateConnectionInput!) {alias(input: $input) {result}}`,
-    variables: {
-      input,
-    },
-  };
+    return {
+        operationName: "alias",
+        query: `mutation alias($input: UpdateConnectionInput!) {alias(input: $input) {result}}`,
+        variables: {
+            input,
+        },
+    };
 };
 
-export const authSchema = ({
-  address,
-  signature,
-  network = Blockchain.ETH,
-}: {
-  address: string;
-  signature: string;
-  network: Blockchain;
+ export const authSchema = ({ address, signature, network = Blockchain.ETH, }: {
+    address: string;
+    signature: string;
+    network: Blockchain;
 }) => {
-  return {
-    operationName: 'auth',
-    query: `mutation auth($address: String!, $signature: String!, $network: String) {
+    return {
+        operationName: "auth",
+        query: `mutation auth($address: String!, $signature: String!, $network: String) {
       auth(address: $address, signature: $signature, network: $network) {
         result
         authToken
       }
     }`,
-    variables: { address, signature, network },
-  };
+        variables: { address, signature, network },
+    };
 };
 
-export const querySchemas = {
-  connect: connectQuerySchema,
-  disconnect: disconnectQuerySchema,
-  auth: authSchema,
-  setAlias: setAliasQuerySchema,
-  registerSigningKey: registerSigningKeySchema,
+ export const querySchemas = {
+    connect: connectQuerySchema,
+    disconnect: disconnectQuerySchema,
+    auth: authSchema,
+    setAlias: setAliasQuerySchema,
+    registerSigningKey: registerSigningKeySchema,
 };
 
-export const request = async (url = '', data = {}) => {
-  // Default options are marked with *
-  const response = await fetch(url, {
-    method: 'POST',
-    mode: 'cors',
-    cache: 'no-cache',
-    headers: {
-      'Content-Type': 'application/json',
-    },
-    referrerPolicy: 'no-referrer',
-    body: JSON.stringify(data),
-  });
-
-  return response.json();
+ export const request = async (url = "", data = {}) => {
+    // Default options are marked with *
+    const response = await fetch(url, {
+        method: "POST",
+        mode: "cors",
+        cache: "no-cache",
+        headers: {
+            "Content-Type": "application/json",
+        },
+        referrerPolicy: "no-referrer",
+        body: JSON.stringify(data),
+    });
+    
+ return response.json();
 };
 
-export const handleQuery = (
-  data: {
+ export const handleQuery = (data: {
     query: string;
     variables: object;
     operationName: string;
-  },
-  url: string,
-) => {
-  return request(url, data);
+}, url: string) => {
+    return request(url, data);
 };
 
-export const registerSigningKey = ({
-  address,
-  message,
-  signature,
-  network = Blockchain.ETH,
-  url,
-}: RegisterSigningKeyInput & { url: string }) => {
-  const result = querySchemas['registerSigningKey']({
-    address,
-    message,
-    signature,
-    network,
-  });
-  return handleQuery(result, url);
+ export const registerSigningKey = ({ address, message, signature, network = Blockchain.ETH, url, }: RegisterSigningKeyInput & {
+    url: string;
+}) => {
+    const result = querySchemas["registerSigningKey"]({
+        address,
+        message,
+        signature,
+        network,
+    });
+    return handleQuery(result, url);
 };
 
-export const auth = ({
-  address,
-  signature,
-  network = Blockchain.ETH,
-  url,
-}: {
-  address: string;
-  signature: string;
-  network: Blockchain;
-  url: string;
+ export const auth = ({ address, signature, network = Blockchain.ETH, url, }: {
+    address: string;
+    signature: string;
+    network: Blockchain;
+    url: string;
 }) => {
-  const result = querySchemas['auth']({
-    address,
-    signature,
-    network,
-  });
-  return handleQuery(result, url);
+    const result = querySchemas["auth"]({
+        address,
+        signature,
+        network,
+    });
+    return handleQuery(result, url);
 };
 
-export const follow = ({
-  fromAddr,
-  toAddr,
-  alias,
-  namespace,
-  url,
-  signature,
-  operation,
-  signingKey,
-  network = Blockchain.ETH,
-}: {
-  fromAddr: string;
-  toAddr: string;
-  alias: string;
-  namespace: string;
-  signature: string;
-  url: string;
-  operation: string;
-  signingKey: string;
-  network: Blockchain;
+ export const follow = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }: {
+    fromAddr: string;
+    toAddr: string;
+    alias: string;
+    namespace: string;
+    signature: string;
+    url: string;
+    operation: string;
+    signingKey: string;
+    network: Blockchain;
 }) => {
-  const schema = querySchemas['connect']({
-    fromAddr,
-    toAddr,
-    alias,
-    namespace,
-    signature,
-    operation,
-    signingKey,
-    network,
-  });
-  return handleQuery(schema, url);
+    const schema = querySchemas["connect"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
+    });
+    return handleQuery(schema, url);
 };
 
-export const unfollow = ({
-  fromAddr,
-  toAddr,
-  alias,
-  namespace,
-  url,
-  signature,
-  operation,
-  signingKey,
-  network = Blockchain.ETH,
-}: {
-  fromAddr: string;
-  toAddr: string;
-  alias: string;
-  namespace: string;
-  signature: string;
-  url: string;
-  operation: string;
-  signingKey: string;
-  network: Blockchain;
+ export const unfollow = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }: {
+    fromAddr: string;
+    toAddr: string;
+    alias: string;
+    namespace: string;
+    signature: string;
+    url: string;
+    operation: string;
+    signingKey: string;
+    network: Blockchain;
 }) => {
-  const schema = querySchemas['disconnect']({
-    fromAddr,
-    toAddr,
-    alias,
-    namespace,
-    signature,
-    operation,
-    signingKey,
-    network,
-  });
-  return handleQuery(schema, url);
+    const schema = querySchemas["disconnect"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
+    });
+    return handleQuery(schema, url);
 };
 
-export const setAlias = ({
-  fromAddr,
-  toAddr,
-  alias,
-  namespace,
-  url,
-  signature,
-  operation,
-  signingKey,
-  network = Blockchain.ETH,
-}: {
-  fromAddr: string;
-  toAddr: string;
-  alias: string;
-  namespace: string;
-  signature: string;
-  url: string;
-  operation: string;
-  signingKey: string;
-  network: Blockchain;
+ export const setAlias = ({ fromAddr, toAddr, alias, namespace, url, signature, operation, signingKey, network = Blockchain.ETH, }: {
+    fromAddr: string;
+    toAddr: string;
+    alias: string;
+    namespace: string;
+    signature: string;
+    url: string;
+    operation: string;
+    signingKey: string;
+    network: Blockchain;
 }) => {
-  const schema = querySchemas['setAlias']({
-    fromAddr,
-    toAddr,
-    alias,
-    namespace,
-    signature,
-    operation,
-    signingKey,
-    network,
-  });
-  return handleQuery(schema, url);
+    const schema = querySchemas["setAlias"]({
+        fromAddr,
+        toAddr,
+        alias,
+        namespace,
+        signature,
+        operation,
+        signingKey,
+        network,
+    });
+    return handleQuery(schema, url);
 };
diff --git a/src/utils.ts b/src/utils.ts
index 489d9c9f411136f62f53d2c195b78ae37e6fd5e7..668d1f056fbcd2f6e330f84b6eb93991ab5d886c 100644
--- a/src/utils.ts
+++ b/src/utils.ts
@@ -1,120 +1,105 @@
-import { Blockchain } from './types';
-import bs58 from 'bs58';
-import { hexlify } from '@ethersproject/bytes';
-import { toUtf8Bytes } from '@ethersproject/strings';
+import { Blockchain } from "./types.js";
+import bs58 from "bs58";
+import { hexlify } from "@ethersproject/bytes";
+import { toUtf8Bytes } from "@ethersproject/strings";
 
-export const encodeRpcMessage = (method: string, params?: any) => {
-  return {
-    jsonrpc: '2.0',
-    id: 1,
-    method,
-    params,
-  };
+ export const encodeRpcMessage = (method: string, params?: any) => {
+    return {
+        jsonrpc: "2.0",
+        id: 1,
+        method,
+        params,
+    };
 };
 
-export const safeSend = (
-  provider: any,
-  method: string,
-  params?: Array<any>,
-): Promise<any> => {
-  if (params == null) {
-    params = [];
-  }
-
-  if (provider.request) {
-    return provider.request({ method, params }).then(
-      (response: any) => response,
-      (error: any) => {
-        throw error;
-      },
-    );
-  } else if (provider.sendAsync || provider.send) {
-    const sendFunc = (
-      provider.sendAsync ? provider.sendAsync : provider.send
-    ).bind(provider);
-    const request = encodeRpcMessage(method, params);
-    return new Promise((resolve, reject) => {
-      sendFunc(request, (error: any, response: any) => {
-        if (error) reject(error);
-
-        if (response.error) {
-          const error = new Error(response.error.message);
-          (<any>error).code = response.error.code;
-          (<any>error).data = response.error.data;
-          reject(error);
-        }
-
-        resolve(response.result);
-      });
-    });
-  } else {
-    throw new Error(
-      `Unsupported provider; provider must implement one of the following methods: send, sendAsync, request`,
-    );
-  }
-};
-
-export const getAddressByProvider = async (
-  provider: any,
-  chain: Blockchain,
-) => {
-  switch (chain) {
-    case Blockchain.ETH: {
-      // ethers Web3Provider
-      if (typeof provider.getSigner === 'function') {
-        const signer = provider.getSigner();
-        const address = await signer.getAddress();
-        return address;
-      }
-
-      // ETH Provider
-      const addresses = await safeSend(provider, 'eth_accounts');
-      if (addresses && addresses[0]) {
-        return addresses[0];
-      } else {
-        return '';
-      }
+ export const safeSend = (provider: any, method: string, params?: Array<any>): Promise<any> => {
+    if (params == null) {
+        params = [];
     }
-    case Blockchain.SOLANA: {
-      return provider.publicKey.toString();
+    
+ if (provider.request) {
+        return provider.request({ method, params }).then((response: any) => response, (error: any) => {
+            throw error;
+        });
     }
-    default: {
-      return '';
+    else if (provider.sendAsync || provider.send) {
+        const sendFunc = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);
+        const request = encodeRpcMessage(method, params);
+        return new Promise((resolve, reject) => {
+            sendFunc(request, (error: any, response: any) => {
+                if (error)
+                    reject(error);
+                
+ if (response.error) {
+                    const error = new Error(response.error.message);
+                    (<any>error).code = response.error.code;
+                    (<any>error).data = response.error.data;
+                    reject(error);
+                }
+                
+ resolve(response.result);
+            });
+        });
+    }
+    else {
+        throw new Error(`Unsupported provider; provider must implement one of the following methods: send, sendAsync, request`);
     }
-  }
 };
 
-export const getSigningKeySignature = async (
-  provider: any,
-  chain: Blockchain,
-  message: string,
-  address: string,
-) => {
-  if (chain === Blockchain.ETH) {
-    if (provider.isAuthereum) {
-      return provider.signMessageWithSigningKey(message);
+ export const getAddressByProvider = async (provider: any, chain: Blockchain) => {
+    switch (chain) {
+        case Blockchain.ETH: {
+            // ethers Web3Provider
+            if (typeof provider.getSigner === "function") {
+                const signer = provider.getSigner();
+                const address = await signer.getAddress();
+                return address;
+            }
+            
+ // ETH Provider
+            const addresses = await safeSend(provider, "eth_accounts");
+            if (addresses && addresses[0]) {
+                return addresses[0];
+            }
+            else {
+                return "";
+            }
+        }
+        case Blockchain.SOLANA: {
+            return provider.publicKey.toString();
+        }
+        default: {
+            return "";
+        }
     }
+};
 
-    // ethers Web3Provider
-    if (typeof provider.getSigner === 'function') {
-      const signer = provider.getSigner();
-      const signingKeySignature = await signer.signMessage(message);
-      return signingKeySignature;
+ export const getSigningKeySignature = async (provider: any, chain: Blockchain, message: string, address: string) => {
+    if (chain === Blockchain.ETH) {
+        if (provider.isAuthereum) {
+            return provider.signMessageWithSigningKey(message);
+        }
+        
+ // ethers Web3Provider
+        if (typeof provider.getSigner === "function") {
+            const signer = provider.getSigner();
+            const signingKeySignature = await signer.signMessage(message);
+            return signingKeySignature;
+        }
+        
+ // ETH Provider
+        const signingKeySignature = await safeSend(provider, "personal_sign", [
+            hexlify(toUtf8Bytes(message)),
+            address,
+        ]);
+        
+ return signingKeySignature;
+    }
+    else if (chain === Blockchain.SOLANA) {
+        const signingKeySignature = bs58.encode(await provider.signMessage(new TextEncoder().encode(message)));
+        return signingKeySignature;
+    }
+    else {
+        return "";
     }
-
-    // ETH Provider
-    const signingKeySignature = await safeSend(provider, 'personal_sign', [
-      hexlify(toUtf8Bytes(message)),
-      address,
-    ]);
-
-    return signingKeySignature;
-  } else if (chain === Blockchain.SOLANA) {
-    const signingKeySignature = bs58.encode(
-      await provider.signMessage(new TextEncoder().encode(message)),
-    );
-    return signingKeySignature;
-  } else {
-    return '';
-  }
 };
diff --git a/tsconfig.json b/tsconfig.json
index 5264942b5ea676bc42349d5266cb7aef70d5295b..caf1d759d3c5f6d7229ce4aadf6001d6826aa962 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,9 +1,9 @@
 {
   "compilerOptions": {
-    "target": "es5",
+    "target": "ES2018",
     "lib": ["es6", "dom", "esnext"],
-    "module": "commonjs",
-    "moduleResolution": "node",
+    "module": "NodeNext",
+    "moduleResolution": "NodeNext",
     "declaration": true,
     "declarationMap": true,
     "sourceMap": true,